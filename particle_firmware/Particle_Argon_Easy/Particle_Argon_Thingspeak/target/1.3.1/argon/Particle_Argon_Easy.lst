
/Users/jhosen/Particle_Argon_Easy/Particle_Argon_Easy/target/1.3.1/argon/Particle_Argon_Easy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000049d0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d89f0  000d89f0  000089f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  00018a94  2**0
                  CONTENTS
  5 .data         00000070  2003e15c  000d89f8  0000e15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000624  2003e1cc  2003e1cc  0001e1cc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d8a68  000d8a68  00018a68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8a90  000d8a90  00018a90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011cbc7  00000000  00000000  00018a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016b8b  00000000  00000000  0013565b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00025363  00000000  00000000  0014c1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002d68  00000000  00000000  00171549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005278  00000000  00000000  001742b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003fe80  00000000  00000000  00179529  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a0af  00000000  00000000  001b93a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010dd92  00000000  00000000  001f3458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e508  00000000  00000000  003011ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 f82f 	bl	d8094 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 f834 	bl	d80aa <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e15c 	.word	0x2003e15c
   d404c:	000d89f8 	.word	0x000d89f8
   d4050:	2003e1cc 	.word	0x2003e1cc
   d4054:	2003e1cc 	.word	0x2003e1cc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fef7 	bl	d6e50 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d89ec 	.word	0x000d89ec
   d4084:	000d8994 	.word	0x000d8994

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b846 	b.w	d4118 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f947 	bl	d4320 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bea9 	b.w	d6dec <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bb13 	b.w	d56c4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bb19 	b.w	d56d4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bb17 	b.w	d56d4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0.constprop.7>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40b6:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40b8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40ba:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40bc:	689b      	ldr	r3, [r3, #8]
   d40be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40c0:	68a3      	ldr	r3, [r4, #8]
   d40c2:	3b01      	subs	r3, #1
   d40c4:	60a3      	str	r3, [r4, #8]
   d40c6:	b92b      	cbnz	r3, d40d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0.constprop.7+0x1e>
            _M_destroy();
   d40c8:	6823      	ldr	r3, [r4, #0]
   d40ca:	4620      	mov	r0, r4
   d40cc:	68db      	ldr	r3, [r3, #12]
        }
    }
   d40ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d40d2:	4718      	bx	r3
   d40d4:	bd10      	pop	{r4, pc}
	...

000d40d8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40d8:	b510      	push	{r4, lr}
   d40da:	4b06      	ldr	r3, [pc, #24]	; (d40f4 <_ZN9TCPClientD1Ev+0x1c>)
   d40dc:	6003      	str	r3, [r0, #0]
   d40de:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40e0:	6980      	ldr	r0, [r0, #24]
   d40e2:	b128      	cbz	r0, d40f0 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40e4:	6843      	ldr	r3, [r0, #4]
   d40e6:	3b01      	subs	r3, #1
   d40e8:	6043      	str	r3, [r0, #4]
   d40ea:	b90b      	cbnz	r3, d40f0 <_ZN9TCPClientD1Ev+0x18>
   d40ec:	f7ff ffe3 	bl	d40b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0.constprop.7>
   d40f0:	4620      	mov	r0, r4
   d40f2:	bd10      	pop	{r4, pc}
   d40f4:	000d881c 	.word	0x000d881c

000d40f8 <_ZN22BlynkTransportParticleD1Ev>:
#define BLYNK_INFO_CONNECTION "CC3000"

#include "BlynkApiParticle.h"
#include "BlynkProtocol.h"

class BlynkTransportParticle
   d40f8:	b510      	push	{r4, lr}
   d40fa:	4604      	mov	r4, r0
   d40fc:	f7ff ffec 	bl	d40d8 <_ZN9TCPClientD1Ev>
   d4100:	4620      	mov	r0, r4
   d4102:	bd10      	pop	{r4, pc}

000d4104 <_ZN9TCPClientD0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff ffe6 	bl	d40d8 <_ZN9TCPClientD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	211c      	movs	r1, #28
   d4110:	f002 ff79 	bl	d7006 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <setup>:




// setup() runs once, when the device is first turned on.
void setup() {
   d4118:	b508      	push	{r3, lr}
   Serial.begin(9600);
   d411a:	f002 fde5 	bl	d6ce8 <_Z16_fetch_usbserialv>
   d411e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4122:	f002 fdd5 	bl	d6cd0 <_ZN9USBSerial5beginEl>
   delay(5000);
   d4126:	f241 3088 	movw	r0, #5000	; 0x1388
   d412a:	f001 fb03 	bl	d5734 <delay>
   pinMode(BATT, INPUT);
   d412e:	2100      	movs	r1, #0
   d4130:	2021      	movs	r0, #33	; 0x21
   d4132:	f002 fecb 	bl	d6ecc <pinMode>
   //Initialize OLED Screen
   Wire.begin();
   d4136:	f002 ff1f 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d413a:	f001 fe95 	bl	d5e68 <_ZN7TwoWire5beginEv>
   SeeedOled.init();
   d413e:	4825      	ldr	r0, [pc, #148]	; (d41d4 <setup+0xbc>)
   d4140:	f000 ff58 	bl	d4ff4 <_ZN9SeeedOLED4initEv>

   SeeedOled.clearDisplay();
   d4144:	4823      	ldr	r0, [pc, #140]	; (d41d4 <setup+0xbc>)
   d4146:	f000 ffc1 	bl	d50cc <_ZN9SeeedOLED12clearDisplayEv>
   SeeedOled.setNormalDisplay();
   d414a:	4822      	ldr	r0, [pc, #136]	; (d41d4 <setup+0xbc>)
   d414c:	f001 f825 	bl	d519a <_ZN9SeeedOLED16setNormalDisplayEv>
   SeeedOled.setPageMode();
   d4150:	4820      	ldr	r0, [pc, #128]	; (d41d4 <setup+0xbc>)
   d4152:	f000 ff64 	bl	d501e <_ZN9SeeedOLED11setPageModeEv>

   //OLED Startup Message
   SeeedOled.setTextXY(2, 0);
   d4156:	2200      	movs	r2, #0
   d4158:	2102      	movs	r1, #2
   d415a:	481e      	ldr	r0, [pc, #120]	; (d41d4 <setup+0xbc>)
   d415c:	f000 ff6c 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
   SeeedOled.putString("Ready");
   d4160:	491d      	ldr	r1, [pc, #116]	; (d41d8 <setup+0xc0>)
   d4162:	481c      	ldr	r0, [pc, #112]	; (d41d4 <setup+0xbc>)
   d4164:	f000 ffd4 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>
   SeeedOled.setTextXY(3, 0);
   d4168:	2200      	movs	r2, #0
   d416a:	2103      	movs	r1, #3
   d416c:	4819      	ldr	r0, [pc, #100]	; (d41d4 <setup+0xbc>)
   d416e:	f000 ff63 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
   SeeedOled.putString("to");
   d4172:	491a      	ldr	r1, [pc, #104]	; (d41dc <setup+0xc4>)
   d4174:	4817      	ldr	r0, [pc, #92]	; (d41d4 <setup+0xbc>)
   d4176:	f000 ffcb 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>
   SeeedOled.setTextXY(4, 0);
   d417a:	2200      	movs	r2, #0
   d417c:	2104      	movs	r1, #4
   d417e:	4815      	ldr	r0, [pc, #84]	; (d41d4 <setup+0xbc>)
   d4180:	f000 ff5a 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
   SeeedOled.putString("Rock and Roll");
   d4184:	4916      	ldr	r1, [pc, #88]	; (d41e0 <setup+0xc8>)
   d4186:	4813      	ldr	r0, [pc, #76]	; (d41d4 <setup+0xbc>)
   d4188:	f000 ffc2 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>

   pinMode(DUST_SENSOR_PIN, INPUT);
   d418c:	2100      	movs	r1, #0
   d418e:	2004      	movs	r0, #4
   d4190:	f002 fe9c 	bl	d6ecc <pinMode>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4194:	f001 f84a 	bl	d522c <HAL_Timer_Get_Milli_Seconds>
   lastInterval = millis();
   d4198:	4b12      	ldr	r3, [pc, #72]	; (d41e4 <setup+0xcc>)
   d419a:	6018      	str	r0, [r3, #0]


   //checking to see if the air quality sensor is ready.
   if (aqSensor.init())
   d419c:	4812      	ldr	r0, [pc, #72]	; (d41e8 <setup+0xd0>)
   d419e:	f000 feaa 	bl	d4ef6 <_ZN16AirQualitySensor4initEv>
   d41a2:	b118      	cbz	r0, d41ac <setup+0x94>
   {
      Serial.println("Air Quality Sensor ready.");
   d41a4:	f002 fda0 	bl	d6ce8 <_Z16_fetch_usbserialv>
   d41a8:	4910      	ldr	r1, [pc, #64]	; (d41ec <setup+0xd4>)
   d41aa:	e002      	b.n	d41b2 <setup+0x9a>
    }
   else
   {
      Serial.println("Air Quality Sensor ERROR!");
   d41ac:	f002 fd9c 	bl	d6ce8 <_Z16_fetch_usbserialv>
   d41b0:	490f      	ldr	r1, [pc, #60]	; (d41f0 <setup+0xd8>)
   d41b2:	f002 f89c 	bl	d62ee <_ZN5Print7printlnEPKc>
   }


   //checking to see if the BME sensor is ready.
   if (bme.begin())
   d41b6:	480f      	ldr	r0, [pc, #60]	; (d41f4 <setup+0xdc>)
   d41b8:	f000 fd2c 	bl	d4c14 <_ZN15Adafruit_BME2805beginEv>
   d41bc:	b118      	cbz	r0, d41c6 <setup+0xae>
   {
      Serial.println("BME280 Sensor ready.");
   d41be:	f002 fd93 	bl	d6ce8 <_Z16_fetch_usbserialv>
   d41c2:	490d      	ldr	r1, [pc, #52]	; (d41f8 <setup+0xe0>)
   d41c4:	e002      	b.n	d41cc <setup+0xb4>
   }
   else
   {
      Serial.println("BME280 Sensor ERROR!");
   d41c6:	f002 fd8f 	bl	d6ce8 <_Z16_fetch_usbserialv>
   d41ca:	490c      	ldr	r1, [pc, #48]	; (d41fc <setup+0xe4>)
   }



}
   d41cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   {
      Serial.println("BME280 Sensor ready.");
   }
   else
   {
      Serial.println("BME280 Sensor ERROR!");
   d41d0:	f002 b88d 	b.w	d62ee <_ZN5Print7printlnEPKc>
   d41d4:	2003e3c4 	.word	0x2003e3c4
   d41d8:	000d8168 	.word	0x000d8168
   d41dc:	000d816e 	.word	0x000d816e
   d41e0:	000d8171 	.word	0x000d8171
   d41e4:	2003e384 	.word	0x2003e384
   d41e8:	2003e38c 	.word	0x2003e38c
   d41ec:	000d817f 	.word	0x000d817f
   d41f0:	000d8199 	.word	0x000d8199
   d41f4:	2003e2d8 	.word	0x2003e2d8
   d41f8:	000d81b3 	.word	0x000d81b3
   d41fc:	000d81c8 	.word	0x000d81c8

000d4200 <_Z13updateDisplayfffl>:



//function to run OLED display.
void updateDisplay(float temp, float humidity, float pressure, long ratio)
{
   d4200:	b510      	push	{r4, lr}
   d4202:	4604      	mov	r4, r0
   d4204:	ed2d 8b04 	vpush	{d8-d9}
 SeeedOled.clearDisplay();
   d4208:	483a      	ldr	r0, [pc, #232]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)



//function to run OLED display.
void updateDisplay(float temp, float humidity, float pressure, long ratio)
{
   d420a:	eeb0 9a40 	vmov.f32	s18, s0
   d420e:	eef0 8a60 	vmov.f32	s17, s1
   d4212:	eeb0 8a41 	vmov.f32	s16, s2
 SeeedOled.clearDisplay();
   d4216:	f000 ff59 	bl	d50cc <_ZN9SeeedOLED12clearDisplayEv>

 SeeedOled.setTextXY(0, 3);
   d421a:	2203      	movs	r2, #3
   d421c:	2100      	movs	r1, #0
   d421e:	4835      	ldr	r0, [pc, #212]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d4220:	f000 ff0a 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
 SeeedOled.putNumber(ratio);
   d4224:	4621      	mov	r1, r4
   d4226:	4833      	ldr	r0, [pc, #204]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
 SeeedOled.setTextXY(4, 0);
 SeeedOled.putString("Press: ");
 SeeedOled.putNumber(pressure);
 SeeedOled.putString(" hPa");

 if (concentration > 1)
   d4228:	4c33      	ldr	r4, [pc, #204]	; (d42f8 <_Z13updateDisplayfffl+0xf8>)
void updateDisplay(float temp, float humidity, float pressure, long ratio)
{
 SeeedOled.clearDisplay();

 SeeedOled.setTextXY(0, 3);
 SeeedOled.putNumber(ratio);
   d422a:	f000 ff7e 	bl	d512a <_ZN9SeeedOLED9putNumberEl>

 SeeedOled.setTextXY(2, 0);
   d422e:	2200      	movs	r2, #0
   d4230:	2102      	movs	r1, #2
   d4232:	4830      	ldr	r0, [pc, #192]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d4234:	f000 ff00 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
 SeeedOled.putString("Temp: ");
   d4238:	4930      	ldr	r1, [pc, #192]	; (d42fc <_Z13updateDisplayfffl+0xfc>)
   d423a:	482e      	ldr	r0, [pc, #184]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d423c:	f000 ff68 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>
 SeeedOled.putNumber(temp);
   d4240:	eefd 7ac9 	vcvt.s32.f32	s15, s18
   d4244:	482b      	ldr	r0, [pc, #172]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d4246:	ee17 1a90 	vmov	r1, s15
   d424a:	f000 ff6e 	bl	d512a <_ZN9SeeedOLED9putNumberEl>
 SeeedOled.putString("C");
   d424e:	492c      	ldr	r1, [pc, #176]	; (d4300 <_Z13updateDisplayfffl+0x100>)
   d4250:	4828      	ldr	r0, [pc, #160]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d4252:	f000 ff5d 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>

 SeeedOled.setTextXY(3, 0);
   d4256:	2200      	movs	r2, #0
   d4258:	2103      	movs	r1, #3
   d425a:	4826      	ldr	r0, [pc, #152]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d425c:	f000 feec 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
 SeeedOled.putString("Humidity: ");
   d4260:	4928      	ldr	r1, [pc, #160]	; (d4304 <_Z13updateDisplayfffl+0x104>)
   d4262:	4824      	ldr	r0, [pc, #144]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d4264:	f000 ff54 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>
 SeeedOled.putNumber(humidity);
   d4268:	eefd 7ae8 	vcvt.s32.f32	s15, s17
   d426c:	4821      	ldr	r0, [pc, #132]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d426e:	ee17 1a90 	vmov	r1, s15
   d4272:	f000 ff5a 	bl	d512a <_ZN9SeeedOLED9putNumberEl>
 SeeedOled.putString("%");
   d4276:	4924      	ldr	r1, [pc, #144]	; (d4308 <_Z13updateDisplayfffl+0x108>)
   d4278:	481e      	ldr	r0, [pc, #120]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d427a:	f000 ff49 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>

 SeeedOled.setTextXY(4, 0);
   d427e:	2200      	movs	r2, #0
   d4280:	2104      	movs	r1, #4
   d4282:	481c      	ldr	r0, [pc, #112]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d4284:	f000 fed8 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
 SeeedOled.putString("Press: ");
   d4288:	4920      	ldr	r1, [pc, #128]	; (d430c <_Z13updateDisplayfffl+0x10c>)
   d428a:	481a      	ldr	r0, [pc, #104]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d428c:	f000 ff40 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>
 SeeedOled.putNumber(pressure);
   d4290:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d4294:	4817      	ldr	r0, [pc, #92]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d4296:	ee17 1a90 	vmov	r1, s15
   d429a:	f000 ff46 	bl	d512a <_ZN9SeeedOLED9putNumberEl>
 SeeedOled.putString(" hPa");
   d429e:	491c      	ldr	r1, [pc, #112]	; (d4310 <_Z13updateDisplayfffl+0x110>)
   d42a0:	4814      	ldr	r0, [pc, #80]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d42a2:	f000 ff35 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>

 if (concentration > 1)
   d42a6:	ed94 7a00 	vldr	s14, [r4]
   d42aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d42ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d42b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42b6:	dd19      	ble.n	d42ec <_Z13updateDisplayfffl+0xec>
 {
   SeeedOled.setTextXY(5, 0);
   d42b8:	2200      	movs	r2, #0
   d42ba:	2105      	movs	r1, #5
   d42bc:	480d      	ldr	r0, [pc, #52]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d42be:	f000 febb 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
   SeeedOled.putString("Dust: ");
   d42c2:	4914      	ldr	r1, [pc, #80]	; (d4314 <_Z13updateDisplayfffl+0x114>)
   d42c4:	480b      	ldr	r0, [pc, #44]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d42c6:	f000 ff23 	bl	d5110 <_ZN9SeeedOLED9putStringEPKc>
   SeeedOled.putNumber(concentration); // Cast our float to an int to make it more compact
   d42ca:	edd4 7a00 	vldr	s15, [r4]
   d42ce:	4809      	ldr	r0, [pc, #36]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
   d42d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d42d4:	ee17 1a90 	vmov	r1, s15
   d42d8:	f000 ff27 	bl	d512a <_ZN9SeeedOLED9putNumberEl>
   SeeedOled.putString(" pcs/L");
 }
}
   d42dc:	ecbd 8b04 	vpop	{d8-d9}
 if (concentration > 1)
 {
   SeeedOled.setTextXY(5, 0);
   SeeedOled.putString("Dust: ");
   SeeedOled.putNumber(concentration); // Cast our float to an int to make it more compact
   SeeedOled.putString(" pcs/L");
   d42e0:	490d      	ldr	r1, [pc, #52]	; (d4318 <_Z13updateDisplayfffl+0x118>)
   d42e2:	4804      	ldr	r0, [pc, #16]	; (d42f4 <_Z13updateDisplayfffl+0xf4>)
 }
}
   d42e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 if (concentration > 1)
 {
   SeeedOled.setTextXY(5, 0);
   SeeedOled.putString("Dust: ");
   SeeedOled.putNumber(concentration); // Cast our float to an int to make it more compact
   SeeedOled.putString(" pcs/L");
   d42e8:	f000 bf12 	b.w	d5110 <_ZN9SeeedOLED9putStringEPKc>
 }
}
   d42ec:	ecbd 8b04 	vpop	{d8-d9}
   d42f0:	bd10      	pop	{r4, pc}
   d42f2:	bf00      	nop
   d42f4:	2003e3c4 	.word	0x2003e3c4
   d42f8:	2003e2d0 	.word	0x2003e2d0
   d42fc:	000d81dd 	.word	0x000d81dd
   d4300:	000d81e4 	.word	0x000d81e4
   d4304:	000d81e6 	.word	0x000d81e6
   d4308:	000d81f1 	.word	0x000d81f1
   d430c:	000d81f3 	.word	0x000d81f3
   d4310:	000d81fb 	.word	0x000d81fb
   d4314:	000d8200 	.word	0x000d8200
   d4318:	000d8207 	.word	0x000d8207
   d431c:	00000000 	.word	0x00000000

000d4320 <loop>:




// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4324:	ed2d 8b04 	vpush	{d8-d9}
int temp, pressure, humidity;   
duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4328:	2100      	movs	r1, #0




// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d432a:	b095      	sub	sp, #84	; 0x54
int temp, pressure, humidity;   
duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d432c:	2004      	movs	r0, #4
   d432e:	f002 fe21 	bl	d6f74 <pulseIn>
lowpulseoccupancy = lowpulseoccupancy + duration;
   d4332:	4c7b      	ldr	r4, [pc, #492]	; (d4520 <loop+0x200>)


// loop() runs over and over again, as quickly as it can execute.
void loop() {
int temp, pressure, humidity;   
duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4334:	4b7b      	ldr	r3, [pc, #492]	; (d4524 <loop+0x204>)
lowpulseoccupancy = lowpulseoccupancy + duration;
ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
   d4336:	4e7c      	ldr	r6, [pc, #496]	; (d4528 <loop+0x208>)


// loop() runs over and over again, as quickly as it can execute.
void loop() {
int temp, pressure, humidity;   
duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4338:	6018      	str	r0, [r3, #0]
lowpulseoccupancy = lowpulseoccupancy + duration;
   d433a:	6823      	ldr	r3, [r4, #0]
ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d433c:	4f7b      	ldr	r7, [pc, #492]	; (d452c <loop+0x20c>)

// loop() runs over and over again, as quickly as it can execute.
void loop() {
int temp, pressure, humidity;   
duration = pulseIn(DUST_SENSOR_PIN, LOW);
lowpulseoccupancy = lowpulseoccupancy + duration;
   d433e:	4418      	add	r0, r3
   d4340:	6020      	str	r0, [r4, #0]
ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
   d4342:	f003 f8ef 	bl	d7524 <__aeabi_ui2d>
   d4346:	a372      	add	r3, pc, #456	; (adr r3, d4510 <loop+0x1f0>)
   d4348:	e9d3 2300 	ldrd	r2, r3, [r3]
   d434c:	f003 fa8a 	bl	d7864 <__aeabi_ddiv>
   d4350:	f003 fb70 	bl	d7a34 <__aeabi_d2f>
   d4354:	6030      	str	r0, [r6, #0]
   d4356:	f000 ff69 	bl	d522c <HAL_Timer_Get_Milli_Seconds>
if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d435a:	683b      	ldr	r3, [r7, #0]
   d435c:	1ac0      	subs	r0, r0, r3
   d435e:	4b74      	ldr	r3, [pc, #464]	; (d4530 <loop+0x210>)
   d4360:	4298      	cmp	r0, r3
   d4362:	4625      	mov	r5, r4
   d4364:	f240 80ce 	bls.w	d4504 <loop+0x1e4>
   d4368:	f000 ff60 	bl	d522c <HAL_Timer_Get_Milli_Seconds>
{
   
   lastInterval = millis();
   d436c:	6038      	str	r0, [r7, #0]

   float voltage = analogRead(BATT) * 0.0011224;
   d436e:	2021      	movs	r0, #33	; 0x21
   d4370:	f002 fde9 	bl	d6f46 <analogRead>
   d4374:	4604      	mov	r4, r0
   //This is the air quality code
  
    temp = (float)bme.readTemperature();
   d4376:	486f      	ldr	r0, [pc, #444]	; (d4534 <loop+0x214>)
   Serial.printlnf("Temp: %d", temp);
   Serial.printlnf("Pressure: %d", pressure);
   Serial.printlnf("Humidity: %d", humidity);
   updateDisplay(temp, humidity, pressure, ratio);
   //createEventPayload(temp, humidity, pressure, quality);
    field1 = temp;
   d4378:	4f6f      	ldr	r7, [pc, #444]	; (d4538 <loop+0x218>)
    field2 = pressure;
   d437a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; d4578 <loop+0x258>
    field3 = humidity;
   d437e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; d457c <loop+0x25c>
    field4 = voltage;
   d4382:	f8df a1fc 	ldr.w	sl, [pc, #508]	; d4580 <loop+0x260>
   lastInterval = millis();

   float voltage = analogRead(BATT) * 0.0011224;
   //This is the air quality code
  
    temp = (float)bme.readTemperature();
   d4386:	f000 fc59 	bl	d4c3c <_ZN15Adafruit_BME28015readTemperatureEv>
    pressure = (float)(bme.readPressure() / 100.0F);
   d438a:	486a      	ldr	r0, [pc, #424]	; (d4534 <loop+0x214>)
   lastInterval = millis();

   float voltage = analogRead(BATT) * 0.0011224;
   //This is the air quality code
  
    temp = (float)bme.readTemperature();
   d438c:	eebd 9ac0 	vcvt.s32.f32	s18, s0
    pressure = (float)(bme.readPressure() / 100.0F);
   d4390:	f000 fc82 	bl	d4c98 <_ZN15Adafruit_BME28012readPressureEv>
   d4394:	eddf 7a69 	vldr	s15, [pc, #420]	; d453c <loop+0x21c>
    humidity = (float)bme.readHumidity();
   d4398:	4866      	ldr	r0, [pc, #408]	; (d4534 <loop+0x214>)

   float voltage = analogRead(BATT) * 0.0011224;
   //This is the air quality code
  
    temp = (float)bme.readTemperature();
    pressure = (float)(bme.readPressure() / 100.0F);
   d439a:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d439e:	46bb      	mov	fp, r7
   d43a0:	eebd 8ac0 	vcvt.s32.f32	s16, s0
    humidity = (float)bme.readHumidity();
   d43a4:	f000 fd56 	bl	d4e54 <_ZN15Adafruit_BME28012readHumidityEv>
   d43a8:	eefd 8ac0 	vcvt.s32.f32	s17, s0
   //getBMEValues(temp, pressure, humidity);
   Serial.printlnf("Temp: %d", temp);
   d43ac:	f002 fc9c 	bl	d6ce8 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d43b0:	ee19 3a10 	vmov	r3, s18
   d43b4:	4a62      	ldr	r2, [pc, #392]	; (d4540 <loop+0x220>)
   d43b6:	2101      	movs	r1, #1
   d43b8:	f001 ffd2 	bl	d6360 <_ZN5Print11printf_implEbPKcz>
   Serial.printlnf("Pressure: %d", pressure);
   d43bc:	f002 fc94 	bl	d6ce8 <_Z16_fetch_usbserialv>
   d43c0:	ee18 3a10 	vmov	r3, s16
   d43c4:	4a5f      	ldr	r2, [pc, #380]	; (d4544 <loop+0x224>)
   d43c6:	2101      	movs	r1, #1
   d43c8:	f001 ffca 	bl	d6360 <_ZN5Print11printf_implEbPKcz>
   Serial.printlnf("Humidity: %d", humidity);
   d43cc:	f002 fc8c 	bl	d6ce8 <_Z16_fetch_usbserialv>
   d43d0:	ee18 3a90 	vmov	r3, s17
   d43d4:	4a5c      	ldr	r2, [pc, #368]	; (d4548 <loop+0x228>)
   d43d6:	2101      	movs	r1, #1
   d43d8:	f001 ffc2 	bl	d6360 <_ZN5Print11printf_implEbPKcz>
   updateDisplay(temp, humidity, pressure, ratio);
   d43dc:	edd6 7a00 	vldr	s15, [r6]
   d43e0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d43e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d43e8:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
   d43ec:	eef8 8ae8 	vcvt.f32.s32	s17, s17
   d43f0:	ee17 0a90 	vmov	r0, s15
   d43f4:	eeb0 1a48 	vmov.f32	s2, s16
   d43f8:	eef0 0a68 	vmov.f32	s1, s17
   d43fc:	eeb0 0a49 	vmov.f32	s0, s18
   d4400:	f7ff fefe 	bl	d4200 <_Z13updateDisplayfffl>
   //createEventPayload(temp, humidity, pressure, quality);
    field1 = temp;
   d4404:	ed87 9a00 	vstr	s18, [r7]
    field2 = pressure;
    field3 = humidity;
    field4 = voltage;
   d4408:	4620      	mov	r0, r4
   Serial.printlnf("Pressure: %d", pressure);
   Serial.printlnf("Humidity: %d", humidity);
   updateDisplay(temp, humidity, pressure, ratio);
   //createEventPayload(temp, humidity, pressure, quality);
    field1 = temp;
    field2 = pressure;
   d440a:	ed88 8a00 	vstr	s16, [r8]
    field3 = humidity;
   d440e:	edc9 8a00 	vstr	s17, [r9]
    field4 = voltage;
   d4412:	f003 f897 	bl	d7544 <__aeabi_i2d>
   d4416:	a340      	add	r3, pc, #256	; (adr r3, d4518 <loop+0x1f8>)
   d4418:	e9d3 2300 	ldrd	r2, r3, [r3]
   d441c:	f003 f8f8 	bl	d7610 <__aeabi_dmul>
   d4420:	f003 fb08 	bl	d7a34 <__aeabi_d2f>
   d4424:	f8ca 0000 	str.w	r0, [sl]
    field5 = aqSensor.slope();
   d4428:	4848      	ldr	r0, [pc, #288]	; (d454c <loop+0x22c>)
   d442a:	4c49      	ldr	r4, [pc, #292]	; (d4550 <loop+0x230>)
   d442c:	4f49      	ldr	r7, [pc, #292]	; (d4554 <loop+0x234>)
   d442e:	f000 fd91 	bl	d4f54 <_ZN16AirQualitySensor5slopeEv>
   d4432:	ee07 0a90 	vmov	s15, r0
   d4436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    field6 = aqSensor.getValue();
   d443a:	4844      	ldr	r0, [pc, #272]	; (d454c <loop+0x22c>)
   //createEventPayload(temp, humidity, pressure, quality);
    field1 = temp;
    field2 = pressure;
    field3 = humidity;
    field4 = voltage;
    field5 = aqSensor.slope();
   d443c:	edc4 7a00 	vstr	s15, [r4]
    field6 = aqSensor.getValue();
   d4440:	f000 fd6e 	bl	d4f20 <_ZN16AirQualitySensor8getValueEv>
   d4444:	ee07 0a90 	vmov	s15, r0
   d4448:	4b43      	ldr	r3, [pc, #268]	; (d4558 <loop+0x238>)
   d444a:	4a44      	ldr	r2, [pc, #272]	; (d455c <loop+0x23c>)
   d444c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d4450:	ed83 8a00 	vstr	s16, [r3]
      if (lowpulseoccupancy > 0)
   d4454:	682b      	ldr	r3, [r5, #0]
   d4456:	b13b      	cbz	r3, d4468 <loop+0x148>
  {
    field7 = lowpulseoccupancy;
   d4458:	ee07 3a90 	vmov	s15, r3
   d445c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    field8 = ratio;
   d4460:	6833      	ldr	r3, [r6, #0]
    field4 = voltage;
    field5 = aqSensor.slope();
    field6 = aqSensor.getValue();
      if (lowpulseoccupancy > 0)
  {
    field7 = lowpulseoccupancy;
   d4462:	edc7 7a00 	vstr	s15, [r7]
    field8 = ratio;
   d4466:	6013      	str	r3, [r2, #0]
  }
    lowpulseoccupancy = 0;
   d4468:	2300      	movs	r3, #0
   d446a:	602b      	str	r3, [r5, #0]
    snprintf(msg, sizeof(msg),"{\"1\":\"%.2f\", \"2\":\"%.1f\", \"3\":\"%.2f\", \"4\":\"%.2f\", \"5\":\"%.3f\", \"6\":\"%.2f\", \"7\":\"%.1f\", \"8\":\"%.4f\", \"k\":\"%s\"}", field1, field2, field3, field4, field5, field6, field7, field8, myWriteAPIKey);
   d446c:	4b3c      	ldr	r3, [pc, #240]	; (d4560 <loop+0x240>)
   d446e:	681b      	ldr	r3, [r3, #0]
   d4470:	9310      	str	r3, [sp, #64]	; 0x40
   d4472:	6810      	ldr	r0, [r2, #0]
   d4474:	f003 f878 	bl	d7568 <__aeabi_f2d>
   d4478:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   d447c:	6838      	ldr	r0, [r7, #0]
   d447e:	f003 f873 	bl	d7568 <__aeabi_f2d>
   d4482:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d4486:	ee18 0a10 	vmov	r0, s16
   d448a:	f003 f86d 	bl	d7568 <__aeabi_f2d>
   d448e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4492:	6820      	ldr	r0, [r4, #0]
   d4494:	f003 f868 	bl	d7568 <__aeabi_f2d>
   d4498:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d449c:	f8da 0000 	ldr.w	r0, [sl]
   d44a0:	f003 f862 	bl	d7568 <__aeabi_f2d>
   d44a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d44a8:	f8d9 0000 	ldr.w	r0, [r9]
   d44ac:	f003 f85c 	bl	d7568 <__aeabi_f2d>
   d44b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d44b4:	f8d8 0000 	ldr.w	r0, [r8]
   d44b8:	f003 f856 	bl	d7568 <__aeabi_f2d>
   d44bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d44c0:	f8db 0000 	ldr.w	r0, [fp]
   d44c4:	f003 f850 	bl	d7568 <__aeabi_f2d>
   d44c8:	4a26      	ldr	r2, [pc, #152]	; (d4564 <loop+0x244>)
   d44ca:	e9cd 0100 	strd	r0, r1, [sp]
   d44ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44d2:	4825      	ldr	r0, [pc, #148]	; (d4568 <loop+0x248>)
   d44d4:	f001 f906 	bl	d56e4 <snprintf>
    Particle.publish(eventName, msg, PRIVATE, NO_ACK);
   d44d8:	4b24      	ldr	r3, [pc, #144]	; (d456c <loop+0x24c>)
   d44da:	6819      	ldr	r1, [r3, #0]
   d44dc:	4b24      	ldr	r3, [pc, #144]	; (d4570 <loop+0x250>)
   d44de:	781a      	ldrb	r2, [r3, #0]
   d44e0:	4b24      	ldr	r3, [pc, #144]	; (d4574 <loop+0x254>)
   d44e2:	781b      	ldrb	r3, [r3, #0]
   d44e4:	4313      	orrs	r3, r2
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d44e6:	f88d 3000 	strb.w	r3, [sp]
   d44ea:	a812      	add	r0, sp, #72	; 0x48
   d44ec:	233c      	movs	r3, #60	; 0x3c
   d44ee:	4a1e      	ldr	r2, [pc, #120]	; (d4568 <loop+0x248>)
   d44f0:	f001 fabc 	bl	d5a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d44f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   d44f6:	b128      	cbz	r0, d4504 <loop+0x1e4>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d44f8:	6843      	ldr	r3, [r0, #4]
   d44fa:	3b01      	subs	r3, #1
   d44fc:	6043      	str	r3, [r0, #4]
   d44fe:	b90b      	cbnz	r3, d4504 <loop+0x1e4>
   d4500:	f7ff fdd9 	bl	d40b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0.constprop.7>

}

}
   d4504:	b015      	add	sp, #84	; 0x54
   d4506:	ecbd 8b04 	vpop	{d8-d9}
   d450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d450e:	bf00      	nop
   d4510:	00000000 	.word	0x00000000
   d4514:	41612a88 	.word	0x41612a88
   d4518:	d2c10294 	.word	0xd2c10294
   d451c:	3f5263af 	.word	0x3f5263af
   d4520:	2003e388 	.word	0x2003e388
   d4524:	2003e35c 	.word	0x2003e35c
   d4528:	2003e2d4 	.word	0x2003e2d4
   d452c:	2003e384 	.word	0x2003e384
   d4530:	000dbba0 	.word	0x000dbba0
   d4534:	2003e2d8 	.word	0x2003e2d8
   d4538:	2003e3a8 	.word	0x2003e3a8
   d453c:	42c80000 	.word	0x42c80000
   d4540:	000d820e 	.word	0x000d820e
   d4544:	000d8217 	.word	0x000d8217
   d4548:	000d8224 	.word	0x000d8224
   d454c:	2003e38c 	.word	0x2003e38c
   d4550:	2003e3b8 	.word	0x2003e3b8
   d4554:	2003e3c0 	.word	0x2003e3c0
   d4558:	2003e3bc 	.word	0x2003e3bc
   d455c:	2003e380 	.word	0x2003e380
   d4560:	2003e15c 	.word	0x2003e15c
   d4564:	000d8231 	.word	0x000d8231
   d4568:	2003e1d0 	.word	0x2003e1d0
   d456c:	2003e160 	.word	0x2003e160
   d4570:	2003e31c 	.word	0x2003e31c
   d4574:	2003e360 	.word	0x2003e360
   d4578:	2003e3ac 	.word	0x2003e3ac
   d457c:	2003e3b0 	.word	0x2003e3b0
   d4580:	2003e3b4 	.word	0x2003e3b4

000d4584 <_GLOBAL__sub_I_Blynk>:
   SeeedOled.setTextXY(5, 0);
   SeeedOled.putString("Dust: ");
   SeeedOled.putNumber(concentration); // Cast our float to an int to make it more compact
   SeeedOled.putString(" pcs/L");
 }
}
   d4584:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4586:	4b15      	ldr	r3, [pc, #84]	; (d45dc <_GLOBAL__sub_I_Blynk+0x58>)
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4588:	4d15      	ldr	r5, [pc, #84]	; (d45e0 <_GLOBAL__sub_I_Blynk+0x5c>)
   d458a:	2201      	movs	r2, #1
   d458c:	701a      	strb	r2, [r3, #0]
   d458e:	4b15      	ldr	r3, [pc, #84]	; (d45e4 <_GLOBAL__sub_I_Blynk+0x60>)
   d4590:	2202      	movs	r2, #2
   d4592:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4594:	f000 fe52 	bl	d523c <HAL_Pin_Map>
   d4598:	4628      	mov	r0, r5
   d459a:	f002 fa99 	bl	d6ad0 <_ZN9TCPClientC1Ev>
   d459e:	f105 001c 	add.w	r0, r5, #28
   d45a2:	2400      	movs	r4, #0
   d45a4:	f001 fcbe 	bl	d5f24 <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d45a8:	4a0f      	ldr	r2, [pc, #60]	; (d45e8 <_GLOBAL__sub_I_Blynk+0x64>)
   d45aa:	4910      	ldr	r1, [pc, #64]	; (d45ec <_GLOBAL__sub_I_Blynk+0x68>)
   d45ac:	636c      	str	r4, [r5, #52]	; 0x34
   d45ae:	4628      	mov	r0, r5
   d45b0:	872c      	strh	r4, [r5, #56]	; 0x38
   d45b2:	f002 fd23 	bl	d6ffc <__aeabi_atexit>
        , lastHeartbeat(0)
#ifdef BLYNK_MSG_LIMIT
        , deltaCmd(0)
#endif
        , currentMsgId(0)
        , state(CONNECTING)
   d45b6:	4b0e      	ldr	r3, [pc, #56]	; (d45f0 <_GLOBAL__sub_I_Blynk+0x6c>)
#define CAYENNE_PRINT serial
#define DUST_SENSOR_PIN D4
#define SENSOR_READING_INTERVAL 900000
#define AQS_PIN A2

AirQualitySensor aqSensor(AQS_PIN);
   d45b8:	480e      	ldr	r0, [pc, #56]	; (d45f4 <_GLOBAL__sub_I_Blynk+0x70>)
   d45ba:	601d      	str	r5, [r3, #0]
   d45bc:	605c      	str	r4, [r3, #4]
   d45be:	609c      	str	r4, [r3, #8]
   d45c0:	60dc      	str	r4, [r3, #12]
   d45c2:	611c      	str	r4, [r3, #16]
   d45c4:	615c      	str	r4, [r3, #20]
   d45c6:	831c      	strh	r4, [r3, #24]
   d45c8:	769c      	strb	r4, [r3, #26]
   d45ca:	2111      	movs	r1, #17
   d45cc:	f000 fc8e 	bl	d4eec <_ZN16AirQualitySensorC1Ei>
Adafruit_BME280 bme;
   d45d0:	4809      	ldr	r0, [pc, #36]	; (d45f8 <_GLOBAL__sub_I_Blynk+0x74>)
   SeeedOled.setTextXY(5, 0);
   SeeedOled.putString("Dust: ");
   SeeedOled.putNumber(concentration); // Cast our float to an int to make it more compact
   SeeedOled.putString(" pcs/L");
 }
}
   d45d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#define DUST_SENSOR_PIN D4
#define SENSOR_READING_INTERVAL 900000
#define AQS_PIN A2

AirQualitySensor aqSensor(AQS_PIN);
Adafruit_BME280 bme;
   d45d6:	f000 b83d 	b.w	d4654 <_ZN15Adafruit_BME280C1Ev>
   d45da:	bf00      	nop
   d45dc:	2003e360 	.word	0x2003e360
   d45e0:	2003e320 	.word	0x2003e320
   d45e4:	2003e31c 	.word	0x2003e31c
   d45e8:	2003e1cc 	.word	0x2003e1cc
   d45ec:	000d40f9 	.word	0x000d40f9
   d45f0:	2003e364 	.word	0x2003e364
   d45f4:	2003e38c 	.word	0x2003e38c
   d45f8:	2003e2d8 	.word	0x2003e2d8

000d45fc <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d45fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d45fe:	4602      	mov	r2, r0
   d4600:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4602:	7913      	ldrb	r3, [r2, #4]
   d4604:	6895      	ldr	r5, [r2, #8]
   d4606:	b133      	cbz	r3, d4616 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4608:	b93d      	cbnz	r5, d461a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d460a:	490c      	ldr	r1, [pc, #48]	; (d463c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d460c:	b004      	add	sp, #16
   d460e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4612:	f001 be59 	b.w	d62c8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4616:	4b0a      	ldr	r3, [pc, #40]	; (d4640 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4618:	e000      	b.n	d461c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d461a:	4b0a      	ldr	r3, [pc, #40]	; (d4644 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d461c:	7b16      	ldrb	r6, [r2, #12]
   d461e:	4c0a      	ldr	r4, [pc, #40]	; (d4648 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4620:	490a      	ldr	r1, [pc, #40]	; (d464c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4622:	7b52      	ldrb	r2, [r2, #13]
   d4624:	9202      	str	r2, [sp, #8]
   d4626:	2e01      	cmp	r6, #1
   d4628:	bf08      	it	eq
   d462a:	4621      	moveq	r1, r4
   d462c:	9101      	str	r1, [sp, #4]
   d462e:	9500      	str	r5, [sp, #0]
   d4630:	4a07      	ldr	r2, [pc, #28]	; (d4650 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4632:	2100      	movs	r1, #0
   d4634:	f001 fe94 	bl	d6360 <_ZN5Print11printf_implEbPKcz>
  }
   d4638:	b004      	add	sp, #16
   d463a:	bd70      	pop	{r4, r5, r6, pc}
   d463c:	000d82d5 	.word	0x000d82d5
   d4640:	000d86ae 	.word	0x000d86ae
   d4644:	000d82c4 	.word	0x000d82c4
   d4648:	000d82cd 	.word	0x000d82cd
   d464c:	000d82d1 	.word	0x000d82d1
   d4650:	000d82eb 	.word	0x000d82eb

000d4654 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4654:	22ff      	movs	r2, #255	; 0xff
   d4656:	7402      	strb	r2, [r0, #16]
   d4658:	7442      	strb	r2, [r0, #17]
   d465a:	7482      	strb	r2, [r0, #18]
   d465c:	74c2      	strb	r2, [r0, #19]
{ }
   d465e:	4770      	bx	lr

000d4660 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4664:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4668:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d466a:	4605      	mov	r5, r0
   d466c:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d466e:	d104      	bne.n	d467a <_ZN15Adafruit_BME2807spixferEh+0x1a>
        return SPI.transfer(x);
   d4670:	4816      	ldr	r0, [pc, #88]	; (d46cc <_ZN15Adafruit_BME2807spixferEh+0x6c>)
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
   d4676:	f001 bf6b 	b.w	d6550 <_ZN8SPIClass8transferEh>
   d467a:	2607      	movs	r6, #7
   d467c:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d467e:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4682:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4686:	2100      	movs	r1, #0
   d4688:	b280      	uxth	r0, r0
   d468a:	f002 fc30 	bl	d6eee <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d468e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4692:	fa08 f106 	lsl.w	r1, r8, r6
   d4696:	4039      	ands	r1, r7
   d4698:	b280      	uxth	r0, r0
   d469a:	f002 fc28 	bl	d6eee <digitalWrite>
        digitalWrite(_sck, HIGH);
   d469e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d46a2:	2101      	movs	r1, #1
   d46a4:	b280      	uxth	r0, r0
   d46a6:	f002 fc22 	bl	d6eee <digitalWrite>
        if (digitalRead(_miso))
   d46aa:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d46ae:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d46b0:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d46b2:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d46b4:	f002 fc34 	bl	d6f20 <digitalRead>
   d46b8:	b108      	cbz	r0, d46be <_ZN15Adafruit_BME2807spixferEh+0x5e>
            reply |= 1;
   d46ba:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d46be:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   d46c2:	d2de      	bcs.n	d4682 <_ZN15Adafruit_BME2807spixferEh+0x22>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d46c4:	4620      	mov	r0, r4
   d46c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46ca:	bf00      	nop
   d46cc:	2003e730 	.word	0x2003e730

000d46d0 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d46d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d46d2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d46d6:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d46d8:	4604      	mov	r4, r0
   d46da:	460e      	mov	r6, r1
   d46dc:	4615      	mov	r5, r2
    if (_cs == -1) {
   d46de:	d111      	bne.n	d4704 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d46e0:	7901      	ldrb	r1, [r0, #4]
   d46e2:	6800      	ldr	r0, [r0, #0]
   d46e4:	f001 fbd2 	bl	d5e8c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d46e8:	6820      	ldr	r0, [r4, #0]
   d46ea:	6803      	ldr	r3, [r0, #0]
   d46ec:	4631      	mov	r1, r6
   d46ee:	689b      	ldr	r3, [r3, #8]
   d46f0:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d46f2:	6820      	ldr	r0, [r4, #0]
   d46f4:	6803      	ldr	r3, [r0, #0]
   d46f6:	4629      	mov	r1, r5
   d46f8:	689b      	ldr	r3, [r3, #8]
   d46fa:	4798      	blx	r3
        _wire -> endTransmission();
   d46fc:	6820      	ldr	r0, [r4, #0]
   d46fe:	f001 fbd0 	bl	d5ea2 <_ZN7TwoWire15endTransmissionEv>
   d4702:	e02f      	b.n	d4764 <_ZN15Adafruit_BME2806write8Ehh+0x94>
    } else {
        if (_sck == -1)
   d4704:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4708:	3301      	adds	r3, #1
   d470a:	d10f      	bne.n	d472c <_ZN15Adafruit_BME2806write8Ehh+0x5c>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d470c:	4b16      	ldr	r3, [pc, #88]	; (d4768 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d470e:	4a17      	ldr	r2, [pc, #92]	; (d476c <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d4710:	9300      	str	r3, [sp, #0]
   d4712:	9202      	str	r2, [sp, #8]
   d4714:	2300      	movs	r3, #0
   d4716:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4718:	4669      	mov	r1, sp
   d471a:	4815      	ldr	r0, [pc, #84]	; (d4770 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   d471c:	f88d 3004 	strb.w	r3, [sp, #4]
   d4720:	f88d 200c 	strb.w	r2, [sp, #12]
   d4724:	f88d 300d 	strb.w	r3, [sp, #13]
   d4728:	f001 fea2 	bl	d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d472c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4730:	2100      	movs	r1, #0
   d4732:	b280      	uxth	r0, r0
   d4734:	f002 fbdb 	bl	d6eee <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4738:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d473c:	4620      	mov	r0, r4
   d473e:	f7ff ff8f 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4742:	4629      	mov	r1, r5
   d4744:	4620      	mov	r0, r4
   d4746:	f7ff ff8b 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d474a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d474e:	2101      	movs	r1, #1
   d4750:	b280      	uxth	r0, r0
   d4752:	f002 fbcc 	bl	d6eee <digitalWrite>
    if (_sck == -1)
   d4756:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d475a:	3301      	adds	r3, #1
   d475c:	d102      	bne.n	d4764 <_ZN15Adafruit_BME2806write8Ehh+0x94>
        SPI.endTransaction(); // release the SPI bus
   d475e:	4804      	ldr	r0, [pc, #16]	; (d4770 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   d4760:	f001 fe6d 	bl	d643e <_ZN8SPIClass14endTransactionEv>
    }
}
   d4764:	b004      	add	sp, #16
   d4766:	bd70      	pop	{r4, r5, r6, pc}
   d4768:	000d82c0 	.word	0x000d82c0
   d476c:	0007a120 	.word	0x0007a120
   d4770:	2003e730 	.word	0x2003e730

000d4774 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4776:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d477a:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d477e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4782:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4786:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d478a:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d478e:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4792:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4796:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d479a:	f366 1347 	bfi	r3, r6, #5, #3
   d479e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d47a2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d47a6:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d47aa:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d47ac:	f367 0302 	bfi	r3, r7, #0, #3
   d47b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d47b4:	f006 0207 	and.w	r2, r6, #7
   d47b8:	21f2      	movs	r1, #242	; 0xf2
   d47ba:	f7ff ff89 	bl	d46d0 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d47be:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d47c2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d47c6:	f002 0107 	and.w	r1, r2, #7
   d47ca:	009b      	lsls	r3, r3, #2
   d47cc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47d0:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d47d4:	4620      	mov	r0, r4
   d47d6:	21f5      	movs	r1, #245	; 0xf5
   d47d8:	f7ff ff7a 	bl	d46d0 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d47dc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d47e0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d47e4:	f002 0107 	and.w	r1, r2, #7
   d47e8:	009b      	lsls	r3, r3, #2
   d47ea:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47ee:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d47f2:	4620      	mov	r0, r4
   d47f4:	21f4      	movs	r1, #244	; 0xf4
}
   d47f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d47fa:	f7ff bf69 	b.w	d46d0 <_ZN15Adafruit_BME2806write8Ehh>
	...

000d4800 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4800:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4802:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4806:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4808:	b085      	sub	sp, #20
   d480a:	4604      	mov	r4, r0
   d480c:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d480e:	d116      	bne.n	d483e <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4810:	7901      	ldrb	r1, [r0, #4]
   d4812:	6800      	ldr	r0, [r0, #0]
   d4814:	f001 fb3a 	bl	d5e8c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4818:	6820      	ldr	r0, [r4, #0]
   d481a:	6803      	ldr	r3, [r0, #0]
   d481c:	4629      	mov	r1, r5
   d481e:	689b      	ldr	r3, [r3, #8]
   d4820:	4798      	blx	r3
        _wire -> endTransmission();
   d4822:	6820      	ldr	r0, [r4, #0]
   d4824:	f001 fb3d 	bl	d5ea2 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4828:	2201      	movs	r2, #1
   d482a:	7921      	ldrb	r1, [r4, #4]
   d482c:	6820      	ldr	r0, [r4, #0]
   d482e:	f001 fb2a 	bl	d5e86 <_ZN7TwoWire11requestFromEhh>
        value = _wire -> read();
   d4832:	6820      	ldr	r0, [r4, #0]
   d4834:	6803      	ldr	r3, [r0, #0]
   d4836:	695b      	ldr	r3, [r3, #20]
   d4838:	4798      	blx	r3
   d483a:	b2c5      	uxtb	r5, r0
   d483c:	e030      	b.n	d48a0 <_ZN15Adafruit_BME2805read8Eh+0xa0>
    } else {
        if (_sck == -1)
   d483e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4842:	3301      	adds	r3, #1
   d4844:	d10f      	bne.n	d4866 <_ZN15Adafruit_BME2805read8Eh+0x66>
   d4846:	4b18      	ldr	r3, [pc, #96]	; (d48a8 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4848:	4a18      	ldr	r2, [pc, #96]	; (d48ac <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d484a:	9300      	str	r3, [sp, #0]
   d484c:	9202      	str	r2, [sp, #8]
   d484e:	2300      	movs	r3, #0
   d4850:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4852:	4669      	mov	r1, sp
   d4854:	4816      	ldr	r0, [pc, #88]	; (d48b0 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
   d4856:	f88d 3004 	strb.w	r3, [sp, #4]
   d485a:	f88d 200c 	strb.w	r2, [sp, #12]
   d485e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4862:	f001 fe05 	bl	d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4866:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d486a:	2100      	movs	r1, #0
   d486c:	b280      	uxth	r0, r0
   d486e:	f002 fb3e 	bl	d6eee <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4872:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff fef2 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d487c:	2100      	movs	r1, #0
   d487e:	4620      	mov	r0, r4
   d4880:	f7ff feee 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
   d4884:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4886:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d488a:	2101      	movs	r1, #1
   d488c:	b280      	uxth	r0, r0
   d488e:	f002 fb2e 	bl	d6eee <digitalWrite>
        if (_sck == -1)
   d4892:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4896:	3301      	adds	r3, #1
   d4898:	d102      	bne.n	d48a0 <_ZN15Adafruit_BME2805read8Eh+0xa0>
            SPI.endTransaction(); // release the SPI bus
   d489a:	4805      	ldr	r0, [pc, #20]	; (d48b0 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
   d489c:	f001 fdcf 	bl	d643e <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
   d48a0:	4628      	mov	r0, r5
   d48a2:	b005      	add	sp, #20
   d48a4:	bd30      	pop	{r4, r5, pc}
   d48a6:	bf00      	nop
   d48a8:	000d82c0 	.word	0x000d82c0
   d48ac:	0007a120 	.word	0x0007a120
   d48b0:	2003e730 	.word	0x2003e730

000d48b4 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d48b4:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d48b6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d48ba:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d48bc:	b085      	sub	sp, #20
   d48be:	4604      	mov	r4, r0
   d48c0:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d48c2:	d11d      	bne.n	d4900 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d48c4:	7901      	ldrb	r1, [r0, #4]
   d48c6:	6800      	ldr	r0, [r0, #0]
   d48c8:	f001 fae0 	bl	d5e8c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d48cc:	6820      	ldr	r0, [r4, #0]
   d48ce:	6803      	ldr	r3, [r0, #0]
   d48d0:	4629      	mov	r1, r5
   d48d2:	689b      	ldr	r3, [r3, #8]
   d48d4:	4798      	blx	r3
        _wire -> endTransmission();
   d48d6:	6820      	ldr	r0, [r4, #0]
   d48d8:	f001 fae3 	bl	d5ea2 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d48dc:	2202      	movs	r2, #2
   d48de:	7921      	ldrb	r1, [r4, #4]
   d48e0:	6820      	ldr	r0, [r4, #0]
   d48e2:	f001 fad0 	bl	d5e86 <_ZN7TwoWire11requestFromEhh>
        value = (_wire -> read() << 8) | _wire -> read();
   d48e6:	6820      	ldr	r0, [r4, #0]
   d48e8:	6803      	ldr	r3, [r0, #0]
   d48ea:	695b      	ldr	r3, [r3, #20]
   d48ec:	4798      	blx	r3
   d48ee:	4605      	mov	r5, r0
   d48f0:	6820      	ldr	r0, [r4, #0]
   d48f2:	6803      	ldr	r3, [r0, #0]
   d48f4:	695b      	ldr	r3, [r3, #20]
   d48f6:	4798      	blx	r3
   d48f8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d48fc:	b285      	uxth	r5, r0
   d48fe:	e037      	b.n	d4970 <_ZN15Adafruit_BME2806read16Eh+0xbc>
    } else {
        if (_sck == -1)
   d4900:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4904:	3301      	adds	r3, #1
   d4906:	d10f      	bne.n	d4928 <_ZN15Adafruit_BME2806read16Eh+0x74>
   d4908:	4b1b      	ldr	r3, [pc, #108]	; (d4978 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d490a:	4a1c      	ldr	r2, [pc, #112]	; (d497c <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d490c:	9300      	str	r3, [sp, #0]
   d490e:	9202      	str	r2, [sp, #8]
   d4910:	2300      	movs	r3, #0
   d4912:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4914:	4669      	mov	r1, sp
   d4916:	481a      	ldr	r0, [pc, #104]	; (d4980 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d4918:	f88d 3004 	strb.w	r3, [sp, #4]
   d491c:	f88d 200c 	strb.w	r2, [sp, #12]
   d4920:	f88d 300d 	strb.w	r3, [sp, #13]
   d4924:	f001 fda4 	bl	d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4928:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d492c:	2100      	movs	r1, #0
   d492e:	b280      	uxth	r0, r0
   d4930:	f002 fadd 	bl	d6eee <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4934:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4938:	4620      	mov	r0, r4
   d493a:	f7ff fe91 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d493e:	2100      	movs	r1, #0
   d4940:	4620      	mov	r0, r4
   d4942:	f7ff fe8d 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
   d4946:	2100      	movs	r1, #0
   d4948:	4605      	mov	r5, r0
   d494a:	4620      	mov	r0, r4
   d494c:	f7ff fe88 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
   d4950:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4954:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4956:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d495a:	2101      	movs	r1, #1
   d495c:	b280      	uxth	r0, r0
   d495e:	f002 fac6 	bl	d6eee <digitalWrite>
        if (_sck == -1)
   d4962:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4966:	3301      	adds	r3, #1
   d4968:	d102      	bne.n	d4970 <_ZN15Adafruit_BME2806read16Eh+0xbc>
            SPI.endTransaction(); // release the SPI bus
   d496a:	4805      	ldr	r0, [pc, #20]	; (d4980 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d496c:	f001 fd67 	bl	d643e <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d4970:	4628      	mov	r0, r5
   d4972:	b005      	add	sp, #20
   d4974:	bd30      	pop	{r4, r5, pc}
   d4976:	bf00      	nop
   d4978:	000d82c0 	.word	0x000d82c0
   d497c:	0007a120 	.word	0x0007a120
   d4980:	2003e730 	.word	0x2003e730

000d4984 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4984:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4986:	f7ff ff95 	bl	d48b4 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d498a:	ba40      	rev16	r0, r0
}
   d498c:	b280      	uxth	r0, r0
   d498e:	bd08      	pop	{r3, pc}

000d4990 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4990:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4992:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4996:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4998:	b085      	sub	sp, #20
   d499a:	4604      	mov	r4, r0
   d499c:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d499e:	d121      	bne.n	d49e4 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d49a0:	7901      	ldrb	r1, [r0, #4]
   d49a2:	6800      	ldr	r0, [r0, #0]
   d49a4:	f001 fa72 	bl	d5e8c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d49a8:	6820      	ldr	r0, [r4, #0]
   d49aa:	6803      	ldr	r3, [r0, #0]
   d49ac:	4629      	mov	r1, r5
   d49ae:	689b      	ldr	r3, [r3, #8]
   d49b0:	4798      	blx	r3
        _wire -> endTransmission();
   d49b2:	6820      	ldr	r0, [r4, #0]
   d49b4:	f001 fa75 	bl	d5ea2 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d49b8:	2203      	movs	r2, #3
   d49ba:	7921      	ldrb	r1, [r4, #4]
   d49bc:	6820      	ldr	r0, [r4, #0]
   d49be:	f001 fa62 	bl	d5e86 <_ZN7TwoWire11requestFromEhh>

        value = _wire -> read();
   d49c2:	6820      	ldr	r0, [r4, #0]
   d49c4:	6803      	ldr	r3, [r0, #0]
   d49c6:	695b      	ldr	r3, [r3, #20]
   d49c8:	4798      	blx	r3
        value <<= 8;
   d49ca:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d49cc:	6820      	ldr	r0, [r4, #0]
   d49ce:	6803      	ldr	r3, [r0, #0]
   d49d0:	695b      	ldr	r3, [r3, #20]
   d49d2:	4798      	blx	r3
   d49d4:	4328      	orrs	r0, r5
        value <<= 8;
   d49d6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d49d8:	6820      	ldr	r0, [r4, #0]
   d49da:	6803      	ldr	r3, [r0, #0]
   d49dc:	695b      	ldr	r3, [r3, #20]
   d49de:	4798      	blx	r3
   d49e0:	4305      	orrs	r5, r0
   d49e2:	e03b      	b.n	d4a5c <_ZN15Adafruit_BME2806read24Eh+0xcc>
    } else {
        if (_sck == -1)
   d49e4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d49e8:	3301      	adds	r3, #1
   d49ea:	d10f      	bne.n	d4a0c <_ZN15Adafruit_BME2806read24Eh+0x7c>
   d49ec:	4b1d      	ldr	r3, [pc, #116]	; (d4a64 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d49ee:	4a1e      	ldr	r2, [pc, #120]	; (d4a68 <_ZN15Adafruit_BME2806read24Eh+0xd8>)
   d49f0:	9300      	str	r3, [sp, #0]
   d49f2:	9202      	str	r2, [sp, #8]
   d49f4:	2300      	movs	r3, #0
   d49f6:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d49f8:	4669      	mov	r1, sp
   d49fa:	481c      	ldr	r0, [pc, #112]	; (d4a6c <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d49fc:	f88d 3004 	strb.w	r3, [sp, #4]
   d4a00:	f88d 200c 	strb.w	r2, [sp, #12]
   d4a04:	f88d 300d 	strb.w	r3, [sp, #13]
   d4a08:	f001 fd32 	bl	d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4a0c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a10:	2100      	movs	r1, #0
   d4a12:	b280      	uxth	r0, r0
   d4a14:	f002 fa6b 	bl	d6eee <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4a18:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4a1c:	4620      	mov	r0, r4
   d4a1e:	f7ff fe1f 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4a22:	2100      	movs	r1, #0
   d4a24:	4620      	mov	r0, r4
   d4a26:	f7ff fe1b 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4a2a:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4a2c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4a2e:	4620      	mov	r0, r4
   d4a30:	f7ff fe16 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
   d4a34:	4328      	orrs	r0, r5
        value <<= 8;
   d4a36:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4a38:	2100      	movs	r1, #0
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	f7ff fe10 	bl	d4660 <_ZN15Adafruit_BME2807spixferEh>
   d4a40:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4a42:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a46:	2101      	movs	r1, #1
   d4a48:	b280      	uxth	r0, r0
   d4a4a:	f002 fa50 	bl	d6eee <digitalWrite>
        if (_sck == -1)
   d4a4e:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4a52:	3301      	adds	r3, #1
   d4a54:	d102      	bne.n	d4a5c <_ZN15Adafruit_BME2806read24Eh+0xcc>
            SPI.endTransaction(); // release the SPI bus
   d4a56:	4805      	ldr	r0, [pc, #20]	; (d4a6c <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d4a58:	f001 fcf1 	bl	d643e <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d4a5c:	4628      	mov	r0, r5
   d4a5e:	b005      	add	sp, #20
   d4a60:	bd30      	pop	{r4, r5, pc}
   d4a62:	bf00      	nop
   d4a64:	000d82c0 	.word	0x000d82c0
   d4a68:	0007a120 	.word	0x0007a120
   d4a6c:	2003e730 	.word	0x2003e730

000d4a70 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4a70:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4a72:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4a74:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4a76:	f7ff ff85 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4a7a:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4a7c:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4a7e:	4620      	mov	r0, r4
   d4a80:	f7ff ff80 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
   d4a84:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4a86:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4a88:	4620      	mov	r0, r4
   d4a8a:	f7ff ff7b 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4a8e:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4a90:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4a92:	4620      	mov	r0, r4
   d4a94:	f7ff ff76 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4a98:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4a9a:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	f7ff ff71 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
   d4aa2:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4aa4:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4aa6:	4620      	mov	r0, r4
   d4aa8:	f7ff ff6c 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
   d4aac:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4aae:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	f7ff ff67 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ab6:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4ab8:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4aba:	4620      	mov	r0, r4
   d4abc:	f7ff ff62 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ac0:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4ac2:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f7ff ff5d 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
   d4aca:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4acc:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f7ff ff58 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ad4:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4ad6:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ad8:	4620      	mov	r0, r4
   d4ada:	f7ff ff53 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ade:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4ae0:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	f7ff ff4e 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4ae8:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4aea:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4aec:	4620      	mov	r0, r4
   d4aee:	f7ff fe87 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4af2:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4af4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4af8:	4620      	mov	r0, r4
   d4afa:	f7ff ff43 	bl	d4984 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4afe:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4b00:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4b02:	4620      	mov	r0, r4
   d4b04:	f7ff fe7c 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4b08:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4b0a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4b0e:	4620      	mov	r0, r4
   d4b10:	f7ff fe76 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>
   d4b14:	21e5      	movs	r1, #229	; 0xe5
   d4b16:	4605      	mov	r5, r0
   d4b18:	4620      	mov	r0, r4
   d4b1a:	f7ff fe71 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>
   d4b1e:	f000 000f 	and.w	r0, r0, #15
   d4b22:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4b26:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4b28:	21e6      	movs	r1, #230	; 0xe6
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	f7ff fe68 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>
   d4b30:	21e5      	movs	r1, #229	; 0xe5
   d4b32:	4605      	mov	r5, r0
   d4b34:	4620      	mov	r0, r4
   d4b36:	f7ff fe63 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>
   d4b3a:	1100      	asrs	r0, r0, #4
   d4b3c:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4b40:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4b42:	21e7      	movs	r1, #231	; 0xe7
   d4b44:	4620      	mov	r0, r4
   d4b46:	f7ff fe5b 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>
   d4b4a:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4b4e:	bd38      	pop	{r3, r4, r5, pc}

000d4b50 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4b50:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4b52:	21f3      	movs	r1, #243	; 0xf3
   d4b54:	f7ff fe54 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4b58:	f000 0001 	and.w	r0, r0, #1
   d4b5c:	bd08      	pop	{r3, pc}
	...

000d4b60 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4b60:	b530      	push	{r4, r5, lr}
   d4b62:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4b64:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4b68:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4b6a:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4b6c:	d103      	bne.n	d4b76 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4b6e:	6820      	ldr	r0, [r4, #0]
   d4b70:	f001 f97a 	bl	d5e68 <_ZN7TwoWire5beginEv>
   d4b74:	e021      	b.n	d4bba <_ZN15Adafruit_BME2804initEv+0x5a>
    } else {
        digitalWrite(_cs, HIGH);
   d4b76:	2101      	movs	r1, #1
   d4b78:	b280      	uxth	r0, r0
   d4b7a:	f002 f9b8 	bl	d6eee <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4b7e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4b82:	2101      	movs	r1, #1
   d4b84:	b280      	uxth	r0, r0
   d4b86:	f002 f9a1 	bl	d6ecc <pinMode>
        if (_sck == -1) {
   d4b8a:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4b8e:	1c43      	adds	r3, r0, #1
   d4b90:	d103      	bne.n	d4b9a <_ZN15Adafruit_BME2804initEv+0x3a>
            // hardware SPI
            SPI.begin();
   d4b92:	481f      	ldr	r0, [pc, #124]	; (d4c10 <_ZN15Adafruit_BME2804initEv+0xb0>)
   d4b94:	f001 fc4e 	bl	d6434 <_ZN8SPIClass5beginEv>
   d4b98:	e00f      	b.n	d4bba <_ZN15Adafruit_BME2804initEv+0x5a>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4b9a:	2101      	movs	r1, #1
   d4b9c:	b280      	uxth	r0, r0
   d4b9e:	f002 f995 	bl	d6ecc <pinMode>
            pinMode(_mosi, OUTPUT);
   d4ba2:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4ba6:	2101      	movs	r1, #1
   d4ba8:	b280      	uxth	r0, r0
   d4baa:	f002 f98f 	bl	d6ecc <pinMode>
            pinMode(_miso, INPUT);
   d4bae:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4bb2:	2100      	movs	r1, #0
   d4bb4:	b280      	uxth	r0, r0
   d4bb6:	f002 f989 	bl	d6ecc <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4bba:	21d0      	movs	r1, #208	; 0xd0
   d4bbc:	4620      	mov	r0, r4
   d4bbe:	f7ff fe1f 	bl	d4800 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4bc2:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4bc4:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4bc6:	d120      	bne.n	d4c0a <_ZN15Adafruit_BME2804initEv+0xaa>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4bc8:	4620      	mov	r0, r4
   d4bca:	22b6      	movs	r2, #182	; 0xb6
   d4bcc:	21e0      	movs	r1, #224	; 0xe0
   d4bce:	f7ff fd7f 	bl	d46d0 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4bd2:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4bd6:	f000 fdad 	bl	d5734 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4bda:	4620      	mov	r0, r4
   d4bdc:	f7ff ffb8 	bl	d4b50 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4be0:	4605      	mov	r5, r0
   d4be2:	b108      	cbz	r0, d4be8 <_ZN15Adafruit_BME2804initEv+0x88>
          delay(100);
   d4be4:	2064      	movs	r0, #100	; 0x64
   d4be6:	e7f6      	b.n	d4bd6 <_ZN15Adafruit_BME2804initEv+0x76>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4be8:	4620      	mov	r0, r4
   d4bea:	f7ff ff41 	bl	d4a70 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4bee:	2305      	movs	r3, #5
   d4bf0:	9300      	str	r3, [sp, #0]
   d4bf2:	461a      	mov	r2, r3
   d4bf4:	2103      	movs	r1, #3
   d4bf6:	4620      	mov	r0, r4
   d4bf8:	9502      	str	r5, [sp, #8]
   d4bfa:	9501      	str	r5, [sp, #4]
   d4bfc:	f7ff fdba 	bl	d4774 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4c00:	2064      	movs	r0, #100	; 0x64
   d4c02:	f000 fd97 	bl	d5734 <delay>

    return true;
   d4c06:	2001      	movs	r0, #1
   d4c08:	e000      	b.n	d4c0c <_ZN15Adafruit_BME2804initEv+0xac>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4c0a:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4c0c:	b005      	add	sp, #20
   d4c0e:	bd30      	pop	{r4, r5, pc}
   d4c10:	2003e730 	.word	0x2003e730

000d4c14 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4c14:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4c16:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4c18:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4c1a:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d4c1c:	f002 f9ac 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d4c20:	6020      	str	r0, [r4, #0]
	status = init();
   d4c22:	4620      	mov	r0, r4
   d4c24:	f7ff ff9c 	bl	d4b60 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d4c28:	b930      	cbnz	r0, d4c38 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d4c2a:	2376      	movs	r3, #118	; 0x76
   d4c2c:	7123      	strb	r3, [r4, #4]
 		status = init();
   d4c2e:	4620      	mov	r0, r4
 		}
	return status;
}
   d4c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d4c34:	f7ff bf94 	b.w	d4b60 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d4c38:	bd10      	pop	{r4, pc}
	...

000d4c3c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4c3c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4c3e:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4c40:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4c42:	f7ff fea5 	bl	d4990 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4c46:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4c4a:	d01e      	beq.n	d4c8a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c4c:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4c4e:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4c90 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4c52:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4c56:	0052      	lsls	r2, r2, #1
   d4c58:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4c5c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4c60:	435b      	muls	r3, r3
   d4c62:	4350      	muls	r0, r2
   d4c64:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4c68:	131b      	asrs	r3, r3, #12
   d4c6a:	4353      	muls	r3, r2
   d4c6c:	139b      	asrs	r3, r3, #14
   d4c6e:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4c72:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4c78:	3080      	adds	r0, #128	; 0x80
   d4c7a:	1200      	asrs	r0, r0, #8
   d4c7c:	ee07 0a90 	vmov	s15, r0
   d4c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4c84:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4c88:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4c8a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4c94 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4c8e:	bd10      	pop	{r4, pc}
   d4c90:	42c80000 	.word	0x42c80000
   d4c94:	7fc00000 	.word	0x7fc00000

000d4c98 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c9c:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4c9e:	f7ff ffcd 	bl	d4c3c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4ca2:	21f7      	movs	r1, #247	; 0xf7
   d4ca4:	4630      	mov	r0, r6
   d4ca6:	f7ff fe73 	bl	d4990 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4caa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4cae:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4cb0:	f000 80c1 	beq.w	d4e36 <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4cb4:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4cb6:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4cba:	17e5      	asrs	r5, r4, #31
   d4cbc:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4cc0:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4cc4:	fba4 8904 	umull	r8, r9, r4, r4
   d4cc8:	fb04 f305 	mul.w	r3, r4, r5
   d4ccc:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4cd0:	fb02 f105 	mul.w	r1, r2, r5
   d4cd4:	17d3      	asrs	r3, r2, #31
   d4cd6:	fb04 1103 	mla	r1, r4, r3, r1
   d4cda:	fba2 2304 	umull	r2, r3, r2, r4
   d4cde:	440b      	add	r3, r1
   d4ce0:	0319      	lsls	r1, r3, #12
   d4ce2:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4ce6:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4ce8:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4cec:	17d3      	asrs	r3, r2, #31
   d4cee:	fb02 fe09 	mul.w	lr, r2, r9
   d4cf2:	fb08 ee03 	mla	lr, r8, r3, lr
   d4cf6:	fba2 2308 	umull	r2, r3, r2, r8
   d4cfa:	4473      	add	r3, lr
   d4cfc:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4d00:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4d04:	eb1a 0a00 	adds.w	sl, sl, r0
   d4d08:	8b72      	ldrh	r2, [r6, #26]
   d4d0a:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d4d0e:	eb4b 0b01 	adc.w	fp, fp, r1
   d4d12:	f11a 0000 	adds.w	r0, sl, #0
   d4d16:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4d1a:	fba0 ab02 	umull	sl, fp, r0, r2
   d4d1e:	fb02 bb01 	mla	fp, r2, r1, fp
   d4d22:	ea4f 026b 	mov.w	r2, fp, asr #1
   d4d26:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d4d2a:	ea52 0103 	orrs.w	r1, r2, r3
   d4d2e:	f000 8086 	beq.w	d4e3e <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4d32:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d4d36:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4d3a:	fb0a f109 	mul.w	r1, sl, r9
   d4d3e:	fb08 110b 	mla	r1, r8, fp, r1
   d4d42:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d46:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4d4a:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d4c:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4d50:	fb0a f105 	mul.w	r1, sl, r5
   d4d54:	fb04 110b 	mla	r1, r4, fp, r1
   d4d58:	fbaa 4504 	umull	r4, r5, sl, r4
   d4d5c:	440d      	add	r5, r1
   d4d5e:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d4d62:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4d66:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d68:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4d6c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d70:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4d74:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4d78:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4d7c:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4d80:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4d84:	07c4      	lsls	r4, r0, #31
   d4d86:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d4d8a:	f04f 0800 	mov.w	r8, #0
   d4d8e:	eb18 080a 	adds.w	r8, r8, sl
   d4d92:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4d96:	eb49 090b 	adc.w	r9, r9, fp
   d4d9a:	f640 4735 	movw	r7, #3125	; 0xc35
   d4d9e:	ebb4 0408 	subs.w	r4, r4, r8
   d4da2:	eb65 0509 	sbc.w	r5, r5, r9
   d4da6:	fba4 0107 	umull	r0, r1, r4, r7
   d4daa:	fb07 1105 	mla	r1, r7, r5, r1
   d4dae:	f002 ff9f 	bl	d7cf0 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4db2:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4db6:	134c      	asrs	r4, r1, #13
   d4db8:	0b45      	lsrs	r5, r0, #13
   d4dba:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4dbe:	fb02 f704 	mul.w	r7, r2, r4
   d4dc2:	17d3      	asrs	r3, r2, #31
   d4dc4:	fb05 7703 	mla	r7, r5, r3, r7
   d4dc8:	fba2 2305 	umull	r2, r3, r2, r5
   d4dcc:	443b      	add	r3, r7
   d4dce:	4354      	muls	r4, r2
   d4dd0:	fb05 4403 	mla	r4, r5, r3, r4
   d4dd4:	fba2 2305 	umull	r2, r3, r2, r5
   d4dd8:	4423      	add	r3, r4
   d4dda:	0e54      	lsrs	r4, r2, #25
   d4ddc:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d4de0:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4de4:	1824      	adds	r4, r4, r0
   d4de6:	ea4f 6563 	mov.w	r5, r3, asr #25
   d4dea:	414d      	adcs	r5, r1
   d4dec:	17d3      	asrs	r3, r2, #31
   d4dee:	4351      	muls	r1, r2
   d4df0:	fb00 1303 	mla	r3, r0, r3, r1
   d4df4:	fba2 0100 	umull	r0, r1, r2, r0
   d4df8:	4419      	add	r1, r3
   d4dfa:	0cc2      	lsrs	r2, r0, #19
   d4dfc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d4e00:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d4e02:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4e06:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d4e0a:	416b      	adcs	r3, r5
   d4e0c:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d4e0e:	17e5      	asrs	r5, r4, #31
   d4e10:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4e12:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4e16:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d4e18:	012b      	lsls	r3, r5, #4
   d4e1a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d4e1e:	1880      	adds	r0, r0, r2
   d4e20:	4159      	adcs	r1, r3
   d4e22:	f002 ff27 	bl	d7c74 <__aeabi_l2f>
   d4e26:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4e48 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4e2a:	ee07 0a90 	vmov	s15, r0
   d4e2e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4e32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d4e36:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4e4c <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d4e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d4e3e:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4e50 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d4e42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e46:	bf00      	nop
   d4e48:	3b800000 	.word	0x3b800000
   d4e4c:	7fc00000 	.word	0x7fc00000
   d4e50:	00000000 	.word	0x00000000

000d4e54 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4e54:	b510      	push	{r4, lr}
   d4e56:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4e58:	f7ff fef0 	bl	d4c3c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4e5c:	21fd      	movs	r1, #253	; 0xfd
   d4e5e:	4620      	mov	r0, r4
   d4e60:	f7ff fd28 	bl	d48b4 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4e64:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4e68:	d038      	beq.n	d4edc <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4e6a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4e6e:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4e70:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d4e74:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4e76:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4e7a:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d4e7e:	fb02 3311 	mls	r3, r2, r1, r3
   d4e82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4e86:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4e88:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4e8c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4e90:	4353      	muls	r3, r2
   d4e92:	12db      	asrs	r3, r3, #11
   d4e94:	4342      	muls	r2, r0
   d4e96:	1292      	asrs	r2, r2, #10
   d4e98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d4e9c:	4353      	muls	r3, r2
   d4e9e:	129b      	asrs	r3, r3, #10
   d4ea0:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d4ea4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d4ea8:	4353      	muls	r3, r2
   d4eaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4eae:	139b      	asrs	r3, r3, #14
   d4eb0:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4eb2:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4eb4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d4eb8:	4352      	muls	r2, r2
   d4eba:	11d2      	asrs	r2, r2, #7
   d4ebc:	434a      	muls	r2, r1
   d4ebe:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4ec2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d4ec6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4eca:	bfa8      	it	ge
   d4ecc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d4ed0:	131b      	asrs	r3, r3, #12
   d4ed2:	ee00 3a10 	vmov	s0, r3
   d4ed6:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d4eda:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d4edc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4ee4 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d4ee0:	bd10      	pop	{r4, pc}
   d4ee2:	bf00      	nop
   d4ee4:	7fc00000 	.word	0x7fc00000

000d4ee8 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4ee8:	f000 b9a8 	b.w	d523c <HAL_Pin_Map>

000d4eec <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d4eec:	2200      	movs	r2, #0
   d4eee:	6001      	str	r1, [r0, #0]
   d4ef0:	6102      	str	r2, [r0, #16]
   d4ef2:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d4ef4:	4770      	bx	lr

000d4ef6 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d4ef6:	b510      	push	{r4, lr}
   d4ef8:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d4efa:	8800      	ldrh	r0, [r0, #0]
   d4efc:	f002 f823 	bl	d6f46 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d4f00:	f240 3312 	movw	r3, #786	; 0x312
   d4f04:	f1a0 020b 	sub.w	r2, r0, #11
   d4f08:	429a      	cmp	r2, r3
   d4f0a:	d807      	bhi.n	d4f1c <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d4f0c:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d4f0e:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d4f10:	60e0      	str	r0, [r4, #12]
   d4f12:	f000 f98b 	bl	d522c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d4f16:	61a0      	str	r0, [r4, #24]

        return true;
   d4f18:	2001      	movs	r0, #1
   d4f1a:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d4f1c:	2000      	movs	r0, #0
    }
}
   d4f1e:	bd10      	pop	{r4, pc}

000d4f20 <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   d4f20:	6880      	ldr	r0, [r0, #8]
   d4f22:	4770      	bx	lr

000d4f24 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   d4f24:	b510      	push	{r4, lr}
   d4f26:	4604      	mov	r4, r0
   d4f28:	f000 f980 	bl	d522c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d4f2c:	69a3      	ldr	r3, [r4, #24]
   d4f2e:	1ac0      	subs	r0, r0, r3
   d4f30:	4b07      	ldr	r3, [pc, #28]	; (d4f50 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d4f32:	4298      	cmp	r0, r3
   d4f34:	d90a      	bls.n	d4f4c <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d4f36:	6923      	ldr	r3, [r4, #16]
   d4f38:	6962      	ldr	r2, [r4, #20]
   d4f3a:	fb93 f3f2 	sdiv	r3, r3, r2
   d4f3e:	60e3      	str	r3, [r4, #12]
   d4f40:	f000 f974 	bl	d522c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d4f44:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
   d4f46:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
   d4f48:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
   d4f4a:	6163      	str	r3, [r4, #20]
   d4f4c:	bd10      	pop	{r4, pc}
   d4f4e:	bf00      	nop
   d4f50:	0007a120 	.word	0x0007a120

000d4f54 <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d4f54:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d4f56:	6883      	ldr	r3, [r0, #8]
   d4f58:	6043      	str	r3, [r0, #4]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d4f5a:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d4f5c:	8800      	ldrh	r0, [r0, #0]
   d4f5e:	f001 fff2 	bl	d6f46 <analogRead>

    _voltageSum += _currentVoltage;
   d4f62:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d4f64:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
   d4f66:	4418      	add	r0, r3
    _volSumCount += 1;
   d4f68:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
   d4f6a:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d4f6c:	3301      	adds	r3, #1
   d4f6e:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
   d4f70:	4620      	mov	r0, r4
   d4f72:	f7ff ffd7 	bl	d4f24 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d4f76:	68a2      	ldr	r2, [r4, #8]
   d4f78:	6861      	ldr	r1, [r4, #4]
   d4f7a:	1a51      	subs	r1, r2, r1
   d4f7c:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d4f80:	dc10      	bgt.n	d4fa4 <_ZN16AirQualitySensor5slopeEv+0x50>
   d4f82:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d4f86:	dc0d      	bgt.n	d4fa4 <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
   d4f88:	68e3      	ldr	r3, [r4, #12]
   d4f8a:	1ad3      	subs	r3, r2, r3
   d4f8c:	2b96      	cmp	r3, #150	; 0x96
   d4f8e:	dc0b      	bgt.n	d4fa8 <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d4f90:	29c8      	cmp	r1, #200	; 0xc8
   d4f92:	dd02      	ble.n	d4f9a <_ZN16AirQualitySensor5slopeEv+0x46>
   d4f94:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d4f98:	d108      	bne.n	d4fac <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
   d4f9a:	2b32      	cmp	r3, #50	; 0x32
   d4f9c:	bfcc      	ite	gt
   d4f9e:	2002      	movgt	r0, #2
   d4fa0:	2003      	movle	r0, #3
   d4fa2:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
   d4fa4:	2000      	movs	r0, #0
   d4fa6:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
   d4fa8:	2001      	movs	r0, #1
   d4faa:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
   d4fac:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
   d4fae:	bd10      	pop	{r4, pc}

000d4fb0 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d4fb0:	f000 b944 	b.w	d523c <HAL_Pin_Map>

000d4fb4 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d4fb4:	f000 b942 	b.w	d523c <HAL_Pin_Map>

000d4fb8 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4fb8:	f000 b940 	b.w	d523c <HAL_Pin_Map>

000d4fbc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4fbc:	6803      	ldr	r3, [r0, #0]
   d4fbe:	b2c9      	uxtb	r1, r1
   d4fc0:	689b      	ldr	r3, [r3, #8]
   d4fc2:	4718      	bx	r3

000d4fc4 <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
   d4fc4:	b510      	push	{r4, lr}
   d4fc6:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4fc8:	f001 ffd6 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d4fcc:	213c      	movs	r1, #60	; 0x3c
   d4fce:	f000 ff61 	bl	d5e94 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d4fd2:	f001 ffd1 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d4fd6:	2180      	movs	r1, #128	; 0x80
   d4fd8:	f7ff fff0 	bl	d4fbc <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d4fdc:	f001 ffcc 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d4fe0:	6803      	ldr	r3, [r0, #0]
   d4fe2:	4621      	mov	r1, r4
   d4fe4:	689b      	ldr	r3, [r3, #8]
   d4fe6:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d4fe8:	f001 ffc6 	bl	d6f78 <_Z19__fetch_global_Wirev>
}
   d4fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
   d4ff0:	f000 bf57 	b.w	d5ea2 <_ZN7TwoWire15endTransmissionEv>

000d4ff4 <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d4ff4:	b510      	push	{r4, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4ff6:	21ae      	movs	r1, #174	; 0xae
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d4ff8:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4ffa:	f7ff ffe3 	bl	d4fc4 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d4ffe:	2005      	movs	r0, #5
   d5000:	f000 fb98 	bl	d5734 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d5004:	21af      	movs	r1, #175	; 0xaf
   d5006:	4620      	mov	r0, r4
   d5008:	f7ff ffdc 	bl	d4fc4 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d500c:	2005      	movs	r0, #5
   d500e:	f000 fb91 	bl	d5734 <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d5012:	4620      	mov	r0, r4
   d5014:	21a6      	movs	r1, #166	; 0xa6
}
   d5016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d501a:	f7ff bfd3 	b.w	d4fc4 <_ZN9SeeedOLED11sendCommandEh>

000d501e <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d501e:	b510      	push	{r4, lr}
  addressingMode = PAGE_MODE;
   d5020:	2301      	movs	r3, #1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d5022:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
   d5024:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d5026:	2120      	movs	r1, #32
   d5028:	f7ff ffcc 	bl	d4fc4 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
   d502c:	4620      	mov	r0, r4
   d502e:	2102      	movs	r1, #2
}
   d5030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
   d5034:	f7ff bfc6 	b.w	d4fc4 <_ZN9SeeedOLED11sendCommandEh>

000d5038 <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d5038:	b538      	push	{r3, r4, r5, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d503a:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d503c:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d503e:	b2c9      	uxtb	r1, r1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d5040:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
   d5042:	f7ff ffbf 	bl	d4fc4 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d5046:	00e1      	lsls	r1, r4, #3
   d5048:	4628      	mov	r0, r5
   d504a:	f001 0108 	and.w	r1, r1, #8
   d504e:	f7ff ffb9 	bl	d4fc4 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d5052:	f3c4 0143 	ubfx	r1, r4, #1, #4
   d5056:	4628      	mov	r0, r5
   d5058:	3110      	adds	r1, #16
}
   d505a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d505e:	f7ff bfb1 	b.w	d4fc4 <_ZN9SeeedOLED11sendCommandEh>

000d5062 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d5062:	b510      	push	{r4, lr}
   d5064:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d5066:	f001 ff87 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d506a:	213c      	movs	r1, #60	; 0x3c
   d506c:	f000 ff12 	bl	d5e94 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d5070:	f001 ff82 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d5074:	2140      	movs	r1, #64	; 0x40
   d5076:	f7ff ffa1 	bl	d4fbc <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d507a:	f001 ff7d 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d507e:	6803      	ldr	r3, [r0, #0]
   d5080:	4621      	mov	r1, r4
   d5082:	689b      	ldr	r3, [r3, #8]
   d5084:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d5086:	f001 ff77 	bl	d6f78 <_Z19__fetch_global_Wirev>
}
   d508a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
   d508e:	f000 bf08 	b.w	d5ea2 <_ZN7TwoWire15endTransmissionEv>
	...

000d5094 <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d5094:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d5098:	2b5f      	cmp	r3, #95	; 0x5f
   d509a:	4b0b      	ldr	r3, [pc, #44]	; (d50c8 <_ZN9SeeedOLED7putCharEh+0x34>)
   d509c:	bf88      	it	hi
   d509e:	2120      	movhi	r1, #32
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
}

void SeeedOLED::putChar(unsigned char C)
{
   d50a0:	b570      	push	{r4, r5, r6, lr}
   d50a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
   d50a6:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   d50aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d50ae:	4606      	mov	r6, r0
   d50b0:	4415      	add	r5, r2
   d50b2:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d50b6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d50ba:	4630      	mov	r0, r6
   d50bc:	f7ff ffd1 	bl	d5062 <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d50c0:	42a5      	cmp	r5, r4
   d50c2:	d1f8      	bne.n	d50b6 <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
   d50c4:	bd70      	pop	{r4, r5, r6, pc}
   d50c6:	bf00      	nop
   d50c8:	000d8309 	.word	0x000d8309

000d50cc <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d50cc:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d50ce:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d50d0:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d50d2:	f7ff ff77 	bl	d4fc4 <_ZN9SeeedOLED11sendCommandEh>
   d50d6:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
   d50d8:	2200      	movs	r2, #0
   d50da:	b2f1      	uxtb	r1, r6
   d50dc:	4628      	mov	r0, r5
   d50de:	f7ff ffab 	bl	d5038 <_ZN9SeeedOLED9setTextXYEhh>
   d50e2:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
   d50e4:	2120      	movs	r1, #32
   d50e6:	4628      	mov	r0, r5
   d50e8:	3c01      	subs	r4, #1
   d50ea:	f7ff ffd3 	bl	d5094 <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
   d50ee:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d50f2:	d1f7      	bne.n	d50e4 <_ZN9SeeedOLED12clearDisplayEv+0x18>
   d50f4:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
   d50f6:	2e08      	cmp	r6, #8
   d50f8:	d1ee      	bne.n	d50d8 <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d50fa:	4628      	mov	r0, r5
   d50fc:	21af      	movs	r1, #175	; 0xaf
   d50fe:	f7ff ff61 	bl	d4fc4 <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
   d5102:	4622      	mov	r2, r4
   d5104:	4621      	mov	r1, r4
   d5106:	4628      	mov	r0, r5
}
   d5108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
   d510c:	f7ff bf94 	b.w	d5038 <_ZN9SeeedOLED9setTextXYEhh>

000d5110 <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
   d5110:	b570      	push	{r4, r5, r6, lr}
   d5112:	4605      	mov	r5, r0
   d5114:	460e      	mov	r6, r1
   d5116:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d5118:	b2e3      	uxtb	r3, r4
   d511a:	3401      	adds	r4, #1
   d511c:	5cf1      	ldrb	r1, [r6, r3]
   d511e:	b119      	cbz	r1, d5128 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d5120:	4628      	mov	r0, r5
   d5122:	f7ff ffb7 	bl	d5094 <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
   d5126:	e7f7      	b.n	d5118 <_ZN9SeeedOLED9putStringEPKc+0x8>
   d5128:	bd70      	pop	{r4, r5, r6, pc}

000d512a <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d512a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d512c:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d512e:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d5130:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d5132:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	9302      	str	r3, [sp, #8]
   d5138:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d513c:	da07      	bge.n	d514e <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
   d513e:	212d      	movs	r1, #45	; 0x2d
   d5140:	f7ff ffa8 	bl	d5094 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d5144:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
   d5146:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
   d5148:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d514a:	210a      	movs	r1, #10
   d514c:	e005      	b.n	d515a <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
   d514e:	d1fb      	bne.n	d5148 <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
   d5150:	2130      	movs	r1, #48	; 0x30
   d5152:	f7ff ff9f 	bl	d5094 <_ZN9SeeedOLED7putCharEh>
    return f;
   d5156:	2001      	movs	r0, #1
   d5158:	e01d      	b.n	d5196 <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d515a:	aa04      	add	r2, sp, #16
   d515c:	1c65      	adds	r5, r4, #1
   d515e:	4414      	add	r4, r2
   d5160:	b2ed      	uxtb	r5, r5
   d5162:	fb96 f2f1 	sdiv	r2, r6, r1
   d5166:	fb01 6612 	mls	r6, r1, r2, r6
   d516a:	f804 6c0c 	strb.w	r6, [r4, #-12]
   d516e:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
   d5170:	4616      	mov	r6, r2
   d5172:	2a00      	cmp	r2, #0
   d5174:	d1f1      	bne.n	d515a <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
   d5176:	442b      	add	r3, r5
   d5178:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
   d517a:	b15d      	cbz	r5, d5194 <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
   d517c:	ab04      	add	r3, sp, #16
   d517e:	442b      	add	r3, r5
   d5180:	4638      	mov	r0, r7
   d5182:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
   d5186:	3130      	adds	r1, #48	; 0x30
   d5188:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d518a:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
   d518c:	f7ff ff82 	bl	d5094 <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d5190:	b2ed      	uxtb	r5, r5
   d5192:	e7f2      	b.n	d517a <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
   d5194:	4620      	mov	r0, r4
}
   d5196:	b005      	add	sp, #20
   d5198:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d519a <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d519a:	21a6      	movs	r1, #166	; 0xa6
   d519c:	f7ff bf12 	b.w	d4fc4 <_ZN9SeeedOLED11sendCommandEh>

000d51a0 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
   d51a0:	f000 b84c 	b.w	d523c <HAL_Pin_Map>

000d51a4 <_GLOBAL__sub_I__ZN11UbidotsMQTTC2EPcPFvS0_PhjE>:
   d51a4:	f000 b84a 	b.w	d523c <HAL_Pin_Map>

000d51a8 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d51a8:	f000 b848 	b.w	d523c <HAL_Pin_Map>

000d51ac <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <os_thread_is_current+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	689b      	ldr	r3, [r3, #8]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030248 	.word	0x00030248

000d51bc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <os_thread_join+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	691b      	ldr	r3, [r3, #16]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030248 	.word	0x00030248

000d51cc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <os_thread_cleanup+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	695b      	ldr	r3, [r3, #20]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030248 	.word	0x00030248

000d51dc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <os_mutex_create+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030248 	.word	0x00030248

000d51ec <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <os_mutex_lock+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030248 	.word	0x00030248

000d51fc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <os_mutex_unlock+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	00030248 	.word	0x00030248

000d520c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <os_mutex_recursive_create+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030248 	.word	0x00030248

000d521c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <HAL_RNG_GetRandomNumber+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	685b      	ldr	r3, [r3, #4]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030218 	.word	0x00030218

000d522c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	695b      	ldr	r3, [r3, #20]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030218 	.word	0x00030218

000d523c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <HAL_Pin_Map+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	681b      	ldr	r3, [r3, #0]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	0003022c 	.word	0x0003022c

000d524c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <HAL_Validate_Pin_Function+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	685b      	ldr	r3, [r3, #4]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	0003022c 	.word	0x0003022c

000d525c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <HAL_Pin_Mode+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	689b      	ldr	r3, [r3, #8]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	0003022c 	.word	0x0003022c

000d526c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <HAL_Get_Pin_Mode+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	68db      	ldr	r3, [r3, #12]
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	0003022c 	.word	0x0003022c

000d527c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <HAL_GPIO_Write+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	691b      	ldr	r3, [r3, #16]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	0003022c 	.word	0x0003022c

000d528c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <HAL_GPIO_Read+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	695b      	ldr	r3, [r3, #20]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	0003022c 	.word	0x0003022c

000d529c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <HAL_ADC_Read+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	0003022c 	.word	0x0003022c

000d52ac <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <HAL_Pulse_In+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	0003022c 	.word	0x0003022c

000d52bc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <HAL_I2C_Begin+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	68db      	ldr	r3, [r3, #12]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030228 	.word	0x00030228

000d52cc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <HAL_I2C_Request_Data+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	695b      	ldr	r3, [r3, #20]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030228 	.word	0x00030228

000d52dc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <HAL_I2C_Begin_Transmission+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	699b      	ldr	r3, [r3, #24]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030228 	.word	0x00030228

000d52ec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <HAL_I2C_End_Transmission+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	69db      	ldr	r3, [r3, #28]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030228 	.word	0x00030228

000d52fc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <HAL_I2C_Write_Data+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	6a1b      	ldr	r3, [r3, #32]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030228 	.word	0x00030228

000d530c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_I2C_Available_Data+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030228 	.word	0x00030228

000d531c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_I2C_Read_Data+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030228 	.word	0x00030228

000d532c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <HAL_I2C_Peek_Data+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030228 	.word	0x00030228

000d533c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <HAL_I2C_Flush_Data+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030228 	.word	0x00030228

000d534c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <HAL_I2C_Is_Enabled+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030228 	.word	0x00030228

000d535c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <HAL_I2C_Init+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030228 	.word	0x00030228

000d536c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <if_index_to_name+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	695b      	ldr	r3, [r3, #20]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	0003026c 	.word	0x0003026c

000d537c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <inet_inet_ntop+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	695b      	ldr	r3, [r3, #20]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030264 	.word	0x00030264

000d538c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <inet_htonl+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	6a1b      	ldr	r3, [r3, #32]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030264 	.word	0x00030264

000d539c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <inet_htons+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030264 	.word	0x00030264

000d53ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <netdb_freeaddrinfo+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	689b      	ldr	r3, [r3, #8]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030268 	.word	0x00030268

000d53bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <netdb_getaddrinfo+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	68db      	ldr	r3, [r3, #12]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030268 	.word	0x00030268

000d53cc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <sock_setsockopt+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	699b      	ldr	r3, [r3, #24]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030238 	.word	0x00030238

000d53dc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <sock_close+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	69db      	ldr	r3, [r3, #28]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030238 	.word	0x00030238

000d53ec <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <sock_connect+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	6a1b      	ldr	r3, [r3, #32]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030238 	.word	0x00030238

000d53fc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <sock_recv+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030238 	.word	0x00030238

000d540c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <sock_send+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030238 	.word	0x00030238

000d541c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <sock_socket+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030238 	.word	0x00030238

000d542c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <HAL_SPI_Begin+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	681b      	ldr	r3, [r3, #0]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030230 	.word	0x00030230

000d543c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <HAL_SPI_Send_Receive_Data+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	695b      	ldr	r3, [r3, #20]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030230 	.word	0x00030230

000d544c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <HAL_SPI_Init+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	69db      	ldr	r3, [r3, #28]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030230 	.word	0x00030230

000d545c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <HAL_SPI_Is_Enabled+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	6a1b      	ldr	r3, [r3, #32]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030230 	.word	0x00030230

000d546c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <HAL_SPI_Info+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030230 	.word	0x00030230

000d547c <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <HAL_SPI_Set_Settings+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030230 	.word	0x00030230

000d548c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <HAL_USART_Init+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	681b      	ldr	r3, [r3, #0]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	0003023c 	.word	0x0003023c

000d549c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <HAL_USART_Write_Data+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	68db      	ldr	r3, [r3, #12]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003023c 	.word	0x0003023c

000d54ac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <HAL_USART_Available_Data+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	691b      	ldr	r3, [r3, #16]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003023c 	.word	0x0003023c

000d54bc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <HAL_USART_Read_Data+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	695b      	ldr	r3, [r3, #20]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003023c 	.word	0x0003023c

000d54cc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <HAL_USART_Peek_Data+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	699b      	ldr	r3, [r3, #24]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003023c 	.word	0x0003023c

000d54dc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <HAL_USART_Flush_Data+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	69db      	ldr	r3, [r3, #28]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003023c 	.word	0x0003023c

000d54ec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <HAL_USART_Is_Enabled+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	6a1b      	ldr	r3, [r3, #32]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003023c 	.word	0x0003023c

000d54fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <HAL_USART_Available_Data_For_Write+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003023c 	.word	0x0003023c

000d550c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <HAL_USB_USART_Init+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	681b      	ldr	r3, [r3, #0]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003024c 	.word	0x0003024c

000d551c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <HAL_USB_USART_Begin+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	685b      	ldr	r3, [r3, #4]
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	0003024c 	.word	0x0003024c

000d552c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <HAL_USB_USART_Available_Data+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	691b      	ldr	r3, [r3, #16]
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	0003024c 	.word	0x0003024c

000d553c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	695b      	ldr	r3, [r3, #20]
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	0003024c 	.word	0x0003024c

000d554c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <HAL_USB_USART_Receive_Data+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	699b      	ldr	r3, [r3, #24]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	0003024c 	.word	0x0003024c

000d555c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <HAL_USB_USART_Send_Data+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	69db      	ldr	r3, [r3, #28]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	0003024c 	.word	0x0003024c

000d556c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <HAL_USB_USART_Flush_Data+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	6a1b      	ldr	r3, [r3, #32]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	0003024c 	.word	0x0003024c

000d557c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <log_message+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	00030260 	.word	0x00030260

000d558c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <set_system_mode+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	685b      	ldr	r3, [r3, #4]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030220 	.word	0x00030220

000d559c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <system_delay_ms+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	695b      	ldr	r3, [r3, #20]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	00030220 	.word	0x00030220

000d55ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <application_thread_current+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	00030220 	.word	0x00030220

000d55bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <application_thread_invoke+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	00030220 	.word	0x00030220

000d55cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b03      	ldr	r3, [pc, #12]	; (d55dc <system_ctrl_set_app_request_handler+0x10>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55d6:	9301      	str	r3, [sp, #4]
   d55d8:	bd08      	pop	{r3, pc}
   d55da:	0000      	.short	0x0000
   d55dc:	00030220 	.word	0x00030220

000d55e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b03      	ldr	r3, [pc, #12]	; (d55f0 <system_ctrl_set_result+0x10>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55ea:	9301      	str	r3, [sp, #4]
   d55ec:	bd08      	pop	{r3, pc}
   d55ee:	0000      	.short	0x0000
   d55f0:	00030220 	.word	0x00030220

000d55f4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <spark_cloud_flag_connected+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	695b      	ldr	r3, [r3, #20]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030244 	.word	0x00030244

000d5604 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <spark_send_event+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	6a1b      	ldr	r3, [r3, #32]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030244 	.word	0x00030244

000d5614 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030244 	.word	0x00030244

000d5624 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <network_connect+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	685b      	ldr	r3, [r3, #4]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030240 	.word	0x00030240

000d5634 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <network_connecting+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	689b      	ldr	r3, [r3, #8]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030240 	.word	0x00030240

000d5644 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <network_disconnect+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	68db      	ldr	r3, [r3, #12]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030240 	.word	0x00030240

000d5654 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <network_ready+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	691b      	ldr	r3, [r3, #16]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030240 	.word	0x00030240

000d5664 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <network_on+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	695b      	ldr	r3, [r3, #20]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030240 	.word	0x00030240

000d5674 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <network_off+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	699b      	ldr	r3, [r3, #24]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030240 	.word	0x00030240

000d5684 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <network_listen+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	69db      	ldr	r3, [r3, #28]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030240 	.word	0x00030240

000d5694 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <network_listening+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6a1b      	ldr	r3, [r3, #32]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030240 	.word	0x00030240

000d56a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <network_set_listen_timeout+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030240 	.word	0x00030240

000d56b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <network_get_listen_timeout+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030240 	.word	0x00030240

000d56c4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <malloc+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	681b      	ldr	r3, [r3, #0]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003021c 	.word	0x0003021c

000d56d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <free+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	685b      	ldr	r3, [r3, #4]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003021c 	.word	0x0003021c

000d56e4 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <snprintf+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	69db      	ldr	r3, [r3, #28]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	0003021c 	.word	0x0003021c

000d56f4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <vsnprintf+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	0003021c 	.word	0x0003021c

000d5704 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <abort+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	0003021c 	.word	0x0003021c

000d5714 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <_malloc_r+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	0003021c 	.word	0x0003021c

000d5724 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <__errno+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003021c 	.word	0x0003021c

000d5734 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5734:	2100      	movs	r1, #0
   d5736:	f7ff bf31 	b.w	d559c <system_delay_ms>

000d573a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d573a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d573c:	6883      	ldr	r3, [r0, #8]
   d573e:	4604      	mov	r4, r0
   d5740:	b90b      	cbnz	r3, d5746 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5742:	f001 fc62 	bl	d700a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5746:	68c3      	ldr	r3, [r0, #12]
   d5748:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d574a:	68a3      	ldr	r3, [r4, #8]
   d574c:	b11b      	cbz	r3, d5756 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d574e:	2203      	movs	r2, #3
   d5750:	4621      	mov	r1, r4
   d5752:	4620      	mov	r0, r4
   d5754:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5756:	4620      	mov	r0, r4
   d5758:	2110      	movs	r1, #16
}
   d575a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d575e:	f001 bc52 	b.w	d7006 <_ZdlPvj>

000d5762 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5762:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5764:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5766:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5768:	689b      	ldr	r3, [r3, #8]
   d576a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d576c:	68a3      	ldr	r3, [r4, #8]
   d576e:	3b01      	subs	r3, #1
   d5770:	60a3      	str	r3, [r4, #8]
   d5772:	b92b      	cbnz	r3, d5780 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109+0x1e>
            _M_destroy();
   d5774:	6823      	ldr	r3, [r4, #0]
   d5776:	4620      	mov	r0, r4
   d5778:	68db      	ldr	r3, [r3, #12]
        }
    }
   d577a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d577e:	4718      	bx	r3
   d5780:	bd10      	pop	{r4, pc}

000d5782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5782:	680b      	ldr	r3, [r1, #0]
   d5784:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5786:	b113      	cbz	r3, d578e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5788:	685a      	ldr	r2, [r3, #4]
   d578a:	3201      	adds	r2, #1
   d578c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d578e:	4770      	bx	lr

000d5790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5790:	b510      	push	{r4, lr}
   d5792:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5794:	6800      	ldr	r0, [r0, #0]
   d5796:	b128      	cbz	r0, d57a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5798:	6843      	ldr	r3, [r0, #4]
   d579a:	3b01      	subs	r3, #1
   d579c:	6043      	str	r3, [r0, #4]
   d579e:	b90b      	cbnz	r3, d57a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d57a0:	f7ff ffdf 	bl	d5762 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d57a4:	4620      	mov	r0, r4
   d57a6:	bd10      	pop	{r4, pc}

000d57a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57a8:	4802      	ldr	r0, [pc, #8]	; (d57b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d57aa:	2300      	movs	r3, #0
   d57ac:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d57ae:	f7ff bd2d 	b.w	d520c <os_mutex_recursive_create>
   d57b2:	bf00      	nop
   d57b4:	2003e3c8 	.word	0x2003e3c8

000d57b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57b8:	4770      	bx	lr

000d57ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d57ba:	2000      	movs	r0, #0
   d57bc:	4770      	bx	lr

000d57be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57be:	b510      	push	{r4, lr}
   d57c0:	2110      	movs	r1, #16
   d57c2:	4604      	mov	r4, r0
   d57c4:	f001 fc1f 	bl	d7006 <_ZdlPvj>
   d57c8:	4620      	mov	r0, r4
   d57ca:	bd10      	pop	{r4, pc}

000d57cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d57cc:	b508      	push	{r3, lr}
      { delete this; }
   d57ce:	b108      	cbz	r0, d57d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d57d0:	f7ff fff5 	bl	d57be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d57d4:	bd08      	pop	{r3, pc}

000d57d6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d57d6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d57d8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d57da:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d57dc:	b113      	cbz	r3, d57e4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57de:	2203      	movs	r2, #3
   d57e0:	4601      	mov	r1, r0
   d57e2:	4798      	blx	r3
    }
   d57e4:	4620      	mov	r0, r4
   d57e6:	bd10      	pop	{r4, pc}

000d57e8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d57e8:	2200      	movs	r2, #0
   d57ea:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d57ec:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d57ee:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d57f2:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57f4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d57f8:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d57fa:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57fc:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d57fe:	680c      	ldr	r4, [r1, #0]
   d5800:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5802:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5804:	bd10      	pop	{r4, pc}

000d5806 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5806:	b510      	push	{r4, lr}
   d5808:	4604      	mov	r4, r0
    free((void*)msg_);
   d580a:	6800      	ldr	r0, [r0, #0]
   d580c:	f7ff ff62 	bl	d56d4 <free>
}
   d5810:	4620      	mov	r0, r4
   d5812:	bd10      	pop	{r4, pc}

000d5814 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5814:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5816:	68c4      	ldr	r4, [r0, #12]
   d5818:	b1f4      	cbz	r4, d5858 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d581a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d581c:	2b02      	cmp	r3, #2
   d581e:	d103      	bne.n	d5828 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5820:	f104 000c 	add.w	r0, r4, #12
   d5824:	f7ff ffef 	bl	d5806 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5828:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d582a:	b135      	cbz	r5, d583a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d582c:	4628      	mov	r0, r5
   d582e:	f7ff ffd2 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>
   d5832:	2110      	movs	r1, #16
   d5834:	4628      	mov	r0, r5
   d5836:	f001 fbe6 	bl	d7006 <_ZdlPvj>
   d583a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d583c:	b135      	cbz	r5, d584c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d583e:	4628      	mov	r0, r5
   d5840:	f7ff ffc9 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>
   d5844:	2110      	movs	r1, #16
   d5846:	4628      	mov	r0, r5
   d5848:	f001 fbdd 	bl	d7006 <_ZdlPvj>
   d584c:	4620      	mov	r0, r4
   d584e:	2114      	movs	r1, #20
   d5850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5854:	f001 bbd7 	b.w	d7006 <_ZdlPvj>
   d5858:	bd38      	pop	{r3, r4, r5, pc}

000d585a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d585a:	b513      	push	{r0, r1, r4, lr}
   d585c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d585e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5862:	2300      	movs	r3, #0
   d5864:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5866:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5868:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d586a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d586c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d586e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5870:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5872:	f7ff ff8d 	bl	d5790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5876:	4620      	mov	r0, r4
   d5878:	b002      	add	sp, #8
   d587a:	bd10      	pop	{r4, pc}

000d587c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d587c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d587e:	460c      	mov	r4, r1
   d5880:	ad02      	add	r5, sp, #8
   d5882:	f854 3b04 	ldr.w	r3, [r4], #4
   d5886:	f845 3d08 	str.w	r3, [r5, #-8]!
   d588a:	4606      	mov	r6, r0
   d588c:	460f      	mov	r7, r1
   d588e:	a801      	add	r0, sp, #4
   d5890:	4621      	mov	r1, r4
   d5892:	f7ff ff76 	bl	d5782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5896:	4629      	mov	r1, r5
   d5898:	4630      	mov	r0, r6
   d589a:	f7ff ffde 	bl	d585a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d589e:	a801      	add	r0, sp, #4
   d58a0:	f7ff ff76 	bl	d5790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58a4:	4620      	mov	r0, r4
   d58a6:	f7ff ff73 	bl	d5790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d58aa:	4638      	mov	r0, r7
   d58ac:	2108      	movs	r1, #8
   d58ae:	f001 fbaa 	bl	d7006 <_ZdlPvj>
        return p;
    }
   d58b2:	4630      	mov	r0, r6
   d58b4:	b003      	add	sp, #12
   d58b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d58b8:	b513      	push	{r0, r1, r4, lr}
   d58ba:	460b      	mov	r3, r1
   d58bc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58be:	c803      	ldmia	r0, {r0, r1}
   d58c0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d58c4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d58c8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d58cc:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d58d0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d58d4:	b002      	add	sp, #8
   d58d6:	bd10      	pop	{r4, pc}

000d58d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d58d8:	b538      	push	{r3, r4, r5, lr}
   d58da:	2300      	movs	r3, #0
   d58dc:	4604      	mov	r4, r0
   d58de:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58e0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d58e2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58e4:	f7fe fbd9 	bl	d409a <_Znwj>
   d58e8:	b128      	cbz	r0, d58f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d58ea:	2301      	movs	r3, #1
   d58ec:	6043      	str	r3, [r0, #4]
   d58ee:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d58f0:	4b02      	ldr	r3, [pc, #8]	; (d58fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d58f2:	6003      	str	r3, [r0, #0]
   d58f4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58f6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d58f8:	4620      	mov	r0, r4
   d58fa:	bd38      	pop	{r3, r4, r5, pc}
   d58fc:	000d8614 	.word	0x000d8614

000d5900 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5900:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5902:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5904:	b90a      	cbnz	r2, d590a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5906:	f001 fb80 	bl	d700a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d590a:	68c3      	ldr	r3, [r0, #12]
    }
   d590c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5910:	4718      	bx	r3

000d5912 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5912:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5914:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5916:	f100 0110 	add.w	r1, r0, #16
   d591a:	f7ff fff1 	bl	d5900 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d591e:	bd08      	pop	{r3, pc}

000d5920 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5920:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5922:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5924:	b90a      	cbnz	r2, d592a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5926:	f001 fb70 	bl	d700a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d592a:	68c3      	ldr	r3, [r0, #12]
    }
   d592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5930:	4718      	bx	r3

000d5932 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5932:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5934:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5936:	f100 0110 	add.w	r1, r0, #16
   d593a:	f7ff fff1 	bl	d5920 <_ZNKSt8functionIFvRKbEEclES1_>
   d593e:	bd08      	pop	{r3, pc}

000d5940 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5940:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5942:	2300      	movs	r3, #0
   d5944:	6083      	str	r3, [r0, #8]
   d5946:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5948:	4604      	mov	r4, r0
   d594a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d594c:	b12b      	cbz	r3, d595a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d594e:	2202      	movs	r2, #2
   d5950:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5952:	68eb      	ldr	r3, [r5, #12]
   d5954:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5956:	68ab      	ldr	r3, [r5, #8]
   d5958:	60a3      	str	r3, [r4, #8]
	}
    }
   d595a:	4620      	mov	r0, r4
   d595c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5960:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5962:	b089      	sub	sp, #36	; 0x24
   d5964:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5966:	4668      	mov	r0, sp
   d5968:	f7ff ff3e 	bl	d57e8 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d596c:	2300      	movs	r3, #0
   d596e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5972:	f04f 0202 	mov.w	r2, #2
   d5976:	e8d4 3f4f 	ldrexb	r3, [r4]
   d597a:	2b00      	cmp	r3, #0
   d597c:	d103      	bne.n	d5986 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d597e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5982:	2900      	cmp	r1, #0
   d5984:	d1f7      	bne.n	d5976 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5986:	d002      	beq.n	d598e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5988:	f88d 3008 	strb.w	r3, [sp, #8]
   d598c:	e063      	b.n	d5a56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d598e:	f114 050c 	adds.w	r5, r4, #12
   d5992:	d003      	beq.n	d599c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5994:	4669      	mov	r1, sp
   d5996:	4628      	mov	r0, r5
   d5998:	f7ff ff26 	bl	d57e8 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d599c:	f3bf 8f5f 	dmb	sy
   d59a0:	2301      	movs	r3, #1
   d59a2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d59a4:	2000      	movs	r0, #0
   d59a6:	f104 0308 	add.w	r3, r4, #8
   d59aa:	f3bf 8f5f 	dmb	sy
   d59ae:	e853 6f00 	ldrex	r6, [r3]
   d59b2:	e843 0200 	strex	r2, r0, [r3]
   d59b6:	2a00      	cmp	r2, #0
   d59b8:	d1f9      	bne.n	d59ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d59ba:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d59be:	2e00      	cmp	r6, #0
   d59c0:	d049      	beq.n	d5a56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d59c2:	f7ff fdf3 	bl	d55ac <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d59c6:	b120      	cbz	r0, d59d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d59c8:	4629      	mov	r1, r5
   d59ca:	4630      	mov	r0, r6
   d59cc:	f7ff ff98 	bl	d5900 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d59d0:	e03a      	b.n	d5a48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d59d2:	4631      	mov	r1, r6
   d59d4:	a802      	add	r0, sp, #8
   d59d6:	f7ff ffb3 	bl	d5940 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d59da:	68e0      	ldr	r0, [r4, #12]
   d59dc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d59e0:	b108      	cbz	r0, d59e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d59e2:	f002 fb93 	bl	d810c <strdup>
   d59e6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d59e8:	2010      	movs	r0, #16
   d59ea:	f8ad 501c 	strh.w	r5, [sp, #28]
   d59ee:	f7fe fb54 	bl	d409a <_Znwj>
   d59f2:	4605      	mov	r5, r0
   d59f4:	b1e8      	cbz	r0, d5a32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59f6:	2700      	movs	r7, #0
   d59f8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59fa:	2018      	movs	r0, #24
   d59fc:	f7fe fb4d 	bl	d409a <_Znwj>
   d5a00:	4604      	mov	r4, r0
   d5a02:	b188      	cbz	r0, d5a28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a04:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a06:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a08:	a802      	add	r0, sp, #8
   d5a0a:	f7ff ff55 	bl	d58b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a0e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a12:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a14:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a16:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a18:	a906      	add	r1, sp, #24
   d5a1a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a1c:	60e3      	str	r3, [r4, #12]
   d5a1e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a22:	9205      	str	r2, [sp, #20]
   d5a24:	f7ff fee0 	bl	d57e8 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a28:	4b0d      	ldr	r3, [pc, #52]	; (d5a60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5a2a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a2c:	4b0d      	ldr	r3, [pc, #52]	; (d5a64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a2e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a30:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5a32:	a806      	add	r0, sp, #24
   d5a34:	f7ff fee7 	bl	d5806 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a38:	a802      	add	r0, sp, #8
   d5a3a:	f7ff fecc 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a3e:	2200      	movs	r2, #0
   d5a40:	4629      	mov	r1, r5
   d5a42:	4809      	ldr	r0, [pc, #36]	; (d5a68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5a44:	f7ff fdba 	bl	d55bc <application_thread_invoke>
   d5a48:	4630      	mov	r0, r6
   d5a4a:	f7ff fec4 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5a4e:	2110      	movs	r1, #16
   d5a50:	4630      	mov	r0, r6
   d5a52:	f001 fad8 	bl	d7006 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5a56:	4668      	mov	r0, sp
   d5a58:	f7ff fed5 	bl	d5806 <_ZN8particle5ErrorD1Ev>
    }
   d5a5c:	b009      	add	sp, #36	; 0x24
   d5a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a60:	000d5913 	.word	0x000d5913
   d5a64:	000d5b89 	.word	0x000d5b89
   d5a68:	000d573b 	.word	0x000d573b

000d5a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a70:	b08b      	sub	sp, #44	; 0x2c
   d5a72:	4606      	mov	r6, r0
   d5a74:	460f      	mov	r7, r1
   d5a76:	4690      	mov	r8, r2
   d5a78:	4699      	mov	r9, r3
   d5a7a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a7e:	f7ff fdb9 	bl	d55f4 <spark_cloud_flag_connected>
   d5a82:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5a84:	4683      	mov	fp, r0
   d5a86:	bb30      	cbnz	r0, d5ad6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5a88:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5a8c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5a8e:	a905      	add	r1, sp, #20
   d5a90:	4628      	mov	r0, r5
   d5a92:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5a96:	f7ff fea7 	bl	d57e8 <_ZN8particle5ErrorC1EOS0_>
   d5a9a:	2014      	movs	r0, #20
   d5a9c:	f7fe fafd 	bl	d409a <_Znwj>
   d5aa0:	4604      	mov	r4, r0
   d5aa2:	b158      	cbz	r0, d5abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5aa4:	2302      	movs	r3, #2
   d5aa6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5aa8:	2301      	movs	r3, #1
   d5aaa:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5aac:	f8c0 b004 	str.w	fp, [r0, #4]
   d5ab0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5ab4:	4629      	mov	r1, r5
   d5ab6:	300c      	adds	r0, #12
   d5ab8:	f7ff fe96 	bl	d57e8 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5abc:	4630      	mov	r0, r6
   d5abe:	4621      	mov	r1, r4
   d5ac0:	f840 4b04 	str.w	r4, [r0], #4
   d5ac4:	f7ff ff08 	bl	d58d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ac8:	4628      	mov	r0, r5
   d5aca:	f7ff fe9c 	bl	d5806 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5ace:	a805      	add	r0, sp, #20
   d5ad0:	f7ff fe99 	bl	d5806 <_ZN8particle5ErrorD1Ev>
   d5ad4:	e052      	b.n	d5b7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5ad6:	2400      	movs	r4, #0
   d5ad8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5ada:	2014      	movs	r0, #20
   d5adc:	606c      	str	r4, [r5, #4]
   d5ade:	60ac      	str	r4, [r5, #8]
   d5ae0:	9307      	str	r3, [sp, #28]
   d5ae2:	f7fe fada 	bl	d409a <_Znwj>
   d5ae6:	4601      	mov	r1, r0
   d5ae8:	b118      	cbz	r0, d5af2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5aea:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5aec:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5aee:	6044      	str	r4, [r0, #4]
   d5af0:	6084      	str	r4, [r0, #8]
   d5af2:	a804      	add	r0, sp, #16
   d5af4:	9103      	str	r1, [sp, #12]
   d5af6:	f7ff feef 	bl	d58d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5afa:	4b22      	ldr	r3, [pc, #136]	; (d5b84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5afc:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5afe:	2008      	movs	r0, #8
   d5b00:	f7fe facb 	bl	d409a <_Znwj>
   d5b04:	4604      	mov	r4, r0
   d5b06:	b128      	cbz	r0, d5b14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b08:	9b03      	ldr	r3, [sp, #12]
   d5b0a:	f840 3b04 	str.w	r3, [r0], #4
   d5b0e:	a904      	add	r1, sp, #16
   d5b10:	f7ff fe37 	bl	d5782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b14:	9500      	str	r5, [sp, #0]
   d5b16:	fa5f f38a 	uxtb.w	r3, sl
   d5b1a:	464a      	mov	r2, r9
   d5b1c:	4641      	mov	r1, r8
   d5b1e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5b20:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b22:	f7ff fd6f 	bl	d5604 <spark_send_event>
   d5b26:	b920      	cbnz	r0, d5b32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5b28:	9b03      	ldr	r3, [sp, #12]
   d5b2a:	785b      	ldrb	r3, [r3, #1]
   d5b2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5b30:	b183      	cbz	r3, d5b54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5b32:	9b03      	ldr	r3, [sp, #12]
   d5b34:	9305      	str	r3, [sp, #20]
   d5b36:	a904      	add	r1, sp, #16
   d5b38:	a806      	add	r0, sp, #24
   d5b3a:	f7ff fe22 	bl	d5782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5b3e:	a905      	add	r1, sp, #20
   d5b40:	4630      	mov	r0, r6
   d5b42:	f7ff fe8a 	bl	d585a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b46:	a806      	add	r0, sp, #24
   d5b48:	f7ff fe22 	bl	d5790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b4c:	a804      	add	r0, sp, #16
   d5b4e:	f7ff fe1f 	bl	d5790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b52:	e013      	b.n	d5b7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5b54:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5b58:	a905      	add	r1, sp, #20
   d5b5a:	a803      	add	r0, sp, #12
   d5b5c:	9205      	str	r2, [sp, #20]
   d5b5e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5b62:	f7ff fefd 	bl	d5960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b66:	a805      	add	r0, sp, #20
   d5b68:	f7ff fe4d 	bl	d5806 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5b6c:	a805      	add	r0, sp, #20
   d5b6e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5b70:	f7ff fe84 	bl	d587c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5b74:	a806      	add	r0, sp, #24
   d5b76:	f7ff fe0b 	bl	d5790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b7a:	e7da      	b.n	d5b32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5b7c:	4630      	mov	r0, r6
   d5b7e:	b00b      	add	sp, #44	; 0x2c
   d5b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b84:	000d5cf9 	.word	0x000d5cf9

000d5b88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5b88:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b8c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5b8e:	d006      	beq.n	d5b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5b90:	2a03      	cmp	r2, #3
   d5b92:	d017      	beq.n	d5bc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5b94:	2a01      	cmp	r2, #1
   d5b96:	d122      	bne.n	d5bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5b98:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5b9a:	6003      	str	r3, [r0, #0]
	      break;
   d5b9c:	e01f      	b.n	d5bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5b9e:	2018      	movs	r0, #24
   d5ba0:	680e      	ldr	r6, [r1, #0]
   d5ba2:	f7fe fa7a 	bl	d409a <_Znwj>
   d5ba6:	4605      	mov	r5, r0
   d5ba8:	b150      	cbz	r0, d5bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5baa:	4631      	mov	r1, r6
   d5bac:	f7ff fec8 	bl	d5940 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5bb0:	6930      	ldr	r0, [r6, #16]
   d5bb2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5bb6:	b108      	cbz	r0, d5bbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5bb8:	f002 faa8 	bl	d810c <strdup>
   d5bbc:	6128      	str	r0, [r5, #16]
   d5bbe:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5bc0:	6025      	str	r5, [r4, #0]
   d5bc2:	e00c      	b.n	d5bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5bc4:	6804      	ldr	r4, [r0, #0]
   d5bc6:	b154      	cbz	r4, d5bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5bc8:	f104 0010 	add.w	r0, r4, #16
   d5bcc:	f7ff fe1b 	bl	d5806 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	f7ff fe00 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5bd6:	2118      	movs	r1, #24
   d5bd8:	4620      	mov	r0, r4
   d5bda:	f001 fa14 	bl	d7006 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5bde:	2000      	movs	r0, #0
   d5be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5be2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5be2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5be4:	2300      	movs	r3, #0
   d5be6:	6083      	str	r3, [r0, #8]
   d5be8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bea:	4604      	mov	r4, r0
   d5bec:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5bee:	b12b      	cbz	r3, d5bfc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5bf0:	2202      	movs	r2, #2
   d5bf2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5bf4:	68eb      	ldr	r3, [r5, #12]
   d5bf6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5bf8:	68ab      	ldr	r3, [r5, #8]
   d5bfa:	60a3      	str	r3, [r4, #8]
	}
    }
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	bd38      	pop	{r3, r4, r5, pc}

000d5c00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c00:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c02:	b570      	push	{r4, r5, r6, lr}
   d5c04:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c06:	d006      	beq.n	d5c16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5c08:	2a03      	cmp	r2, #3
   d5c0a:	d011      	beq.n	d5c30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5c0c:	2a01      	cmp	r2, #1
   d5c0e:	d118      	bne.n	d5c42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5c10:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c12:	6003      	str	r3, [r0, #0]
	      break;
   d5c14:	e015      	b.n	d5c42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c16:	2014      	movs	r0, #20
   d5c18:	680e      	ldr	r6, [r1, #0]
   d5c1a:	f7fe fa3e 	bl	d409a <_Znwj>
   d5c1e:	4605      	mov	r5, r0
   d5c20:	b120      	cbz	r0, d5c2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5c22:	4631      	mov	r1, r6
   d5c24:	f7ff ffdd 	bl	d5be2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5c28:	7c33      	ldrb	r3, [r6, #16]
   d5c2a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c2c:	6025      	str	r5, [r4, #0]
   d5c2e:	e008      	b.n	d5c42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c30:	6804      	ldr	r4, [r0, #0]
   d5c32:	b134      	cbz	r4, d5c42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c34:	4620      	mov	r0, r4
   d5c36:	f7ff fdce 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c3a:	2114      	movs	r1, #20
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	f001 f9e2 	bl	d7006 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5c42:	2000      	movs	r0, #0
   d5c44:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5c48:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c4a:	2300      	movs	r3, #0
   d5c4c:	b087      	sub	sp, #28
   d5c4e:	460c      	mov	r4, r1
   d5c50:	f3bf 8f5f 	dmb	sy
   d5c54:	e850 6f00 	ldrex	r6, [r0]
   d5c58:	e840 3200 	strex	r2, r3, [r0]
   d5c5c:	2a00      	cmp	r2, #0
   d5c5e:	d1f9      	bne.n	d5c54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5c60:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5c64:	2e00      	cmp	r6, #0
   d5c66:	d03f      	beq.n	d5ce8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5c68:	4618      	mov	r0, r3
   d5c6a:	f7ff fc9f 	bl	d55ac <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5c6e:	4607      	mov	r7, r0
   d5c70:	b120      	cbz	r0, d5c7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5c72:	4621      	mov	r1, r4
   d5c74:	4630      	mov	r0, r6
   d5c76:	f7ff fe53 	bl	d5920 <_ZNKSt8functionIFvRKbEEclES1_>
   d5c7a:	e02e      	b.n	d5cda <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5c7c:	4631      	mov	r1, r6
   d5c7e:	a801      	add	r0, sp, #4
   d5c80:	f7ff ffaf 	bl	d5be2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5c84:	7823      	ldrb	r3, [r4, #0]
   d5c86:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5c8a:	2010      	movs	r0, #16
   d5c8c:	f7fe fa05 	bl	d409a <_Znwj>
   d5c90:	4605      	mov	r5, r0
   d5c92:	b1d0      	cbz	r0, d5cca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c94:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c96:	2014      	movs	r0, #20
   d5c98:	f7fe f9ff 	bl	d409a <_Znwj>
   d5c9c:	4604      	mov	r4, r0
   d5c9e:	b178      	cbz	r0, d5cc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ca0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5ca2:	4601      	mov	r1, r0
   d5ca4:	a801      	add	r0, sp, #4
   d5ca6:	f7ff fe07 	bl	d58b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5caa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5cac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cb0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5cb2:	9203      	str	r2, [sp, #12]
   d5cb4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cb6:	60e3      	str	r3, [r4, #12]
   d5cb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5cbc:	9204      	str	r2, [sp, #16]
   d5cbe:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5cc0:	4b0a      	ldr	r3, [pc, #40]	; (d5cec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5cc2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5cc4:	4b0a      	ldr	r3, [pc, #40]	; (d5cf0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cc6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5cc8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cca:	a801      	add	r0, sp, #4
   d5ccc:	f7ff fd83 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5cd0:	2200      	movs	r2, #0
   d5cd2:	4629      	mov	r1, r5
   d5cd4:	4807      	ldr	r0, [pc, #28]	; (d5cf4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5cd6:	f7ff fc71 	bl	d55bc <application_thread_invoke>
   d5cda:	4630      	mov	r0, r6
   d5cdc:	f7ff fd7b 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5ce0:	2110      	movs	r1, #16
   d5ce2:	4630      	mov	r0, r6
   d5ce4:	f001 f98f 	bl	d7006 <_ZdlPvj>
        }
    }
   d5ce8:	b007      	add	sp, #28
   d5cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cec:	000d5933 	.word	0x000d5933
   d5cf0:	000d5c01 	.word	0x000d5c01
   d5cf4:	000d573b 	.word	0x000d573b

000d5cf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5cf8:	b530      	push	{r4, r5, lr}
   d5cfa:	b085      	sub	sp, #20
   d5cfc:	4604      	mov	r4, r0
   d5cfe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5d00:	4668      	mov	r0, sp
   d5d02:	4611      	mov	r1, r2
   d5d04:	f7ff fdba 	bl	d587c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5d08:	b17c      	cbz	r4, d5d2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5d0a:	b224      	sxth	r4, r4
   d5d0c:	4628      	mov	r0, r5
   d5d0e:	b10d      	cbz	r5, d5d14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5d10:	f002 f9fc 	bl	d810c <strdup>
   d5d14:	9002      	str	r0, [sp, #8]
   d5d16:	a902      	add	r1, sp, #8
   d5d18:	4668      	mov	r0, sp
   d5d1a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5d1e:	f7ff fe1f 	bl	d5960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5d22:	a802      	add	r0, sp, #8
   d5d24:	f7ff fd6f 	bl	d5806 <_ZN8particle5ErrorD1Ev>
   d5d28:	e01d      	b.n	d5d66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5d2a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5d2c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5d30:	f04f 0201 	mov.w	r2, #1
   d5d34:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5d38:	42a3      	cmp	r3, r4
   d5d3a:	d103      	bne.n	d5d44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5d3c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5d40:	2900      	cmp	r1, #0
   d5d42:	d1f7      	bne.n	d5d34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5d44:	d002      	beq.n	d5d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5d46:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d4a:	e00c      	b.n	d5d66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5d4c:	f110 010c 	adds.w	r1, r0, #12
   d5d50:	f04f 0301 	mov.w	r3, #1
   d5d54:	bf18      	it	ne
   d5d56:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5d58:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5d5c:	3004      	adds	r0, #4
   d5d5e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5d62:	f7ff ff71 	bl	d5c48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5d66:	a801      	add	r0, sp, #4
   d5d68:	f7ff fd12 	bl	d5790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5d6c:	b005      	add	sp, #20
   d5d6e:	bd30      	pop	{r4, r5, pc}

000d5d70 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d70:	2200      	movs	r2, #0
   d5d72:	4611      	mov	r1, r2
   d5d74:	6840      	ldr	r0, [r0, #4]
   d5d76:	f7ff bc8d 	b.w	d5694 <network_listening>

000d5d7a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d7a:	2200      	movs	r2, #0
   d5d7c:	4611      	mov	r1, r2
   d5d7e:	6840      	ldr	r0, [r0, #4]
   d5d80:	f7ff bc98 	b.w	d56b4 <network_get_listen_timeout>

000d5d84 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d84:	2200      	movs	r2, #0
   d5d86:	6840      	ldr	r0, [r0, #4]
   d5d88:	f7ff bc8c 	b.w	d56a4 <network_set_listen_timeout>

000d5d8c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d8c:	2200      	movs	r2, #0
   d5d8e:	f081 0101 	eor.w	r1, r1, #1
   d5d92:	6840      	ldr	r0, [r0, #4]
   d5d94:	f7ff bc76 	b.w	d5684 <network_listen>

000d5d98 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5d98:	2300      	movs	r3, #0
   d5d9a:	461a      	mov	r2, r3
   d5d9c:	4619      	mov	r1, r3
   d5d9e:	6840      	ldr	r0, [r0, #4]
   d5da0:	f7ff bc68 	b.w	d5674 <network_off>

000d5da4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5da4:	2300      	movs	r3, #0
   d5da6:	461a      	mov	r2, r3
   d5da8:	4619      	mov	r1, r3
   d5daa:	6840      	ldr	r0, [r0, #4]
   d5dac:	f7ff bc5a 	b.w	d5664 <network_on>

000d5db0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5db0:	2200      	movs	r2, #0
   d5db2:	4611      	mov	r1, r2
   d5db4:	6840      	ldr	r0, [r0, #4]
   d5db6:	f7ff bc4d 	b.w	d5654 <network_ready>

000d5dba <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5dba:	2200      	movs	r2, #0
   d5dbc:	4611      	mov	r1, r2
   d5dbe:	6840      	ldr	r0, [r0, #4]
   d5dc0:	f7ff bc38 	b.w	d5634 <network_connecting>

000d5dc4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5dc4:	2200      	movs	r2, #0
   d5dc6:	2102      	movs	r1, #2
   d5dc8:	6840      	ldr	r0, [r0, #4]
   d5dca:	f7ff bc3b 	b.w	d5644 <network_disconnect>

000d5dce <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5dce:	2300      	movs	r3, #0
   d5dd0:	461a      	mov	r2, r3
   d5dd2:	6840      	ldr	r0, [r0, #4]
   d5dd4:	f7ff bc26 	b.w	d5624 <network_connect>

000d5dd8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5dd8:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5dda:	2203      	movs	r2, #3
   d5ddc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5dde:	4a02      	ldr	r2, [pc, #8]	; (d5de8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5de0:	601a      	str	r2, [r3, #0]
   d5de2:	4770      	bx	lr
   d5de4:	2003e3cc 	.word	0x2003e3cc
   d5de8:	000d8630 	.word	0x000d8630

000d5dec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5dec:	4770      	bx	lr

000d5dee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5df0:	4606      	mov	r6, r0
   d5df2:	4615      	mov	r5, r2
   d5df4:	460c      	mov	r4, r1
   d5df6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5df8:	42bc      	cmp	r4, r7
   d5dfa:	d006      	beq.n	d5e0a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5dfc:	6833      	ldr	r3, [r6, #0]
   d5dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5e02:	689b      	ldr	r3, [r3, #8]
   d5e04:	4630      	mov	r0, r6
   d5e06:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5e08:	e7f6      	b.n	d5df8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5e0a:	4628      	mov	r0, r5
   d5e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e0e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5e0e:	2200      	movs	r2, #0
   d5e10:	7c00      	ldrb	r0, [r0, #16]
   d5e12:	f7ff ba73 	b.w	d52fc <HAL_I2C_Write_Data>

000d5e16 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5e16:	2100      	movs	r1, #0
   d5e18:	7c00      	ldrb	r0, [r0, #16]
   d5e1a:	f7ff ba77 	b.w	d530c <HAL_I2C_Available_Data>

000d5e1e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5e1e:	2100      	movs	r1, #0
   d5e20:	7c00      	ldrb	r0, [r0, #16]
   d5e22:	f7ff ba7b 	b.w	d531c <HAL_I2C_Read_Data>

000d5e26 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5e26:	2100      	movs	r1, #0
   d5e28:	7c00      	ldrb	r0, [r0, #16]
   d5e2a:	f7ff ba7f 	b.w	d532c <HAL_I2C_Peek_Data>

000d5e2e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5e2e:	2100      	movs	r1, #0
   d5e30:	7c00      	ldrb	r0, [r0, #16]
   d5e32:	f7ff ba83 	b.w	d533c <HAL_I2C_Flush_Data>

000d5e36 <_ZN7TwoWireD0Ev>:
   d5e36:	b510      	push	{r4, lr}
   d5e38:	2114      	movs	r1, #20
   d5e3a:	4604      	mov	r4, r0
   d5e3c:	f001 f8e3 	bl	d7006 <_ZdlPvj>
   d5e40:	4620      	mov	r0, r4
   d5e42:	bd10      	pop	{r4, pc}

000d5e44 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5e44:	b510      	push	{r4, lr}
   d5e46:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e4c:	4608      	mov	r0, r1
   d5e4e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5e50:	2100      	movs	r1, #0
   d5e52:	4b04      	ldr	r3, [pc, #16]	; (d5e64 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5e54:	7420      	strb	r0, [r4, #16]
   d5e56:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5e58:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5e5a:	f7ff fa7f 	bl	d535c <HAL_I2C_Init>

}
   d5e5e:	4620      	mov	r0, r4
   d5e60:	bd10      	pop	{r4, pc}
   d5e62:	bf00      	nop
   d5e64:	000d8664 	.word	0x000d8664

000d5e68 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5e68:	2300      	movs	r3, #0
   d5e6a:	461a      	mov	r2, r3
   d5e6c:	4619      	mov	r1, r3
   d5e6e:	7c00      	ldrb	r0, [r0, #16]
   d5e70:	f7ff ba24 	b.w	d52bc <HAL_I2C_Begin>

000d5e74 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5e74:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5e76:	2400      	movs	r4, #0
   d5e78:	7c00      	ldrb	r0, [r0, #16]
   d5e7a:	9400      	str	r4, [sp, #0]
   d5e7c:	f7ff fa26 	bl	d52cc <HAL_I2C_Request_Data>
  return result;
}
   d5e80:	b2c0      	uxtb	r0, r0
   d5e82:	b002      	add	sp, #8
   d5e84:	bd10      	pop	{r4, pc}

000d5e86 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5e86:	2301      	movs	r3, #1
   d5e88:	f7ff bff4 	b.w	d5e74 <_ZN7TwoWire11requestFromEhhh>

000d5e8c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5e8c:	2200      	movs	r2, #0
   d5e8e:	7c00      	ldrb	r0, [r0, #16]
   d5e90:	f7ff ba24 	b.w	d52dc <HAL_I2C_Begin_Transmission>

000d5e94 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5e94:	b2c9      	uxtb	r1, r1
   d5e96:	f7ff bff9 	b.w	d5e8c <_ZN7TwoWire17beginTransmissionEh>

000d5e9a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5e9a:	2200      	movs	r2, #0
   d5e9c:	7c00      	ldrb	r0, [r0, #16]
   d5e9e:	f7ff ba25 	b.w	d52ec <HAL_I2C_End_Transmission>

000d5ea2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5ea2:	2101      	movs	r1, #1
   d5ea4:	f7ff bff9 	b.w	d5e9a <_ZN7TwoWire15endTransmissionEh>

000d5ea8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5ea8:	2100      	movs	r1, #0
   d5eaa:	7c00      	ldrb	r0, [r0, #16]
   d5eac:	f7ff ba4e 	b.w	d534c <HAL_I2C_Is_Enabled>

000d5eb0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5eb0:	4770      	bx	lr

000d5eb2 <_ZN9IPAddressD0Ev>:
   d5eb2:	b510      	push	{r4, lr}
   d5eb4:	2118      	movs	r1, #24
   d5eb6:	4604      	mov	r4, r0
   d5eb8:	f001 f8a5 	bl	d7006 <_ZdlPvj>
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	bd10      	pop	{r4, pc}

000d5ec0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ec2:	7d03      	ldrb	r3, [r0, #20]
   d5ec4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ec6:	b08d      	sub	sp, #52	; 0x34
   d5ec8:	460e      	mov	r6, r1
   d5eca:	f100 0704 	add.w	r7, r0, #4
   d5ece:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ed2:	d002      	beq.n	d5eda <_ZNK9IPAddress7printToER5Print+0x1a>
   d5ed4:	f100 0508 	add.w	r5, r0, #8
   d5ed8:	e018      	b.n	d5f0c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5eda:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5edc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ede:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ee2:	232f      	movs	r3, #47	; 0x2f
   d5ee4:	462a      	mov	r2, r5
   d5ee6:	200a      	movs	r0, #10
   d5ee8:	f7ff fa48 	bl	d537c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5eec:	4628      	mov	r0, r5
   d5eee:	f002 f928 	bl	d8142 <strlen>
   d5ef2:	6833      	ldr	r3, [r6, #0]
   d5ef4:	4602      	mov	r2, r0
   d5ef6:	68db      	ldr	r3, [r3, #12]
   d5ef8:	4629      	mov	r1, r5
   d5efa:	4630      	mov	r0, r6
   d5efc:	4798      	blx	r3
   d5efe:	e00f      	b.n	d5f20 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5f00:	b124      	cbz	r4, d5f0c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5f02:	212e      	movs	r1, #46	; 0x2e
   d5f04:	4630      	mov	r0, r6
   d5f06:	f000 f9e3 	bl	d62d0 <_ZN5Print5printEc>
   d5f0a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5f0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5f10:	220a      	movs	r2, #10
   d5f12:	4630      	mov	r0, r6
   d5f14:	f000 fa22 	bl	d635c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f18:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f1a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f1c:	d1f0      	bne.n	d5f00 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f1e:	4620      	mov	r0, r4
    }
    return n;
}
   d5f20:	b00d      	add	sp, #52	; 0x34
   d5f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f24 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5f24:	b510      	push	{r4, lr}
   d5f26:	4b05      	ldr	r3, [pc, #20]	; (d5f3c <_ZN9IPAddressC1Ev+0x18>)
   d5f28:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5f2a:	2211      	movs	r2, #17
   d5f2c:	f840 3b04 	str.w	r3, [r0], #4
   d5f30:	2100      	movs	r1, #0
   d5f32:	f002 f8ba 	bl	d80aa <memset>
{
    clear();
}
   d5f36:	4620      	mov	r0, r4
   d5f38:	bd10      	pop	{r4, pc}
   d5f3a:	bf00      	nop
   d5f3c:	000d868c 	.word	0x000d868c

000d5f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5f40:	4603      	mov	r3, r0
   d5f42:	4a07      	ldr	r2, [pc, #28]	; (d5f60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5f44:	b510      	push	{r4, lr}
   d5f46:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5f4a:	f101 0210 	add.w	r2, r1, #16
   d5f4e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f52:	f843 4b04 	str.w	r4, [r3], #4
   d5f56:	4291      	cmp	r1, r2
   d5f58:	d1f9      	bne.n	d5f4e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5f5a:	780a      	ldrb	r2, [r1, #0]
   d5f5c:	701a      	strb	r2, [r3, #0]
}
   d5f5e:	bd10      	pop	{r4, pc}
   d5f60:	000d868c 	.word	0x000d868c

000d5f64 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5f64:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5f66:	2b04      	cmp	r3, #4
   d5f68:	d101      	bne.n	d5f6e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5f6a:	6840      	ldr	r0, [r0, #4]
   d5f6c:	e008      	b.n	d5f80 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5f6e:	2b06      	cmp	r3, #6
   d5f70:	d10a      	bne.n	d5f88 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5f72:	6843      	ldr	r3, [r0, #4]
   d5f74:	b153      	cbz	r3, d5f8c <_ZNK9IPAddresscvbEv+0x28>
   d5f76:	6883      	ldr	r3, [r0, #8]
   d5f78:	b143      	cbz	r3, d5f8c <_ZNK9IPAddresscvbEv+0x28>
   d5f7a:	68c3      	ldr	r3, [r0, #12]
   d5f7c:	b133      	cbz	r3, d5f8c <_ZNK9IPAddresscvbEv+0x28>
   d5f7e:	6900      	ldr	r0, [r0, #16]
   d5f80:	3000      	adds	r0, #0
   d5f82:	bf18      	it	ne
   d5f84:	2001      	movne	r0, #1
   d5f86:	4770      	bx	lr
   d5f88:	2000      	movs	r0, #0
   d5f8a:	4770      	bx	lr
   d5f8c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5f8e:	4770      	bx	lr

000d5f90 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5f90:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5f92:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5f96:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5f9a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5f9e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5fa2:	2304      	movs	r3, #4
   d5fa4:	6041      	str	r1, [r0, #4]
   d5fa6:	7503      	strb	r3, [r0, #20]
   d5fa8:	bd10      	pop	{r4, pc}

000d5faa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5faa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5fac:	780d      	ldrb	r5, [r1, #0]
   d5fae:	788b      	ldrb	r3, [r1, #2]
   d5fb0:	784a      	ldrb	r2, [r1, #1]
   d5fb2:	78c9      	ldrb	r1, [r1, #3]
   d5fb4:	9100      	str	r1, [sp, #0]
   d5fb6:	4629      	mov	r1, r5
   d5fb8:	f7ff ffea 	bl	d5f90 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5fbc:	b003      	add	sp, #12
   d5fbe:	bd30      	pop	{r4, r5, pc}

000d5fc0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5fc0:	4b01      	ldr	r3, [pc, #4]	; (d5fc8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5fc2:	4a02      	ldr	r2, [pc, #8]	; (d5fcc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5fc4:	601a      	str	r2, [r3, #0]
   d5fc6:	4770      	bx	lr
   d5fc8:	2003e3d4 	.word	0x2003e3d4
   d5fcc:	000d874d 	.word	0x000d874d

000d5fd0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fd0:	2200      	movs	r2, #0
   d5fd2:	4611      	mov	r1, r2
   d5fd4:	6840      	ldr	r0, [r0, #4]
   d5fd6:	f7ff bb5d 	b.w	d5694 <network_listening>

000d5fda <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fda:	2200      	movs	r2, #0
   d5fdc:	4611      	mov	r1, r2
   d5fde:	6840      	ldr	r0, [r0, #4]
   d5fe0:	f7ff bb68 	b.w	d56b4 <network_get_listen_timeout>

000d5fe4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fe4:	2200      	movs	r2, #0
   d5fe6:	6840      	ldr	r0, [r0, #4]
   d5fe8:	f7ff bb5c 	b.w	d56a4 <network_set_listen_timeout>

000d5fec <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fec:	2200      	movs	r2, #0
   d5fee:	f081 0101 	eor.w	r1, r1, #1
   d5ff2:	6840      	ldr	r0, [r0, #4]
   d5ff4:	f7ff bb46 	b.w	d5684 <network_listen>

000d5ff8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5ff8:	2300      	movs	r3, #0
   d5ffa:	461a      	mov	r2, r3
   d5ffc:	2101      	movs	r1, #1
   d5ffe:	6840      	ldr	r0, [r0, #4]
   d6000:	f7ff bb38 	b.w	d5674 <network_off>

000d6004 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6004:	2300      	movs	r3, #0
   d6006:	461a      	mov	r2, r3
   d6008:	4619      	mov	r1, r3
   d600a:	6840      	ldr	r0, [r0, #4]
   d600c:	f7ff bb2a 	b.w	d5664 <network_on>

000d6010 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6010:	2200      	movs	r2, #0
   d6012:	4611      	mov	r1, r2
   d6014:	6840      	ldr	r0, [r0, #4]
   d6016:	f7ff bb1d 	b.w	d5654 <network_ready>

000d601a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d601a:	2200      	movs	r2, #0
   d601c:	4611      	mov	r1, r2
   d601e:	6840      	ldr	r0, [r0, #4]
   d6020:	f7ff bb08 	b.w	d5634 <network_connecting>

000d6024 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6024:	2200      	movs	r2, #0
   d6026:	2102      	movs	r1, #2
   d6028:	6840      	ldr	r0, [r0, #4]
   d602a:	f7ff bb0b 	b.w	d5644 <network_disconnect>

000d602e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d602e:	2300      	movs	r3, #0
   d6030:	461a      	mov	r2, r3
   d6032:	6840      	ldr	r0, [r0, #4]
   d6034:	f7ff baf6 	b.w	d5624 <network_connect>

000d6038 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6038:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d603a:	4605      	mov	r5, r0
   d603c:	b188      	cbz	r0, d6062 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d603e:	6804      	ldr	r4, [r0, #0]
   d6040:	b14c      	cbz	r4, d6056 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6042:	68a3      	ldr	r3, [r4, #8]
   d6044:	b11b      	cbz	r3, d604e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6046:	2203      	movs	r2, #3
   d6048:	4621      	mov	r1, r4
   d604a:	4620      	mov	r0, r4
   d604c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d604e:	2110      	movs	r1, #16
   d6050:	4620      	mov	r0, r4
   d6052:	f000 ffd8 	bl	d7006 <_ZdlPvj>
   d6056:	4628      	mov	r0, r5
   d6058:	2114      	movs	r1, #20
      }
   d605a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d605e:	f000 bfd2 	b.w	d7006 <_ZdlPvj>
   d6062:	bd38      	pop	{r3, r4, r5, pc}

000d6064 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6064:	b110      	cbz	r0, d606c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6066:	6803      	ldr	r3, [r0, #0]
   d6068:	685b      	ldr	r3, [r3, #4]
   d606a:	4718      	bx	r3
   d606c:	4770      	bx	lr

000d606e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d606e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6070:	6803      	ldr	r3, [r0, #0]
   d6072:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6074:	b1bb      	cbz	r3, d60a6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6076:	6858      	ldr	r0, [r3, #4]
   d6078:	f7ff f898 	bl	d51ac <os_thread_is_current>
   d607c:	b978      	cbnz	r0, d609e <_ZN6ThreadD1Ev+0x30>
   d607e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6080:	7c5a      	ldrb	r2, [r3, #17]
   d6082:	b912      	cbnz	r2, d608a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6084:	6858      	ldr	r0, [r3, #4]
   d6086:	f7ff f899 	bl	d51bc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d608a:	6823      	ldr	r3, [r4, #0]
   d608c:	6858      	ldr	r0, [r3, #4]
   d608e:	f7ff f89d 	bl	d51cc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6092:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6094:	2300      	movs	r3, #0
   d6096:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6098:	b128      	cbz	r0, d60a6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d609a:	f7ff ffcd 	bl	d6038 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d609e:	6820      	ldr	r0, [r4, #0]
   d60a0:	b108      	cbz	r0, d60a6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d60a2:	f7ff ffc9 	bl	d6038 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d60a6:	4620      	mov	r0, r4
   d60a8:	bd10      	pop	{r4, pc}
	...

000d60ac <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d60ac:	b538      	push	{r3, r4, r5, lr}
   d60ae:	4b0c      	ldr	r3, [pc, #48]	; (d60e0 <_ZN5spark9MeshClassD1Ev+0x34>)
   d60b0:	6003      	str	r3, [r0, #0]
   d60b2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60b4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d60b8:	b108      	cbz	r0, d60be <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d60ba:	f7fd fff2 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60be:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d60c2:	b135      	cbz	r5, d60d2 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d60c4:	4628      	mov	r0, r5
   d60c6:	f7ff ffd2 	bl	d606e <_ZN6ThreadD1Ev>
   d60ca:	2104      	movs	r1, #4
   d60cc:	4628      	mov	r0, r5
   d60ce:	f000 ff9a 	bl	d7006 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60d2:	68a0      	ldr	r0, [r4, #8]
   d60d4:	b108      	cbz	r0, d60da <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d60d6:	f7ff ffc5 	bl	d6064 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d60da:	4620      	mov	r0, r4
   d60dc:	bd38      	pop	{r3, r4, r5, pc}
   d60de:	bf00      	nop
   d60e0:	000d8780 	.word	0x000d8780

000d60e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d60e4:	b538      	push	{r3, r4, r5, lr}
   d60e6:	4c0e      	ldr	r4, [pc, #56]	; (d6120 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d60e8:	4b0e      	ldr	r3, [pc, #56]	; (d6124 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d60ea:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d60ec:	2500      	movs	r5, #0
   d60ee:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d60f0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d60f4:	6063      	str	r3, [r4, #4]
   d60f6:	60a5      	str	r5, [r4, #8]
   d60f8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d60fc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6100:	f7ff f884 	bl	d520c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6104:	4b08      	ldr	r3, [pc, #32]	; (d6128 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6106:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d610a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d610e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6110:	4620      	mov	r0, r4
   d6112:	4a06      	ldr	r2, [pc, #24]	; (d612c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6114:	4906      	ldr	r1, [pc, #24]	; (d6130 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d611a:	f000 bf6f 	b.w	d6ffc <__aeabi_atexit>
   d611e:	bf00      	nop
   d6120:	2003e3d8 	.word	0x2003e3d8
   d6124:	000d87b4 	.word	0x000d87b4
   d6128:	000d8780 	.word	0x000d8780
   d612c:	2003e1cc 	.word	0x2003e1cc
   d6130:	000d60ad 	.word	0x000d60ad

000d6134 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6134:	2300      	movs	r3, #0
   d6136:	461a      	mov	r2, r3
   d6138:	6840      	ldr	r0, [r0, #4]
   d613a:	f7ff ba73 	b.w	d5624 <network_connect>

000d613e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d613e:	2200      	movs	r2, #0
   d6140:	2102      	movs	r1, #2
   d6142:	6840      	ldr	r0, [r0, #4]
   d6144:	f7ff ba7e 	b.w	d5644 <network_disconnect>

000d6148 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6148:	2200      	movs	r2, #0
   d614a:	4611      	mov	r1, r2
   d614c:	6840      	ldr	r0, [r0, #4]
   d614e:	f7ff ba71 	b.w	d5634 <network_connecting>

000d6152 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6152:	2200      	movs	r2, #0
   d6154:	4611      	mov	r1, r2
   d6156:	6840      	ldr	r0, [r0, #4]
   d6158:	f7ff ba7c 	b.w	d5654 <network_ready>

000d615c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d615c:	2300      	movs	r3, #0
   d615e:	461a      	mov	r2, r3
   d6160:	4619      	mov	r1, r3
   d6162:	6840      	ldr	r0, [r0, #4]
   d6164:	f7ff ba7e 	b.w	d5664 <network_on>

000d6168 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6168:	2300      	movs	r3, #0
   d616a:	461a      	mov	r2, r3
   d616c:	4619      	mov	r1, r3
   d616e:	6840      	ldr	r0, [r0, #4]
   d6170:	f7ff ba80 	b.w	d5674 <network_off>

000d6174 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6174:	2200      	movs	r2, #0
   d6176:	f081 0101 	eor.w	r1, r1, #1
   d617a:	6840      	ldr	r0, [r0, #4]
   d617c:	f7ff ba82 	b.w	d5684 <network_listen>

000d6180 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6180:	2200      	movs	r2, #0
   d6182:	6840      	ldr	r0, [r0, #4]
   d6184:	f7ff ba8e 	b.w	d56a4 <network_set_listen_timeout>

000d6188 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6188:	2200      	movs	r2, #0
   d618a:	4611      	mov	r1, r2
   d618c:	6840      	ldr	r0, [r0, #4]
   d618e:	f7ff ba91 	b.w	d56b4 <network_get_listen_timeout>

000d6192 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6192:	2200      	movs	r2, #0
   d6194:	4611      	mov	r1, r2
   d6196:	6840      	ldr	r0, [r0, #4]
   d6198:	f7ff ba7c 	b.w	d5694 <network_listening>

000d619c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d619c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d61a0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d61a2:	b095      	sub	sp, #84	; 0x54
   d61a4:	4616      	mov	r6, r2
   d61a6:	460d      	mov	r5, r1
   d61a8:	4607      	mov	r7, r0
    IPAddress addr;
   d61aa:	f7ff febb 	bl	d5f24 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d61ae:	4621      	mov	r1, r4
   d61b0:	2220      	movs	r2, #32
   d61b2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d61b4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d61b6:	f001 ff78 	bl	d80aa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d61ba:	2340      	movs	r3, #64	; 0x40
   d61bc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d61be:	4621      	mov	r1, r4
   d61c0:	466b      	mov	r3, sp
   d61c2:	aa0c      	add	r2, sp, #48	; 0x30
   d61c4:	4630      	mov	r0, r6
   d61c6:	f7ff f8f9 	bl	d53bc <netdb_getaddrinfo>
    if (!r) {
   d61ca:	4604      	mov	r4, r0
   d61cc:	2800      	cmp	r0, #0
   d61ce:	d144      	bne.n	d625a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d61d0:	4602      	mov	r2, r0
   d61d2:	2101      	movs	r1, #1
   d61d4:	6868      	ldr	r0, [r5, #4]
   d61d6:	f7ff fa3d 	bl	d5654 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61da:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d61dc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61de:	4622      	mov	r2, r4
   d61e0:	6868      	ldr	r0, [r5, #4]
   d61e2:	f7ff fa37 	bl	d5654 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61e6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61e8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d61ea:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61ec:	2e00      	cmp	r6, #0
   d61ee:	d034      	beq.n	d625a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d61f0:	2900      	cmp	r1, #0
   d61f2:	d132      	bne.n	d625a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d61f4:	6873      	ldr	r3, [r6, #4]
   d61f6:	2b02      	cmp	r3, #2
   d61f8:	d002      	beq.n	d6200 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d61fa:	2b0a      	cmp	r3, #10
   d61fc:	d009      	beq.n	d6212 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d61fe:	e02a      	b.n	d6256 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6200:	f1b8 0f00 	cmp.w	r8, #0
   d6204:	d027      	beq.n	d6256 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6206:	6971      	ldr	r1, [r6, #20]
   d6208:	4638      	mov	r0, r7
   d620a:	3104      	adds	r1, #4
   d620c:	f7ff fecd 	bl	d5faa <_ZN9IPAddressaSEPKh>
   d6210:	e020      	b.n	d6254 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6212:	f1b9 0f00 	cmp.w	r9, #0
   d6216:	d01e      	beq.n	d6256 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6218:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d621a:	2211      	movs	r2, #17
   d621c:	a801      	add	r0, sp, #4
   d621e:	f001 ff44 	bl	d80aa <memset>
                    a.v = 6;
   d6222:	2306      	movs	r3, #6
   d6224:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6228:	ad01      	add	r5, sp, #4
   d622a:	f104 0308 	add.w	r3, r4, #8
   d622e:	3418      	adds	r4, #24
   d6230:	6818      	ldr	r0, [r3, #0]
   d6232:	6859      	ldr	r1, [r3, #4]
   d6234:	462a      	mov	r2, r5
   d6236:	c203      	stmia	r2!, {r0, r1}
   d6238:	3308      	adds	r3, #8
   d623a:	42a3      	cmp	r3, r4
   d623c:	4615      	mov	r5, r2
   d623e:	d1f7      	bne.n	d6230 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6240:	a901      	add	r1, sp, #4
   d6242:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6244:	ad07      	add	r5, sp, #28
   d6246:	f7ff fe7b 	bl	d5f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d624a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d624c:	1d3c      	adds	r4, r7, #4
   d624e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6250:	682b      	ldr	r3, [r5, #0]
   d6252:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6254:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6256:	69f6      	ldr	r6, [r6, #28]
   d6258:	e7c8      	b.n	d61ec <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d625a:	9800      	ldr	r0, [sp, #0]
   d625c:	f7ff f8a6 	bl	d53ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6260:	4638      	mov	r0, r7
   d6262:	b015      	add	sp, #84	; 0x54
   d6264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6268 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6268:	4b02      	ldr	r3, [pc, #8]	; (d6274 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d626a:	4a03      	ldr	r2, [pc, #12]	; (d6278 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d626c:	601a      	str	r2, [r3, #0]
   d626e:	2200      	movs	r2, #0
   d6270:	605a      	str	r2, [r3, #4]
   d6272:	4770      	bx	lr
   d6274:	2003e5ac 	.word	0x2003e5ac
   d6278:	000d87b4 	.word	0x000d87b4

000d627c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d627e:	4606      	mov	r6, r0
   d6280:	460d      	mov	r5, r1
   d6282:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6284:	2400      	movs	r4, #0
  while (size--) {
   d6286:	42bd      	cmp	r5, r7
   d6288:	d00c      	beq.n	d62a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d628a:	6833      	ldr	r3, [r6, #0]
   d628c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6290:	689b      	ldr	r3, [r3, #8]
   d6292:	4630      	mov	r0, r6
   d6294:	4798      	blx	r3
     if (chunk>=0)
   d6296:	2800      	cmp	r0, #0
   d6298:	db01      	blt.n	d629e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d629a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d629c:	e7f3      	b.n	d6286 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d629e:	2c00      	cmp	r4, #0
   d62a0:	bf08      	it	eq
   d62a2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d62a4:	4620      	mov	r0, r4
   d62a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d62a8:	b570      	push	{r4, r5, r6, lr}
   d62aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d62ac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d62ae:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d62b0:	b149      	cbz	r1, d62c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d62b2:	f001 ff46 	bl	d8142 <strlen>
   d62b6:	682b      	ldr	r3, [r5, #0]
   d62b8:	4602      	mov	r2, r0
   d62ba:	4621      	mov	r1, r4
   d62bc:	4628      	mov	r0, r5
   d62be:	68db      	ldr	r3, [r3, #12]
    }
   d62c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d62c4:	4718      	bx	r3
    }
   d62c6:	bd70      	pop	{r4, r5, r6, pc}

000d62c8 <_ZN5Print5printEPKc>:
   d62c8:	b508      	push	{r3, lr}
   d62ca:	f7ff ffed 	bl	d62a8 <_ZN5Print5writeEPKc>
   d62ce:	bd08      	pop	{r3, pc}

000d62d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d62d0:	6803      	ldr	r3, [r0, #0]
   d62d2:	689b      	ldr	r3, [r3, #8]
   d62d4:	4718      	bx	r3

000d62d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d62d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d62d8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d62da:	4605      	mov	r5, r0
  size_t n = print('\r');
   d62dc:	f7ff fff8 	bl	d62d0 <_ZN5Print5printEc>
  n += print('\n');
   d62e0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d62e2:	4604      	mov	r4, r0
  n += print('\n');
   d62e4:	4628      	mov	r0, r5
   d62e6:	f7ff fff3 	bl	d62d0 <_ZN5Print5printEc>
  return n;
}
   d62ea:	4420      	add	r0, r4
   d62ec:	bd38      	pop	{r3, r4, r5, pc}

000d62ee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d62ee:	b538      	push	{r3, r4, r5, lr}
   d62f0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d62f2:	f7ff ffd9 	bl	d62a8 <_ZN5Print5writeEPKc>
   d62f6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d62f8:	4628      	mov	r0, r5
   d62fa:	f7ff ffec 	bl	d62d6 <_ZN5Print7printlnEv>
  return n;
}
   d62fe:	4420      	add	r0, r4
   d6300:	bd38      	pop	{r3, r4, r5, pc}

000d6302 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6302:	b530      	push	{r4, r5, lr}
   d6304:	b08b      	sub	sp, #44	; 0x2c
   d6306:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6308:	2100      	movs	r1, #0
   d630a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d630e:	2a01      	cmp	r2, #1
   d6310:	bf98      	it	ls
   d6312:	220a      	movls	r2, #10
   d6314:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6318:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d631c:	fb05 3312 	mls	r3, r5, r2, r3
   d6320:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6324:	2b09      	cmp	r3, #9
   d6326:	bf94      	ite	ls
   d6328:	3330      	addls	r3, #48	; 0x30
   d632a:	3337      	addhi	r3, #55	; 0x37
   d632c:	b2db      	uxtb	r3, r3
   d632e:	4621      	mov	r1, r4
   d6330:	f804 3901 	strb.w	r3, [r4], #-1
   d6334:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6336:	2d00      	cmp	r5, #0
   d6338:	d1ee      	bne.n	d6318 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d633a:	f7ff ffb5 	bl	d62a8 <_ZN5Print5writeEPKc>
}
   d633e:	b00b      	add	sp, #44	; 0x2c
   d6340:	bd30      	pop	{r4, r5, pc}

000d6342 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6342:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6344:	b92a      	cbnz	r2, d6352 <_ZN5Print5printEmi+0x10>
   d6346:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6348:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d634c:	689b      	ldr	r3, [r3, #8]
   d634e:	b2c9      	uxtb	r1, r1
   d6350:	4718      	bx	r3
  else return printNumber(n, base);
   d6352:	b2d2      	uxtb	r2, r2
}
   d6354:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6358:	f7ff bfd3 	b.w	d6302 <_ZN5Print11printNumberEmh>

000d635c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d635c:	f7ff bff1 	b.w	d6342 <_ZN5Print5printEmi>

000d6360 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6360:	b40c      	push	{r2, r3}
   d6362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6366:	b087      	sub	sp, #28
   d6368:	af00      	add	r7, sp, #0
   d636a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d636e:	4605      	mov	r5, r0
   d6370:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6374:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6376:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6378:	4623      	mov	r3, r4
   d637a:	464a      	mov	r2, r9
   d637c:	2114      	movs	r1, #20
   d637e:	1d38      	adds	r0, r7, #4
   d6380:	f7ff f9b8 	bl	d56f4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6384:	2813      	cmp	r0, #19
   d6386:	d805      	bhi.n	d6394 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6388:	1d39      	adds	r1, r7, #4
   d638a:	4628      	mov	r0, r5
   d638c:	f7ff ff8c 	bl	d62a8 <_ZN5Print5writeEPKc>
   d6390:	4604      	mov	r4, r0
   d6392:	e013      	b.n	d63bc <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6394:	f100 0308 	add.w	r3, r0, #8
   d6398:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d639c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d639e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d63a2:	1c41      	adds	r1, r0, #1
   d63a4:	4623      	mov	r3, r4
   d63a6:	464a      	mov	r2, r9
   d63a8:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d63aa:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d63ac:	f7ff f9a2 	bl	d56f4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d63b0:	4669      	mov	r1, sp
   d63b2:	4628      	mov	r0, r5
   d63b4:	f7ff ff78 	bl	d62a8 <_ZN5Print5writeEPKc>
   d63b8:	4604      	mov	r4, r0
   d63ba:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d63bc:	b11e      	cbz	r6, d63c6 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d63be:	4628      	mov	r0, r5
   d63c0:	f7ff ff89 	bl	d62d6 <_ZN5Print7printlnEv>
   d63c4:	4404      	add	r4, r0
    return n;
}
   d63c6:	4620      	mov	r0, r4
   d63c8:	371c      	adds	r7, #28
   d63ca:	46bd      	mov	sp, r7
   d63cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d63d0:	b002      	add	sp, #8
   d63d2:	4770      	bx	lr

000d63d4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d63d4:	b510      	push	{r4, lr}
   d63d6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63d8:	f7ff f9fd 	bl	d57d6 <_ZNSt14_Function_baseD1Ev>
   d63dc:	4620      	mov	r0, r4
   d63de:	bd10      	pop	{r4, pc}

000d63e0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63e0:	4803      	ldr	r0, [pc, #12]	; (d63f0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d63e2:	4a04      	ldr	r2, [pc, #16]	; (d63f4 <_GLOBAL__sub_I_RGB+0x14>)
   d63e4:	4904      	ldr	r1, [pc, #16]	; (d63f8 <_GLOBAL__sub_I_RGB+0x18>)
   d63e6:	2300      	movs	r3, #0
   d63e8:	6083      	str	r3, [r0, #8]
   d63ea:	f000 be07 	b.w	d6ffc <__aeabi_atexit>
   d63ee:	bf00      	nop
   d63f0:	2003e5b4 	.word	0x2003e5b4
   d63f4:	2003e1cc 	.word	0x2003e1cc
   d63f8:	000d63d5 	.word	0x000d63d5

000d63fc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d63fc:	4770      	bx	lr

000d63fe <_ZN8SPIClassD0Ev>:
   d63fe:	b510      	push	{r4, lr}
   d6400:	2110      	movs	r1, #16
   d6402:	4604      	mov	r4, r0
   d6404:	f000 fdff 	bl	d7006 <_ZdlPvj>
   d6408:	4620      	mov	r0, r4
   d640a:	bd10      	pop	{r4, pc}

000d640c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d640c:	b570      	push	{r4, r5, r6, lr}
   d640e:	4b08      	ldr	r3, [pc, #32]	; (d6430 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6410:	6003      	str	r3, [r0, #0]
   d6412:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6414:	2500      	movs	r5, #0
   d6416:	460e      	mov	r6, r1
   d6418:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d641c:	f7fe fede 	bl	d51dc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6420:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6422:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6424:	f7ff f812 	bl	d544c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6428:	60a5      	str	r5, [r4, #8]
}
   d642a:	4620      	mov	r0, r4
   d642c:	bd70      	pop	{r4, r5, r6, pc}
   d642e:	bf00      	nop
   d6430:	000d87e8 	.word	0x000d87e8

000d6434 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6434:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6438:	7900      	ldrb	r0, [r0, #4]
   d643a:	f7fe bff7 	b.w	d542c <HAL_SPI_Begin>

000d643e <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d643e:	68c0      	ldr	r0, [r0, #12]
   d6440:	f7fe bedc 	b.w	d51fc <os_mutex_unlock>

000d6444 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6444:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d6446:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6448:	6018      	str	r0, [r3, #0]
   d644a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d644c:	6818      	ldr	r0, [r3, #0]
   d644e:	4288      	cmp	r0, r1
   d6450:	b2e5      	uxtb	r5, r4
   d6452:	d906      	bls.n	d6462 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6454:	3401      	adds	r4, #1
   d6456:	2c08      	cmp	r4, #8
   d6458:	d002      	beq.n	d6460 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d645a:	0840      	lsrs	r0, r0, #1
   d645c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d645e:	e7f5      	b.n	d644c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6460:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6464:	5d5b      	ldrb	r3, [r3, r5]
   d6466:	7013      	strb	r3, [r2, #0]
   d6468:	bd30      	pop	{r4, r5, pc}
   d646a:	bf00      	nop
   d646c:	000d87f0 	.word	0x000d87f0

000d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6474:	4680      	mov	r8, r0
   d6476:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d6478:	68c0      	ldr	r0, [r0, #12]
   d647a:	460f      	mov	r7, r1
   d647c:	f7fe feb6 	bl	d51ec <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d6480:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d6484:	2214      	movs	r2, #20
   d6486:	2100      	movs	r1, #0
   d6488:	a809      	add	r0, sp, #36	; 0x24
   d648a:	f001 fe0e 	bl	d80aa <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d648e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d6490:	4620      	mov	r0, r4
   d6492:	2200      	movs	r2, #0
   d6494:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d6496:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d649a:	f7fe ffe7 	bl	d546c <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d649e:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d64a2:	b14c      	cbz	r4, d64b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d64a4:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d64a8:	b92d      	cbnz	r5, d64b6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d64aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d64ac:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d64b0:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d64b4:	e003      	b.n	d64be <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d64b6:	2400      	movs	r4, #0
   d64b8:	46a1      	mov	r9, r4
   d64ba:	4626      	mov	r6, r4
   d64bc:	2501      	movs	r5, #1
   d64be:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d64c0:	b10d      	cbz	r5, d64c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d64c2:	2b00      	cmp	r3, #0
   d64c4:	d140      	bne.n	d6548 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d64c6:	429d      	cmp	r5, r3
   d64c8:	d10b      	bne.n	d64e2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d64ca:	68ba      	ldr	r2, [r7, #8]
   d64cc:	42b2      	cmp	r2, r6
   d64ce:	d108      	bne.n	d64e2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d64d0:	f88d 9020 	strb.w	r9, [sp, #32]
   d64d4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d64d8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d64dc:	89ba      	ldrh	r2, [r7, #12]
   d64de:	4291      	cmp	r1, r2
   d64e0:	d032      	beq.n	d6548 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d64e2:	bb23      	cbnz	r3, d652e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d64e4:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d64e8:	f10d 020f 	add.w	r2, sp, #15
   d64ec:	ab04      	add	r3, sp, #16
   d64ee:	68b9      	ldr	r1, [r7, #8]
   d64f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d64f2:	f7ff ffa7 	bl	d6444 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d64f6:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d64f8:	b105      	cbz	r5, d64fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d64fa:	bb13      	cbnz	r3, d6542 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d64fc:	42ab      	cmp	r3, r5
   d64fe:	d009      	beq.n	d6514 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d6500:	2100      	movs	r1, #0
   d6502:	7b3b      	ldrb	r3, [r7, #12]
   d6504:	9101      	str	r1, [sp, #4]
   d6506:	7b7c      	ldrb	r4, [r7, #13]
   d6508:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d650c:	f898 0004 	ldrb.w	r0, [r8, #4]
   d6510:	9400      	str	r4, [sp, #0]
   d6512:	e013      	b.n	d653c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d6514:	68bb      	ldr	r3, [r7, #8]
   d6516:	42b3      	cmp	r3, r6
   d6518:	d3f2      	bcc.n	d6500 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d651a:	f88d 9020 	strb.w	r9, [sp, #32]
   d651e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6522:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6526:	89bb      	ldrh	r3, [r7, #12]
   d6528:	429a      	cmp	r2, r3
   d652a:	d1e9      	bne.n	d6500 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d652c:	e009      	b.n	d6542 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d652e:	2300      	movs	r3, #0
   d6530:	f898 0004 	ldrb.w	r0, [r8, #4]
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	9300      	str	r3, [sp, #0]
   d6538:	461a      	mov	r2, r3
   d653a:	2101      	movs	r1, #1
   d653c:	f7fe ff9e 	bl	d547c <HAL_SPI_Set_Settings>
   d6540:	e002      	b.n	d6548 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d6542:	9b04      	ldr	r3, [sp, #16]
   d6544:	42b3      	cmp	r3, r6
   d6546:	d1db      	bne.n	d6500 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d6548:	2000      	movs	r0, #0
   d654a:	b00f      	add	sp, #60	; 0x3c
   d654c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6550 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6550:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d6552:	7900      	ldrb	r0, [r0, #4]
   d6554:	f7fe ff72 	bl	d543c <HAL_SPI_Send_Receive_Data>
}
   d6558:	b2c0      	uxtb	r0, r0
   d655a:	bd08      	pop	{r3, pc}

000d655c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d655c:	7900      	ldrb	r0, [r0, #4]
   d655e:	f7fe bf7d 	b.w	d545c <HAL_SPI_Is_Enabled>
	...

000d6564 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6564:	4b04      	ldr	r3, [pc, #16]	; (d6578 <_GLOBAL__sub_I_System+0x14>)
   d6566:	2000      	movs	r0, #0
   d6568:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d656c:	7018      	strb	r0, [r3, #0]
   d656e:	8058      	strh	r0, [r3, #2]
   d6570:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6572:	f7ff b80b 	b.w	d558c <set_system_mode>
   d6576:	bf00      	nop
   d6578:	2003e5c4 	.word	0x2003e5c4

000d657c <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d657c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d657e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6580:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d6582:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6586:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6588:	2201      	movs	r2, #1
   d658a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d658e:	4621      	mov	r1, r4
   d6590:	47a8      	blx	r5
}
   d6592:	b003      	add	sp, #12
   d6594:	bd30      	pop	{r4, r5, pc}

000d6596 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6596:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6598:	6803      	ldr	r3, [r0, #0]
   d659a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d659c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d65a0:	46a4      	mov	ip, r4
}
   d65a2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d65a6:	4760      	bx	ip

000d65a8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d65a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d65aa:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d65ac:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d65ae:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d65b2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d65b4:	4621      	mov	r1, r4
   d65b6:	4613      	mov	r3, r2
   d65b8:	2201      	movs	r2, #1
   d65ba:	47a8      	blx	r5
}
   d65bc:	b003      	add	sp, #12
   d65be:	bd30      	pop	{r4, r5, pc}

000d65c0 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d65c0:	4770      	bx	lr

000d65c2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d65c2:	b538      	push	{r3, r4, r5, lr}
   d65c4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d65c6:	681a      	ldr	r2, [r3, #0]
   d65c8:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d65ca:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d65cc:	da05      	bge.n	d65da <_ZN9TCPClient9connectedEv+0x18>
   d65ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d65d2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d65d6:	429a      	cmp	r2, r3
   d65d8:	d001      	beq.n	d65de <_ZN9TCPClient9connectedEv+0x1c>
   d65da:	2501      	movs	r5, #1
   d65dc:	e00b      	b.n	d65f6 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d65de:	6803      	ldr	r3, [r0, #0]
   d65e0:	691b      	ldr	r3, [r3, #16]
   d65e2:	4798      	blx	r3
   d65e4:	2800      	cmp	r0, #0
   d65e6:	bf14      	ite	ne
   d65e8:	2501      	movne	r5, #1
   d65ea:	2500      	moveq	r5, #0
        if (!rv) {
   d65ec:	d103      	bne.n	d65f6 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d65ee:	6823      	ldr	r3, [r4, #0]
   d65f0:	4620      	mov	r0, r4
   d65f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65f4:	4798      	blx	r3
        }
    }
    return rv;
}
   d65f6:	4628      	mov	r0, r5
   d65f8:	bd38      	pop	{r3, r4, r5, pc}

000d65fa <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d65fa:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d65fc:	6818      	ldr	r0, [r3, #0]
}
   d65fe:	43c0      	mvns	r0, r0
   d6600:	0fc0      	lsrs	r0, r0, #31
   d6602:	4770      	bx	lr

000d6604 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6604:	4770      	bx	lr

000d6606 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6606:	2000      	movs	r0, #0
   d6608:	4770      	bx	lr

000d660a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d660a:	b510      	push	{r4, lr}
   d660c:	2114      	movs	r1, #20
   d660e:	4604      	mov	r4, r0
   d6610:	f000 fcf9 	bl	d7006 <_ZdlPvj>
   d6614:	4620      	mov	r0, r4
   d6616:	bd10      	pop	{r4, pc}

000d6618 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6618:	f7fd bd41 	b.w	d409e <_ZdlPv>

000d661c <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d661c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6620:	4698      	mov	r8, r3
    stop();
   d6622:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6624:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6628:	460c      	mov	r4, r1
   d662a:	4606      	mov	r6, r0
   d662c:	4617      	mov	r7, r2
    stop();
   d662e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6630:	ab12      	add	r3, sp, #72	; 0x48
   d6632:	2500      	movs	r5, #0
   d6634:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6638:	462a      	mov	r2, r5
   d663a:	4629      	mov	r1, r5
   d663c:	4620      	mov	r0, r4
   d663e:	f7fe febd 	bl	d53bc <netdb_getaddrinfo>
   d6642:	2800      	cmp	r0, #0
   d6644:	db3a      	blt.n	d66bc <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6646:	9b00      	ldr	r3, [sp, #0]
   d6648:	2b00      	cmp	r3, #0
   d664a:	d039      	beq.n	d66c0 <_ZN9TCPClient7connectEPKctm+0xa4>
   d664c:	695b      	ldr	r3, [r3, #20]
   d664e:	2b00      	cmp	r3, #0
   d6650:	d036      	beq.n	d66c0 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d6652:	a806      	add	r0, sp, #24
   d6654:	f7ff fc66 	bl	d5f24 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6658:	9b00      	ldr	r3, [sp, #0]
   d665a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d665c:	7863      	ldrb	r3, [r4, #1]
   d665e:	2b02      	cmp	r3, #2
   d6660:	d101      	bne.n	d6666 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6662:	1d21      	adds	r1, r4, #4
   d6664:	e013      	b.n	d668e <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6666:	2b0a      	cmp	r3, #10
   d6668:	d114      	bne.n	d6694 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d666a:	2211      	movs	r2, #17
   d666c:	4629      	mov	r1, r5
   d666e:	a801      	add	r0, sp, #4
   d6670:	f001 fd1b 	bl	d80aa <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6674:	68a3      	ldr	r3, [r4, #8]
   d6676:	bb33      	cbnz	r3, d66c6 <_ZN9TCPClient7connectEPKctm+0xaa>
   d6678:	68e3      	ldr	r3, [r4, #12]
   d667a:	bb23      	cbnz	r3, d66c6 <_ZN9TCPClient7connectEPKctm+0xaa>
   d667c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6680:	6925      	ldr	r5, [r4, #16]
   d6682:	f7fe fe83 	bl	d538c <inet_htonl>
   d6686:	4285      	cmp	r5, r0
   d6688:	d11d      	bne.n	d66c6 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d668a:	f104 0114 	add.w	r1, r4, #20
   d668e:	a806      	add	r0, sp, #24
   d6690:	f7ff fc8b 	bl	d5faa <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6694:	a806      	add	r0, sp, #24
   d6696:	f7ff fc65 	bl	d5f64 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d669a:	b188      	cbz	r0, d66c0 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d669c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d669e:	ad07      	add	r5, sp, #28
   d66a0:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d66a4:	4b18      	ldr	r3, [pc, #96]	; (d6708 <_ZN9TCPClient7connectEPKctm+0xec>)
   d66a6:	930c      	str	r3, [sp, #48]	; 0x30
   d66a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66aa:	ac0d      	add	r4, sp, #52	; 0x34
   d66ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66ae:	682b      	ldr	r3, [r5, #0]
   d66b0:	7023      	strb	r3, [r4, #0]
   d66b2:	463a      	mov	r2, r7
   d66b4:	4643      	mov	r3, r8
   d66b6:	a90c      	add	r1, sp, #48	; 0x30
   d66b8:	4630      	mov	r0, r6
   d66ba:	47c8      	blx	r9
   d66bc:	4604      	mov	r4, r0
   d66be:	e01c      	b.n	d66fa <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d66c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d66c4:	e019      	b.n	d66fa <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d66c6:	f104 0308 	add.w	r3, r4, #8
   d66ca:	ad01      	add	r5, sp, #4
   d66cc:	3418      	adds	r4, #24
   d66ce:	6818      	ldr	r0, [r3, #0]
   d66d0:	6859      	ldr	r1, [r3, #4]
   d66d2:	462a      	mov	r2, r5
   d66d4:	c203      	stmia	r2!, {r0, r1}
   d66d6:	3308      	adds	r3, #8
   d66d8:	42a3      	cmp	r3, r4
   d66da:	4615      	mov	r5, r2
   d66dc:	d1f7      	bne.n	d66ce <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d66de:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d66e0:	a901      	add	r1, sp, #4
   d66e2:	a80c      	add	r0, sp, #48	; 0x30
   d66e4:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d66e6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d66ea:	f7ff fc29 	bl	d5f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d66ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66f0:	ac07      	add	r4, sp, #28
   d66f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66f4:	682b      	ldr	r3, [r5, #0]
   d66f6:	7023      	strb	r3, [r4, #0]
   d66f8:	e7cc      	b.n	d6694 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d66fa:	9800      	ldr	r0, [sp, #0]
   d66fc:	f7fe fe56 	bl	d53ac <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d6700:	4620      	mov	r0, r4
   d6702:	b013      	add	sp, #76	; 0x4c
   d6704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6708:	000d868c 	.word	0x000d868c

000d670c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d670c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d670e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6710:	2200      	movs	r2, #0
   d6712:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6714:	9202      	str	r2, [sp, #8]
   d6716:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6718:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d671a:	4604      	mov	r4, r0
   d671c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d671e:	d008      	beq.n	d6732 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6724:	fbb3 f1f2 	udiv	r1, r3, r2
   d6728:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d672a:	fb02 3111 	mls	r1, r2, r1, r3
   d672e:	434a      	muls	r2, r1
   d6730:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6732:	6960      	ldr	r0, [r4, #20]
   d6734:	2308      	movs	r3, #8
   d6736:	9300      	str	r3, [sp, #0]
   d6738:	f241 0205 	movw	r2, #4101	; 0x1005
   d673c:	446b      	add	r3, sp
   d673e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6742:	6800      	ldr	r0, [r0, #0]
   d6744:	f7fe fe42 	bl	d53cc <sock_setsockopt>
    if (ret < 0) {
   d6748:	2800      	cmp	r0, #0
   d674a:	db08      	blt.n	d675e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d674c:	6960      	ldr	r0, [r4, #20]
   d674e:	2300      	movs	r3, #0
   d6750:	4632      	mov	r2, r6
   d6752:	4629      	mov	r1, r5
   d6754:	6800      	ldr	r0, [r0, #0]
   d6756:	f7fe fe59 	bl	d540c <sock_send>
    if (ret < 0) {
   d675a:	2800      	cmp	r0, #0
   d675c:	da04      	bge.n	d6768 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d675e:	f7fe ffe1 	bl	d5724 <__errno>
   d6762:	6803      	ldr	r3, [r0, #0]
   d6764:	6063      	str	r3, [r4, #4]
   d6766:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6768:	b004      	add	sp, #16
   d676a:	bd70      	pop	{r4, r5, r6, pc}

000d676c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d676c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d676e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6770:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6772:	689b      	ldr	r3, [r3, #8]
   d6774:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6776:	68a3      	ldr	r3, [r4, #8]
   d6778:	3b01      	subs	r3, #1
   d677a:	60a3      	str	r3, [r4, #8]
   d677c:	b92b      	cbnz	r3, d678a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d677e:	6823      	ldr	r3, [r4, #0]
   d6780:	4620      	mov	r0, r4
   d6782:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6788:	4718      	bx	r3
   d678a:	bd10      	pop	{r4, pc}

000d678c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d678c:	b570      	push	{r4, r5, r6, lr}
   d678e:	4604      	mov	r4, r0
   d6790:	694d      	ldr	r5, [r1, #20]
   d6792:	4b05      	ldr	r3, [pc, #20]	; (d67a8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6794:	f844 3b04 	str.w	r3, [r4], #4
   d6798:	358c      	adds	r5, #140	; 0x8c
   d679a:	4606      	mov	r6, r0
   d679c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d679e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67a0:	682b      	ldr	r3, [r5, #0]
   d67a2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d67a4:	4630      	mov	r0, r6
   d67a6:	bd70      	pop	{r4, r5, r6, pc}
   d67a8:	000d868c 	.word	0x000d868c

000d67ac <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d67ac:	b510      	push	{r4, lr}
   d67ae:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d67b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d67b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d67b8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d67ba:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d67bc:	d005      	beq.n	d67ca <_ZN9TCPClient4peekEv+0x1e>
   d67be:	6962      	ldr	r2, [r4, #20]
   d67c0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d67c4:	4413      	add	r3, r2
   d67c6:	7918      	ldrb	r0, [r3, #4]
   d67c8:	bd10      	pop	{r4, pc}
   d67ca:	6803      	ldr	r3, [r0, #0]
   d67cc:	691b      	ldr	r3, [r3, #16]
   d67ce:	4798      	blx	r3
   d67d0:	2800      	cmp	r0, #0
   d67d2:	d1f4      	bne.n	d67be <_ZN9TCPClient4peekEv+0x12>
   d67d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d67d8:	bd10      	pop	{r4, pc}

000d67da <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d67da:	b510      	push	{r4, lr}
   d67dc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d67de:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d67e2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d67e6:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d67e8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d67ea:	d008      	beq.n	d67fe <_ZN9TCPClient4readEv+0x24>
   d67ec:	6962      	ldr	r2, [r4, #20]
   d67ee:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d67f2:	1c59      	adds	r1, r3, #1
   d67f4:	4413      	add	r3, r2
   d67f6:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d67fa:	7918      	ldrb	r0, [r3, #4]
   d67fc:	bd10      	pop	{r4, pc}
   d67fe:	6803      	ldr	r3, [r0, #0]
   d6800:	691b      	ldr	r3, [r3, #16]
   d6802:	4798      	blx	r3
   d6804:	2800      	cmp	r0, #0
   d6806:	d1f1      	bne.n	d67ec <_ZN9TCPClient4readEv+0x12>
   d6808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d680c:	bd10      	pop	{r4, pc}

000d680e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6810:	6943      	ldr	r3, [r0, #20]
   d6812:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6814:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6818:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d681c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d681e:	4605      	mov	r5, r0
   d6820:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6822:	d106      	bne.n	d6832 <_ZN9TCPClient4readEPhj+0x24>
   d6824:	6803      	ldr	r3, [r0, #0]
   d6826:	691b      	ldr	r3, [r3, #16]
   d6828:	4798      	blx	r3
   d682a:	b910      	cbnz	r0, d6832 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d682c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d6830:	e014      	b.n	d685c <_ZN9TCPClient4readEPhj+0x4e>
   d6832:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6834:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6838:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d683c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d683e:	42bc      	cmp	r4, r7
   d6840:	bf28      	it	cs
   d6842:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6844:	4419      	add	r1, r3
   d6846:	4622      	mov	r2, r4
   d6848:	3104      	adds	r1, #4
   d684a:	4630      	mov	r0, r6
   d684c:	f001 fc22 	bl	d8094 <memcpy>
   d6850:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6852:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6856:	4423      	add	r3, r4
   d6858:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d685c:	4620      	mov	r0, r4
   d685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6860 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6860:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6862:	2300      	movs	r3, #0
   d6864:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6868:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d686a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d686e:	4770      	bx	lr

000d6870 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6874:	4698      	mov	r8, r3
    stop();
   d6876:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6878:	460d      	mov	r5, r1
   d687a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d687e:	4606      	mov	r6, r0
   d6880:	4617      	mov	r7, r2
    stop();
   d6882:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6884:	7d2b      	ldrb	r3, [r5, #20]
   d6886:	6974      	ldr	r4, [r6, #20]
   d6888:	2b04      	cmp	r3, #4
   d688a:	bf0c      	ite	eq
   d688c:	2002      	moveq	r0, #2
   d688e:	200a      	movne	r0, #10
   d6890:	2206      	movs	r2, #6
   d6892:	2101      	movs	r1, #1
   d6894:	f7fe fdc2 	bl	d541c <sock_socket>
   d6898:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d689a:	6973      	ldr	r3, [r6, #20]
   d689c:	681c      	ldr	r4, [r3, #0]
   d689e:	2c00      	cmp	r4, #0
   d68a0:	db5b      	blt.n	d695a <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d68a2:	4630      	mov	r0, r6
   d68a4:	f7ff ffdc 	bl	d6860 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d68a8:	f1b8 0f00 	cmp.w	r8, #0
   d68ac:	d017      	beq.n	d68de <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d68ae:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d68b0:	a903      	add	r1, sp, #12
   d68b2:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d68b6:	9303      	str	r3, [sp, #12]
   d68b8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d68bc:	f7fe fd56 	bl	d536c <if_index_to_name>
   d68c0:	2800      	cmp	r0, #0
   d68c2:	db49      	blt.n	d6958 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d68c4:	6970      	ldr	r0, [r6, #20]
   d68c6:	2306      	movs	r3, #6
   d68c8:	9300      	str	r3, [sp, #0]
   d68ca:	f241 020b 	movw	r2, #4107	; 0x100b
   d68ce:	ab03      	add	r3, sp, #12
   d68d0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d68d4:	6800      	ldr	r0, [r0, #0]
   d68d6:	f7fe fd79 	bl	d53cc <sock_setsockopt>
   d68da:	2800      	cmp	r0, #0
   d68dc:	db3c      	blt.n	d6958 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d68de:	241c      	movs	r4, #28
   d68e0:	4622      	mov	r2, r4
   d68e2:	2100      	movs	r1, #0
   d68e4:	a803      	add	r0, sp, #12
   d68e6:	f001 fbe0 	bl	d80aa <memset>
    if (ip.version() == 4) {
   d68ea:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d68ec:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d68f0:	2b04      	cmp	r3, #4
   d68f2:	d10c      	bne.n	d690e <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d68f4:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d68f6:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d68f8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d68fc:	f7fe fd4e 	bl	d539c <inet_htons>
   d6900:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6904:	6868      	ldr	r0, [r5, #4]
   d6906:	f7fe fd41 	bl	d538c <inet_htonl>
   d690a:	9004      	str	r0, [sp, #16]
   d690c:	e013      	b.n	d6936 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d690e:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6910:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6912:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6916:	f7fe fd41 	bl	d539c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d691a:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d691c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6920:	1d2b      	adds	r3, r5, #4
   d6922:	f105 0714 	add.w	r7, r5, #20
   d6926:	6818      	ldr	r0, [r3, #0]
   d6928:	6859      	ldr	r1, [r3, #4]
   d692a:	4622      	mov	r2, r4
   d692c:	c203      	stmia	r2!, {r0, r1}
   d692e:	3308      	adds	r3, #8
   d6930:	42bb      	cmp	r3, r7
   d6932:	4614      	mov	r4, r2
   d6934:	d1f7      	bne.n	d6926 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d6936:	6973      	ldr	r3, [r6, #20]
   d6938:	221c      	movs	r2, #28
   d693a:	a903      	add	r1, sp, #12
   d693c:	6818      	ldr	r0, [r3, #0]
   d693e:	f7fe fd55 	bl	d53ec <sock_connect>
   d6942:	2800      	cmp	r0, #0
   d6944:	db08      	blt.n	d6958 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d6946:	1d2c      	adds	r4, r5, #4
   d6948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d694a:	6976      	ldr	r6, [r6, #20]
   d694c:	368c      	adds	r6, #140	; 0x8c
   d694e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6950:	6823      	ldr	r3, [r4, #0]
   d6952:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d6954:	2401      	movs	r4, #1
   d6956:	e004      	b.n	d6962 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d6958:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d695a:	6833      	ldr	r3, [r6, #0]
   d695c:	4630      	mov	r0, r6
   d695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6960:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d6962:	4620      	mov	r0, r4
   d6964:	b00a      	add	sp, #40	; 0x28
   d6966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d696a <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d696a:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d696c:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d696e:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6970:	6818      	ldr	r0, [r3, #0]
   d6972:	2800      	cmp	r0, #0
   d6974:	db01      	blt.n	d697a <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6976:	f7fe fd31 	bl	d53dc <sock_close>
   d697a:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d697c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6980:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6982:	6960      	ldr	r0, [r4, #20]
   d6984:	2211      	movs	r2, #17
   d6986:	2100      	movs	r1, #0
   d6988:	308c      	adds	r0, #140	; 0x8c
   d698a:	f001 fb8e 	bl	d80aa <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d698e:	4620      	mov	r0, r4
}
   d6990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6994:	f7ff bf64 	b.w	d6860 <_ZN9TCPClient12flush_bufferEv>

000d6998 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6998:	b530      	push	{r4, r5, lr}
   d699a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d699c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d69a0:	b08b      	sub	sp, #44	; 0x2c
   d69a2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d69a4:	b11b      	cbz	r3, d69ae <_ZN9TCPClient9availableEv+0x16>
   d69a6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d69aa:	429a      	cmp	r2, r3
   d69ac:	d040      	beq.n	d6a30 <_ZN9TCPClient9availableEv+0x98>
   d69ae:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d69b0:	6818      	ldr	r0, [r3, #0]
   d69b2:	2800      	cmp	r0, #0
   d69b4:	db3f      	blt.n	d6a36 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d69b6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d69ba:	2d7f      	cmp	r5, #127	; 0x7f
   d69bc:	d83b      	bhi.n	d6a36 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d69be:	1d19      	adds	r1, r3, #4
   d69c0:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d69c4:	2308      	movs	r3, #8
   d69c6:	4429      	add	r1, r5
   d69c8:	f7fe fd18 	bl	d53fc <sock_recv>
            if (ret > 0) {
   d69cc:	2800      	cmp	r0, #0
   d69ce:	dd0c      	ble.n	d69ea <_ZN9TCPClient9availableEv+0x52>
   d69d0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d69d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d69d6:	b90a      	cbnz	r2, d69dc <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d69d8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d69dc:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d69de:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d69e2:	4418      	add	r0, r3
   d69e4:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d69e8:	e025      	b.n	d6a36 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d69ea:	f7fe fe9b 	bl	d5724 <__errno>
   d69ee:	6803      	ldr	r3, [r0, #0]
   d69f0:	2b0b      	cmp	r3, #11
   d69f2:	d020      	beq.n	d6a36 <_ZN9TCPClient9availableEv+0x9e>
   d69f4:	f7fe fe96 	bl	d5724 <__errno>
   d69f8:	6803      	ldr	r3, [r0, #0]
   d69fa:	2b0b      	cmp	r3, #11
   d69fc:	d01b      	beq.n	d6a36 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d69fe:	2320      	movs	r3, #32
   d6a00:	2500      	movs	r5, #0
   d6a02:	9302      	str	r3, [sp, #8]
   d6a04:	9503      	str	r5, [sp, #12]
   d6a06:	f7fe fe8d 	bl	d5724 <__errno>
   d6a0a:	6803      	ldr	r3, [r0, #0]
   d6a0c:	9301      	str	r3, [sp, #4]
   d6a0e:	4b0e      	ldr	r3, [pc, #56]	; (d6a48 <_ZN9TCPClient9availableEv+0xb0>)
   d6a10:	9300      	str	r3, [sp, #0]
   d6a12:	aa02      	add	r2, sp, #8
   d6a14:	462b      	mov	r3, r5
   d6a16:	490d      	ldr	r1, [pc, #52]	; (d6a4c <_ZN9TCPClient9availableEv+0xb4>)
   d6a18:	2032      	movs	r0, #50	; 0x32
   d6a1a:	f7fe fdaf 	bl	d557c <log_message>
                    sock_close(d_->sock);
   d6a1e:	6963      	ldr	r3, [r4, #20]
   d6a20:	6818      	ldr	r0, [r3, #0]
   d6a22:	f7fe fcdb 	bl	d53dc <sock_close>
   d6a26:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6a2c:	601a      	str	r2, [r3, #0]
   d6a2e:	e002      	b.n	d6a36 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6a30:	f7ff ff16 	bl	d6860 <_ZN9TCPClient12flush_bufferEv>
   d6a34:	e7bb      	b.n	d69ae <_ZN9TCPClient9availableEv+0x16>
   d6a36:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6a38:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6a3c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6a40:	1a18      	subs	r0, r3, r0
}
   d6a42:	b00b      	add	sp, #44	; 0x2c
   d6a44:	bd30      	pop	{r4, r5, pc}
   d6a46:	bf00      	nop
   d6a48:	000d8867 	.word	0x000d8867
   d6a4c:	000d8860 	.word	0x000d8860

000d6a50 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6a50:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6a52:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6a54:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6a56:	6001      	str	r1, [r0, #0]
   d6a58:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6a5c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6a60:	3088      	adds	r0, #136	; 0x88
   d6a62:	f7ff fa5f 	bl	d5f24 <_ZN9IPAddressC1Ev>
}
   d6a66:	4620      	mov	r0, r4
   d6a68:	bd10      	pop	{r4, pc}
	...

000d6a6c <_ZN9TCPClientC1Ei>:
   d6a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6a70:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a72:	2300      	movs	r3, #0
   d6a74:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6a76:	4a14      	ldr	r2, [pc, #80]	; (d6ac8 <_ZN9TCPClientC1Ei+0x5c>)
   d6a78:	6043      	str	r3, [r0, #4]
   d6a7a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6a7c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6a7e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6a80:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6a82:	20a0      	movs	r0, #160	; 0xa0
   d6a84:	460e      	mov	r6, r1
   d6a86:	f7fd fb08 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6a8a:	4605      	mov	r5, r0
   d6a8c:	b110      	cbz	r0, d6a94 <_ZN9TCPClientC1Ei+0x28>
   d6a8e:	4631      	mov	r1, r6
   d6a90:	f7ff ffde 	bl	d6a50 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6a94:	2014      	movs	r0, #20
   d6a96:	f7fd fb00 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6a9a:	4603      	mov	r3, r0
   d6a9c:	b128      	cbz	r0, d6aaa <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6a9e:	2201      	movs	r2, #1
   d6aa0:	6042      	str	r2, [r0, #4]
   d6aa2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6aa4:	4a09      	ldr	r2, [pc, #36]	; (d6acc <_ZN9TCPClientC1Ei+0x60>)
   d6aa6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6aa8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6aaa:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6aac:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6aae:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6ab0:	b128      	cbz	r0, d6abe <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6ab2:	6843      	ldr	r3, [r0, #4]
   d6ab4:	3b01      	subs	r3, #1
   d6ab6:	6043      	str	r3, [r0, #4]
   d6ab8:	b90b      	cbnz	r3, d6abe <_ZN9TCPClientC1Ei+0x52>
   d6aba:	f7ff fe57 	bl	d676c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6abe:	4620      	mov	r0, r4
   d6ac0:	f7ff fece 	bl	d6860 <_ZN9TCPClient12flush_bufferEv>
}
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	bd70      	pop	{r4, r5, r6, pc}
   d6ac8:	000d881c 	.word	0x000d881c
   d6acc:	000d8800 	.word	0x000d8800

000d6ad0 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6ad0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6ad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6ad6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6ad8:	f7ff ffc8 	bl	d6a6c <_ZN9TCPClientC1Ei>
}
   d6adc:	4620      	mov	r0, r4
   d6ade:	bd10      	pop	{r4, pc}

000d6ae0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6ae0:	b510      	push	{r4, lr}
   d6ae2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6ae4:	6800      	ldr	r0, [r0, #0]
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	db01      	blt.n	d6aee <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6aea:	f7fe fc77 	bl	d53dc <sock_close>
    }
}
   d6aee:	4620      	mov	r0, r4
   d6af0:	bd10      	pop	{r4, pc}

000d6af2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6af2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6af4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6af6:	4620      	mov	r0, r4
   d6af8:	f7ff fff2 	bl	d6ae0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6afc:	b124      	cbz	r4, d6b08 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6afe:	4620      	mov	r0, r4
   d6b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6b04:	f7fd bacb 	b.w	d409e <_ZdlPv>
   d6b08:	bd10      	pop	{r4, pc}
	...

000d6b0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6b0c:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6b12:	601a      	str	r2, [r3, #0]
   d6b14:	4770      	bx	lr
   d6b16:	bf00      	nop
   d6b18:	2003e164 	.word	0x2003e164
   d6b1c:	2003e5cc 	.word	0x2003e5cc

000d6b20 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6b20:	4770      	bx	lr

000d6b22 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b22:	7441      	strb	r1, [r0, #17]
   d6b24:	4770      	bx	lr

000d6b26 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6b26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6b28:	7c00      	ldrb	r0, [r0, #16]
   d6b2a:	f7fe fce7 	bl	d54fc <HAL_USART_Available_Data_For_Write>
}
   d6b2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b32:	bd08      	pop	{r3, pc}

000d6b34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6b34:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6b36:	7c00      	ldrb	r0, [r0, #16]
   d6b38:	f7fe fcb8 	bl	d54ac <HAL_USART_Available_Data>
}
   d6b3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b40:	bd08      	pop	{r3, pc}

000d6b42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6b42:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6b44:	7c00      	ldrb	r0, [r0, #16]
   d6b46:	f7fe fcc1 	bl	d54cc <HAL_USART_Peek_Data>
}
   d6b4a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b4e:	bf28      	it	cs
   d6b50:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b54:	bd08      	pop	{r3, pc}

000d6b56 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6b56:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6b58:	7c00      	ldrb	r0, [r0, #16]
   d6b5a:	f7fe fcaf 	bl	d54bc <HAL_USART_Read_Data>
}
   d6b5e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b62:	bf28      	it	cs
   d6b64:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b68:	bd08      	pop	{r3, pc}

000d6b6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6b6a:	7c00      	ldrb	r0, [r0, #16]
   d6b6c:	f7fe bcb6 	b.w	d54dc <HAL_USART_Flush_Data>

000d6b70 <_ZN11USARTSerialD0Ev>:
   d6b70:	b510      	push	{r4, lr}
   d6b72:	2114      	movs	r1, #20
   d6b74:	4604      	mov	r4, r0
   d6b76:	f000 fa46 	bl	d7006 <_ZdlPvj>
   d6b7a:	4620      	mov	r0, r4
   d6b7c:	bd10      	pop	{r4, pc}

000d6b7e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6b7e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b80:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6b82:	4604      	mov	r4, r0
   d6b84:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b86:	b925      	cbnz	r5, d6b92 <_ZN11USARTSerial5writeEh+0x14>
   d6b88:	7c00      	ldrb	r0, [r0, #16]
   d6b8a:	f7fe fcb7 	bl	d54fc <HAL_USART_Available_Data_For_Write>
   d6b8e:	2800      	cmp	r0, #0
   d6b90:	dd05      	ble.n	d6b9e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b92:	4631      	mov	r1, r6
   d6b94:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b9a:	f7fe bc7f 	b.w	d549c <HAL_USART_Write_Data>
  }
  return 0;
}
   d6b9e:	4628      	mov	r0, r5
   d6ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6ba4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6ba4:	b510      	push	{r4, lr}
   d6ba6:	4604      	mov	r4, r0
   d6ba8:	4608      	mov	r0, r1
   d6baa:	4611      	mov	r1, r2
   d6bac:	2200      	movs	r2, #0
   d6bae:	6062      	str	r2, [r4, #4]
   d6bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6bb4:	60a2      	str	r2, [r4, #8]
   d6bb6:	4a05      	ldr	r2, [pc, #20]	; (d6bcc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6bb8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6bba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6bbc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6bbe:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6bc0:	461a      	mov	r2, r3
   d6bc2:	f7fe fc63 	bl	d548c <HAL_USART_Init>
}
   d6bc6:	4620      	mov	r0, r4
   d6bc8:	bd10      	pop	{r4, pc}
   d6bca:	bf00      	nop
   d6bcc:	000d88a8 	.word	0x000d88a8

000d6bd0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6bd0:	7c00      	ldrb	r0, [r0, #16]
   d6bd2:	f7fe bc8b 	b.w	d54ec <HAL_USART_Is_Enabled>
	...

000d6bd8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6bd8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6bda:	4d0c      	ldr	r5, [pc, #48]	; (d6c0c <_Z22__fetch_global_Serial1v+0x34>)
   d6bdc:	6829      	ldr	r1, [r5, #0]
   d6bde:	f011 0401 	ands.w	r4, r1, #1
   d6be2:	d111      	bne.n	d6c08 <_Z22__fetch_global_Serial1v+0x30>
   d6be4:	4628      	mov	r0, r5
   d6be6:	f7fd fa5e 	bl	d40a6 <__cxa_guard_acquire>
   d6bea:	b168      	cbz	r0, d6c08 <_Z22__fetch_global_Serial1v+0x30>
   d6bec:	4a08      	ldr	r2, [pc, #32]	; (d6c10 <_Z22__fetch_global_Serial1v+0x38>)
   d6bee:	4b09      	ldr	r3, [pc, #36]	; (d6c14 <_Z22__fetch_global_Serial1v+0x3c>)
   d6bf0:	4809      	ldr	r0, [pc, #36]	; (d6c18 <_Z22__fetch_global_Serial1v+0x40>)
   d6bf2:	4621      	mov	r1, r4
   d6bf4:	f7ff ffd6 	bl	d6ba4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6bf8:	4628      	mov	r0, r5
   d6bfa:	f7fd fa59 	bl	d40b0 <__cxa_guard_release>
   d6bfe:	4a07      	ldr	r2, [pc, #28]	; (d6c1c <_Z22__fetch_global_Serial1v+0x44>)
   d6c00:	4907      	ldr	r1, [pc, #28]	; (d6c20 <_Z22__fetch_global_Serial1v+0x48>)
   d6c02:	4805      	ldr	r0, [pc, #20]	; (d6c18 <_Z22__fetch_global_Serial1v+0x40>)
   d6c04:	f000 f9fa 	bl	d6ffc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6c08:	4803      	ldr	r0, [pc, #12]	; (d6c18 <_Z22__fetch_global_Serial1v+0x40>)
   d6c0a:	bd38      	pop	{r3, r4, r5, pc}
   d6c0c:	2003e668 	.word	0x2003e668
   d6c10:	2003e66c 	.word	0x2003e66c
   d6c14:	2003e5e4 	.word	0x2003e5e4
   d6c18:	2003e5d0 	.word	0x2003e5d0
   d6c1c:	2003e1cc 	.word	0x2003e1cc
   d6c20:	000d6b21 	.word	0x000d6b21

000d6c24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c24:	7441      	strb	r1, [r0, #17]
   d6c26:	4770      	bx	lr

000d6c28 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6c28:	4770      	bx	lr

000d6c2a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6c2a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6c2c:	2100      	movs	r1, #0
   d6c2e:	7c00      	ldrb	r0, [r0, #16]
   d6c30:	f7fe fc8c 	bl	d554c <HAL_USB_USART_Receive_Data>
}
   d6c34:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c38:	bf28      	it	cs
   d6c3a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6c3e:	bd08      	pop	{r3, pc}

000d6c40 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6c40:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6c42:	2101      	movs	r1, #1
   d6c44:	7c00      	ldrb	r0, [r0, #16]
   d6c46:	f7fe fc81 	bl	d554c <HAL_USB_USART_Receive_Data>
}
   d6c4a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c4e:	bf28      	it	cs
   d6c50:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6c54:	bd08      	pop	{r3, pc}

000d6c56 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6c56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6c58:	7c00      	ldrb	r0, [r0, #16]
   d6c5a:	f7fe fc6f 	bl	d553c <HAL_USB_USART_Available_Data_For_Write>
}
   d6c5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c62:	bd08      	pop	{r3, pc}

000d6c64 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6c64:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6c66:	7c00      	ldrb	r0, [r0, #16]
   d6c68:	f7fe fc60 	bl	d552c <HAL_USB_USART_Available_Data>
}
   d6c6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c70:	bd08      	pop	{r3, pc}

000d6c72 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6c72:	7c00      	ldrb	r0, [r0, #16]
   d6c74:	f7fe bc7a 	b.w	d556c <HAL_USB_USART_Flush_Data>

000d6c78 <_ZN9USBSerialD0Ev>:
   d6c78:	b510      	push	{r4, lr}
   d6c7a:	2114      	movs	r1, #20
   d6c7c:	4604      	mov	r4, r0
   d6c7e:	f000 f9c2 	bl	d7006 <_ZdlPvj>
   d6c82:	4620      	mov	r0, r4
   d6c84:	bd10      	pop	{r4, pc}

000d6c86 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c86:	b538      	push	{r3, r4, r5, lr}
   d6c88:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c8a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c8c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c8e:	f7fe fc55 	bl	d553c <HAL_USB_USART_Available_Data_For_Write>
   d6c92:	2800      	cmp	r0, #0
   d6c94:	dc01      	bgt.n	d6c9a <_ZN9USBSerial5writeEh+0x14>
   d6c96:	7c60      	ldrb	r0, [r4, #17]
   d6c98:	b128      	cbz	r0, d6ca6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6c9a:	4629      	mov	r1, r5
   d6c9c:	7c20      	ldrb	r0, [r4, #16]
   d6c9e:	f7fe fc5d 	bl	d555c <HAL_USB_USART_Send_Data>
   d6ca2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6ca6:	bd38      	pop	{r3, r4, r5, pc}

000d6ca8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ca8:	b510      	push	{r4, lr}
   d6caa:	4604      	mov	r4, r0
   d6cac:	2300      	movs	r3, #0
   d6cae:	6063      	str	r3, [r4, #4]
   d6cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6cb4:	60a3      	str	r3, [r4, #8]
   d6cb6:	4b05      	ldr	r3, [pc, #20]	; (d6ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6cb8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6cba:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6cbc:	4608      	mov	r0, r1
{
  _serial = serial;
   d6cbe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6cc0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6cc2:	4611      	mov	r1, r2
   d6cc4:	f7fe fc22 	bl	d550c <HAL_USB_USART_Init>
}
   d6cc8:	4620      	mov	r0, r4
   d6cca:	bd10      	pop	{r4, pc}
   d6ccc:	000d88d8 	.word	0x000d88d8

000d6cd0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6cd0:	2200      	movs	r2, #0
   d6cd2:	7c00      	ldrb	r0, [r0, #16]
   d6cd4:	f7fe bc22 	b.w	d551c <HAL_USB_USART_Begin>

000d6cd8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6cd8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6cda:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6cdc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6cde:	2100      	movs	r1, #0
   d6ce0:	f001 f9e3 	bl	d80aa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	bd10      	pop	{r4, pc}

000d6ce8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6ce8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6cea:	4d0e      	ldr	r5, [pc, #56]	; (d6d24 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6cec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6cee:	a801      	add	r0, sp, #4
   d6cf0:	f7ff fff2 	bl	d6cd8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6cf4:	6829      	ldr	r1, [r5, #0]
   d6cf6:	f011 0401 	ands.w	r4, r1, #1
   d6cfa:	d110      	bne.n	d6d1e <_Z16_fetch_usbserialv+0x36>
   d6cfc:	4628      	mov	r0, r5
   d6cfe:	f7fd f9d2 	bl	d40a6 <__cxa_guard_acquire>
   d6d02:	b160      	cbz	r0, d6d1e <_Z16_fetch_usbserialv+0x36>
   d6d04:	aa01      	add	r2, sp, #4
   d6d06:	4621      	mov	r1, r4
   d6d08:	4807      	ldr	r0, [pc, #28]	; (d6d28 <_Z16_fetch_usbserialv+0x40>)
   d6d0a:	f7ff ffcd 	bl	d6ca8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6d0e:	4628      	mov	r0, r5
   d6d10:	f7fd f9ce 	bl	d40b0 <__cxa_guard_release>
   d6d14:	4a05      	ldr	r2, [pc, #20]	; (d6d2c <_Z16_fetch_usbserialv+0x44>)
   d6d16:	4906      	ldr	r1, [pc, #24]	; (d6d30 <_Z16_fetch_usbserialv+0x48>)
   d6d18:	4803      	ldr	r0, [pc, #12]	; (d6d28 <_Z16_fetch_usbserialv+0x40>)
   d6d1a:	f000 f96f 	bl	d6ffc <__aeabi_atexit>
	return _usbserial;
}
   d6d1e:	4802      	ldr	r0, [pc, #8]	; (d6d28 <_Z16_fetch_usbserialv+0x40>)
   d6d20:	b007      	add	sp, #28
   d6d22:	bd30      	pop	{r4, r5, pc}
   d6d24:	2003e6f0 	.word	0x2003e6f0
   d6d28:	2003e6f4 	.word	0x2003e6f4
   d6d2c:	2003e1cc 	.word	0x2003e1cc
   d6d30:	000d6c29 	.word	0x000d6c29

000d6d34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6d34:	2200      	movs	r2, #0
   d6d36:	4611      	mov	r1, r2
   d6d38:	6840      	ldr	r0, [r0, #4]
   d6d3a:	f7fe bc8b 	b.w	d5654 <network_ready>

000d6d3e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6d3e:	2200      	movs	r2, #0
   d6d40:	4611      	mov	r1, r2
   d6d42:	6840      	ldr	r0, [r0, #4]
   d6d44:	f7fe bca6 	b.w	d5694 <network_listening>

000d6d48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6d48:	2200      	movs	r2, #0
   d6d4a:	4611      	mov	r1, r2
   d6d4c:	6840      	ldr	r0, [r0, #4]
   d6d4e:	f7fe bcb1 	b.w	d56b4 <network_get_listen_timeout>

000d6d52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6d52:	2200      	movs	r2, #0
   d6d54:	6840      	ldr	r0, [r0, #4]
   d6d56:	f7fe bca5 	b.w	d56a4 <network_set_listen_timeout>

000d6d5a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d5a:	2200      	movs	r2, #0
   d6d5c:	f081 0101 	eor.w	r1, r1, #1
   d6d60:	6840      	ldr	r0, [r0, #4]
   d6d62:	f7fe bc8f 	b.w	d5684 <network_listen>

000d6d66 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6d66:	2300      	movs	r3, #0
   d6d68:	461a      	mov	r2, r3
   d6d6a:	4619      	mov	r1, r3
   d6d6c:	6840      	ldr	r0, [r0, #4]
   d6d6e:	f7fe bc81 	b.w	d5674 <network_off>

000d6d72 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6d72:	2300      	movs	r3, #0
   d6d74:	461a      	mov	r2, r3
   d6d76:	4619      	mov	r1, r3
   d6d78:	6840      	ldr	r0, [r0, #4]
   d6d7a:	f7fe bc73 	b.w	d5664 <network_on>

000d6d7e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d7e:	2200      	movs	r2, #0
   d6d80:	4611      	mov	r1, r2
   d6d82:	6840      	ldr	r0, [r0, #4]
   d6d84:	f7fe bc56 	b.w	d5634 <network_connecting>

000d6d88 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d88:	2200      	movs	r2, #0
   d6d8a:	2102      	movs	r1, #2
   d6d8c:	6840      	ldr	r0, [r0, #4]
   d6d8e:	f7fe bc59 	b.w	d5644 <network_disconnect>

000d6d92 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d92:	2300      	movs	r3, #0
   d6d94:	461a      	mov	r2, r3
   d6d96:	6840      	ldr	r0, [r0, #4]
   d6d98:	f7fe bc44 	b.w	d5624 <network_connect>

000d6d9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6d9c:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6d9e:	2204      	movs	r2, #4
   d6da0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6da2:	4a02      	ldr	r2, [pc, #8]	; (d6dac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6da4:	601a      	str	r2, [r3, #0]
   d6da6:	4770      	bx	lr
   d6da8:	2003e708 	.word	0x2003e708
   d6dac:	000d8908 	.word	0x000d8908

000d6db0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6db0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6db2:	4b0c      	ldr	r3, [pc, #48]	; (d6de4 <serialEventRun+0x34>)
   d6db4:	b133      	cbz	r3, d6dc4 <serialEventRun+0x14>
   d6db6:	f7ff ff97 	bl	d6ce8 <_Z16_fetch_usbserialv>
   d6dba:	6803      	ldr	r3, [r0, #0]
   d6dbc:	691b      	ldr	r3, [r3, #16]
   d6dbe:	4798      	blx	r3
   d6dc0:	2800      	cmp	r0, #0
   d6dc2:	dc09      	bgt.n	d6dd8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6dc4:	4b08      	ldr	r3, [pc, #32]	; (d6de8 <serialEventRun+0x38>)
   d6dc6:	b163      	cbz	r3, d6de2 <serialEventRun+0x32>
   d6dc8:	f7ff ff06 	bl	d6bd8 <_Z22__fetch_global_Serial1v>
   d6dcc:	6803      	ldr	r3, [r0, #0]
   d6dce:	691b      	ldr	r3, [r3, #16]
   d6dd0:	4798      	blx	r3
   d6dd2:	2800      	cmp	r0, #0
   d6dd4:	dc03      	bgt.n	d6dde <serialEventRun+0x2e>
   d6dd6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6dd8:	f3af 8000 	nop.w
   d6ddc:	e7f2      	b.n	d6dc4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6dde:	f3af 8000 	nop.w
   d6de2:	bd08      	pop	{r3, pc}
	...

000d6dec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6dec:	b508      	push	{r3, lr}
	serialEventRun();
   d6dee:	f7ff ffdf 	bl	d6db0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6df2:	f7fe fa1b 	bl	d522c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6df6:	4b01      	ldr	r3, [pc, #4]	; (d6dfc <_post_loop+0x10>)
   d6df8:	6018      	str	r0, [r3, #0]
   d6dfa:	bd08      	pop	{r3, pc}
   d6dfc:	2003e714 	.word	0x2003e714

000d6e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6e00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e02:	2300      	movs	r3, #0
   d6e04:	9300      	str	r3, [sp, #0]
   d6e06:	461a      	mov	r2, r3
   d6e08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e0c:	f7fe fbe8 	bl	d55e0 <system_ctrl_set_result>
}
   d6e10:	b003      	add	sp, #12
   d6e12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e18 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6e18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6e1a:	8843      	ldrh	r3, [r0, #2]
   d6e1c:	2b0a      	cmp	r3, #10
   d6e1e:	d008      	beq.n	d6e32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6e20:	2b50      	cmp	r3, #80	; 0x50
   d6e22:	d109      	bne.n	d6e38 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6e24:	4b09      	ldr	r3, [pc, #36]	; (d6e4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6e26:	681b      	ldr	r3, [r3, #0]
   d6e28:	b13b      	cbz	r3, d6e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6e2a:	b003      	add	sp, #12
   d6e2c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6e30:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6e32:	f7ff ffe5 	bl	d6e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6e36:	e006      	b.n	d6e46 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e38:	2300      	movs	r3, #0
   d6e3a:	9300      	str	r3, [sp, #0]
   d6e3c:	461a      	mov	r2, r3
   d6e3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e42:	f7fe fbcd 	bl	d55e0 <system_ctrl_set_result>
        break;
    }
}
   d6e46:	b003      	add	sp, #12
   d6e48:	f85d fb04 	ldr.w	pc, [sp], #4
   d6e4c:	2003e710 	.word	0x2003e710

000d6e50 <module_user_init_hook>:

void module_user_init_hook()
{
   d6e50:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6e52:	f7fe f9e3 	bl	d521c <HAL_RNG_GetRandomNumber>
   d6e56:	4604      	mov	r4, r0
    srand(seed);
   d6e58:	f001 f930 	bl	d80bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6e5c:	4b07      	ldr	r3, [pc, #28]	; (d6e7c <module_user_init_hook+0x2c>)
   d6e5e:	b113      	cbz	r3, d6e66 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6e60:	4620      	mov	r0, r4
   d6e62:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6e66:	2100      	movs	r1, #0
   d6e68:	4804      	ldr	r0, [pc, #16]	; (d6e7c <module_user_init_hook+0x2c>)
   d6e6a:	f7fe fbd3 	bl	d5614 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e6e:	2100      	movs	r1, #0
   d6e70:	4803      	ldr	r0, [pc, #12]	; (d6e80 <module_user_init_hook+0x30>)
}
   d6e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e76:	f7fe bba9 	b.w	d55cc <system_ctrl_set_app_request_handler>
   d6e7a:	bf00      	nop
   d6e7c:	00000000 	.word	0x00000000
   d6e80:	000d6e19 	.word	0x000d6e19

000d6e84 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6e84:	b510      	push	{r4, lr}
   d6e86:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6e88:	480f      	ldr	r0, [pc, #60]	; (d6ec8 <pinAvailable+0x44>)
   d6e8a:	f7ff fb67 	bl	d655c <_ZN8SPIClass9isEnabledEv>
   d6e8e:	b128      	cbz	r0, d6e9c <pinAvailable+0x18>
   d6e90:	f1a4 030b 	sub.w	r3, r4, #11
   d6e94:	2b02      	cmp	r3, #2
   d6e96:	d801      	bhi.n	d6e9c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6e98:	2000      	movs	r0, #0
   d6e9a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6e9c:	f000 f86c 	bl	d6f78 <_Z19__fetch_global_Wirev>
   d6ea0:	f7ff f802 	bl	d5ea8 <_ZN7TwoWire9isEnabledEv>
   d6ea4:	b108      	cbz	r0, d6eaa <pinAvailable+0x26>
   d6ea6:	2c01      	cmp	r4, #1
   d6ea8:	d9f6      	bls.n	d6e98 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6eaa:	f7ff fe95 	bl	d6bd8 <_Z22__fetch_global_Serial1v>
   d6eae:	f7ff fe8f 	bl	d6bd0 <_ZN11USARTSerial9isEnabledEv>
   d6eb2:	b118      	cbz	r0, d6ebc <pinAvailable+0x38>
   d6eb4:	f1a4 0309 	sub.w	r3, r4, #9
   d6eb8:	2b01      	cmp	r3, #1
   d6eba:	d9ed      	bls.n	d6e98 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6ebc:	2c23      	cmp	r4, #35	; 0x23
   d6ebe:	bf8c      	ite	hi
   d6ec0:	2000      	movhi	r0, #0
   d6ec2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6ec4:	bd10      	pop	{r4, pc}
   d6ec6:	bf00      	nop
   d6ec8:	2003e730 	.word	0x2003e730

000d6ecc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ecc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6ece:	b538      	push	{r3, r4, r5, lr}
   d6ed0:	4604      	mov	r4, r0
   d6ed2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ed4:	d80a      	bhi.n	d6eec <pinMode+0x20>
   d6ed6:	29ff      	cmp	r1, #255	; 0xff
   d6ed8:	d008      	beq.n	d6eec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6eda:	f7ff ffd3 	bl	d6e84 <pinAvailable>
   d6ede:	b128      	cbz	r0, d6eec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6ee0:	4629      	mov	r1, r5
   d6ee2:	4620      	mov	r0, r4
}
   d6ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6ee8:	f7fe b9b8 	b.w	d525c <HAL_Pin_Mode>
   d6eec:	bd38      	pop	{r3, r4, r5, pc}

000d6eee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6eee:	b538      	push	{r3, r4, r5, lr}
   d6ef0:	4604      	mov	r4, r0
   d6ef2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6ef4:	f7fe f9ba 	bl	d526c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6ef8:	28ff      	cmp	r0, #255	; 0xff
   d6efa:	d010      	beq.n	d6f1e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6efc:	2806      	cmp	r0, #6
   d6efe:	d804      	bhi.n	d6f0a <digitalWrite+0x1c>
   d6f00:	234d      	movs	r3, #77	; 0x4d
   d6f02:	fa23 f000 	lsr.w	r0, r3, r0
   d6f06:	07c3      	lsls	r3, r0, #31
   d6f08:	d409      	bmi.n	d6f1e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6f0a:	4620      	mov	r0, r4
   d6f0c:	f7ff ffba 	bl	d6e84 <pinAvailable>
   d6f10:	b128      	cbz	r0, d6f1e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6f12:	4629      	mov	r1, r5
   d6f14:	4620      	mov	r0, r4
}
   d6f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6f1a:	f7fe b9af 	b.w	d527c <HAL_GPIO_Write>
   d6f1e:	bd38      	pop	{r3, r4, r5, pc}

000d6f20 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6f20:	b510      	push	{r4, lr}
   d6f22:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6f24:	f7fe f9a2 	bl	d526c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6f28:	3804      	subs	r0, #4
   d6f2a:	b2c0      	uxtb	r0, r0
   d6f2c:	2801      	cmp	r0, #1
   d6f2e:	d908      	bls.n	d6f42 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6f30:	4620      	mov	r0, r4
   d6f32:	f7ff ffa7 	bl	d6e84 <pinAvailable>
   d6f36:	b120      	cbz	r0, d6f42 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6f38:	4620      	mov	r0, r4
}
   d6f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6f3e:	f7fe b9a5 	b.w	d528c <HAL_GPIO_Read>
}
   d6f42:	2000      	movs	r0, #0
   d6f44:	bd10      	pop	{r4, pc}

000d6f46 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6f46:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6f48:	b510      	push	{r4, lr}
   d6f4a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6f4c:	bf9c      	itt	ls
   d6f4e:	340e      	addls	r4, #14
   d6f50:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6f52:	4620      	mov	r0, r4
   d6f54:	f7ff ff96 	bl	d6e84 <pinAvailable>
   d6f58:	b150      	cbz	r0, d6f70 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6f5a:	2103      	movs	r1, #3
   d6f5c:	4620      	mov	r0, r4
   d6f5e:	f7fe f975 	bl	d524c <HAL_Validate_Pin_Function>
   d6f62:	2803      	cmp	r0, #3
   d6f64:	d104      	bne.n	d6f70 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6f66:	4620      	mov	r0, r4
}
   d6f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6f6c:	f7fe b996 	b.w	d529c <HAL_ADC_Read>
}
   d6f70:	2000      	movs	r0, #0
   d6f72:	bd10      	pop	{r4, pc}

000d6f74 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d6f74:	f7fe b99a 	b.w	d52ac <HAL_Pulse_In>

000d6f78 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6f78:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6f7a:	4d0b      	ldr	r5, [pc, #44]	; (d6fa8 <_Z19__fetch_global_Wirev+0x30>)
   d6f7c:	6829      	ldr	r1, [r5, #0]
   d6f7e:	f011 0401 	ands.w	r4, r1, #1
   d6f82:	d10f      	bne.n	d6fa4 <_Z19__fetch_global_Wirev+0x2c>
   d6f84:	4628      	mov	r0, r5
   d6f86:	f7fd f88e 	bl	d40a6 <__cxa_guard_acquire>
   d6f8a:	b158      	cbz	r0, d6fa4 <_Z19__fetch_global_Wirev+0x2c>
   d6f8c:	4621      	mov	r1, r4
   d6f8e:	4807      	ldr	r0, [pc, #28]	; (d6fac <_Z19__fetch_global_Wirev+0x34>)
   d6f90:	f7fe ff58 	bl	d5e44 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6f94:	4628      	mov	r0, r5
   d6f96:	f7fd f88b 	bl	d40b0 <__cxa_guard_release>
   d6f9a:	4a05      	ldr	r2, [pc, #20]	; (d6fb0 <_Z19__fetch_global_Wirev+0x38>)
   d6f9c:	4905      	ldr	r1, [pc, #20]	; (d6fb4 <_Z19__fetch_global_Wirev+0x3c>)
   d6f9e:	4803      	ldr	r0, [pc, #12]	; (d6fac <_Z19__fetch_global_Wirev+0x34>)
   d6fa0:	f000 f82c 	bl	d6ffc <__aeabi_atexit>
	return wire;
}
   d6fa4:	4801      	ldr	r0, [pc, #4]	; (d6fac <_Z19__fetch_global_Wirev+0x34>)
   d6fa6:	bd38      	pop	{r3, r4, r5, pc}
   d6fa8:	2003e718 	.word	0x2003e718
   d6fac:	2003e71c 	.word	0x2003e71c
   d6fb0:	2003e1cc 	.word	0x2003e1cc
   d6fb4:	000d5ded 	.word	0x000d5ded

000d6fb8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6fb8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6fba:	4c0c      	ldr	r4, [pc, #48]	; (d6fec <_GLOBAL__sub_I_SPI+0x34>)
   d6fbc:	4e0c      	ldr	r6, [pc, #48]	; (d6ff0 <_GLOBAL__sub_I_SPI+0x38>)
   d6fbe:	4d0d      	ldr	r5, [pc, #52]	; (d6ff4 <_GLOBAL__sub_I_SPI+0x3c>)
   d6fc0:	2100      	movs	r1, #0
   d6fc2:	4620      	mov	r0, r4
   d6fc4:	f7ff fa22 	bl	d640c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6fc8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6fca:	4c0b      	ldr	r4, [pc, #44]	; (d6ff8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6fcc:	4632      	mov	r2, r6
   d6fce:	4629      	mov	r1, r5
   d6fd0:	f000 f814 	bl	d6ffc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6fd4:	2101      	movs	r1, #1
   d6fd6:	4620      	mov	r0, r4
   d6fd8:	f7ff fa18 	bl	d640c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6fdc:	4632      	mov	r2, r6
   d6fde:	4629      	mov	r1, r5
   d6fe0:	4620      	mov	r0, r4
   d6fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6fe6:	f000 b809 	b.w	d6ffc <__aeabi_atexit>
   d6fea:	bf00      	nop
   d6fec:	2003e730 	.word	0x2003e730
   d6ff0:	2003e1cc 	.word	0x2003e1cc
   d6ff4:	000d63fd 	.word	0x000d63fd
   d6ff8:	2003e740 	.word	0x2003e740

000d6ffc <__aeabi_atexit>:
   d6ffc:	460b      	mov	r3, r1
   d6ffe:	4601      	mov	r1, r0
   d7000:	4618      	mov	r0, r3
   d7002:	f001 b839 	b.w	d8078 <__cxa_atexit>

000d7006 <_ZdlPvj>:
   d7006:	f7fd b84a 	b.w	d409e <_ZdlPv>

000d700a <_ZSt25__throw_bad_function_callv>:
   d700a:	b508      	push	{r3, lr}
   d700c:	f7fe fb7a 	bl	d5704 <abort>

000d7010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7010:	4b24      	ldr	r3, [pc, #144]	; (d70a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7012:	681a      	ldr	r2, [r3, #0]
   d7014:	07d0      	lsls	r0, r2, #31
   d7016:	bf5c      	itt	pl
   d7018:	2201      	movpl	r2, #1
   d701a:	601a      	strpl	r2, [r3, #0]
   d701c:	4b22      	ldr	r3, [pc, #136]	; (d70a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d701e:	681a      	ldr	r2, [r3, #0]
   d7020:	07d1      	lsls	r1, r2, #31
   d7022:	bf5c      	itt	pl
   d7024:	2201      	movpl	r2, #1
   d7026:	601a      	strpl	r2, [r3, #0]
   d7028:	4b20      	ldr	r3, [pc, #128]	; (d70ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d702a:	681a      	ldr	r2, [r3, #0]
   d702c:	07d2      	lsls	r2, r2, #31
   d702e:	bf5c      	itt	pl
   d7030:	2201      	movpl	r2, #1
   d7032:	601a      	strpl	r2, [r3, #0]
   d7034:	4b1e      	ldr	r3, [pc, #120]	; (d70b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7036:	681a      	ldr	r2, [r3, #0]
   d7038:	07d0      	lsls	r0, r2, #31
   d703a:	bf5c      	itt	pl
   d703c:	2201      	movpl	r2, #1
   d703e:	601a      	strpl	r2, [r3, #0]
   d7040:	4b1c      	ldr	r3, [pc, #112]	; (d70b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7042:	681a      	ldr	r2, [r3, #0]
   d7044:	07d1      	lsls	r1, r2, #31
   d7046:	bf5c      	itt	pl
   d7048:	2201      	movpl	r2, #1
   d704a:	601a      	strpl	r2, [r3, #0]
   d704c:	4b1a      	ldr	r3, [pc, #104]	; (d70b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d704e:	681a      	ldr	r2, [r3, #0]
   d7050:	07d2      	lsls	r2, r2, #31
   d7052:	bf5c      	itt	pl
   d7054:	2201      	movpl	r2, #1
   d7056:	601a      	strpl	r2, [r3, #0]
   d7058:	4b18      	ldr	r3, [pc, #96]	; (d70bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d705a:	681a      	ldr	r2, [r3, #0]
   d705c:	07d0      	lsls	r0, r2, #31
   d705e:	bf5c      	itt	pl
   d7060:	2201      	movpl	r2, #1
   d7062:	601a      	strpl	r2, [r3, #0]
   d7064:	4b16      	ldr	r3, [pc, #88]	; (d70c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7066:	681a      	ldr	r2, [r3, #0]
   d7068:	07d1      	lsls	r1, r2, #31
   d706a:	bf5c      	itt	pl
   d706c:	2201      	movpl	r2, #1
   d706e:	601a      	strpl	r2, [r3, #0]
   d7070:	4b14      	ldr	r3, [pc, #80]	; (d70c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7072:	681a      	ldr	r2, [r3, #0]
   d7074:	07d2      	lsls	r2, r2, #31
   d7076:	bf5c      	itt	pl
   d7078:	2201      	movpl	r2, #1
   d707a:	601a      	strpl	r2, [r3, #0]
   d707c:	4b12      	ldr	r3, [pc, #72]	; (d70c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d707e:	681a      	ldr	r2, [r3, #0]
   d7080:	07d0      	lsls	r0, r2, #31
   d7082:	bf5c      	itt	pl
   d7084:	2201      	movpl	r2, #1
   d7086:	601a      	strpl	r2, [r3, #0]
   d7088:	4b10      	ldr	r3, [pc, #64]	; (d70cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d708a:	681a      	ldr	r2, [r3, #0]
   d708c:	07d1      	lsls	r1, r2, #31
   d708e:	bf5c      	itt	pl
   d7090:	2201      	movpl	r2, #1
   d7092:	601a      	strpl	r2, [r3, #0]
   d7094:	4b0e      	ldr	r3, [pc, #56]	; (d70d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7096:	681a      	ldr	r2, [r3, #0]
   d7098:	07d2      	lsls	r2, r2, #31
   d709a:	bf5c      	itt	pl
   d709c:	2201      	movpl	r2, #1
   d709e:	601a      	strpl	r2, [r3, #0]
   d70a0:	4770      	bx	lr
   d70a2:	bf00      	nop
   d70a4:	2003e77c 	.word	0x2003e77c
   d70a8:	2003e778 	.word	0x2003e778
   d70ac:	2003e774 	.word	0x2003e774
   d70b0:	2003e770 	.word	0x2003e770
   d70b4:	2003e76c 	.word	0x2003e76c
   d70b8:	2003e768 	.word	0x2003e768
   d70bc:	2003e764 	.word	0x2003e764
   d70c0:	2003e760 	.word	0x2003e760
   d70c4:	2003e75c 	.word	0x2003e75c
   d70c8:	2003e758 	.word	0x2003e758
   d70cc:	2003e754 	.word	0x2003e754
   d70d0:	2003e750 	.word	0x2003e750

000d70d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d70d4:	4b18      	ldr	r3, [pc, #96]	; (d7138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d70d6:	681a      	ldr	r2, [r3, #0]
   d70d8:	07d1      	lsls	r1, r2, #31
   d70da:	bf5c      	itt	pl
   d70dc:	2201      	movpl	r2, #1
   d70de:	601a      	strpl	r2, [r3, #0]
   d70e0:	4b16      	ldr	r3, [pc, #88]	; (d713c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d70e2:	681a      	ldr	r2, [r3, #0]
   d70e4:	07d2      	lsls	r2, r2, #31
   d70e6:	bf5c      	itt	pl
   d70e8:	2201      	movpl	r2, #1
   d70ea:	601a      	strpl	r2, [r3, #0]
   d70ec:	4b14      	ldr	r3, [pc, #80]	; (d7140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d70ee:	681a      	ldr	r2, [r3, #0]
   d70f0:	07d0      	lsls	r0, r2, #31
   d70f2:	bf5c      	itt	pl
   d70f4:	2201      	movpl	r2, #1
   d70f6:	601a      	strpl	r2, [r3, #0]
   d70f8:	4b12      	ldr	r3, [pc, #72]	; (d7144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d70fa:	681a      	ldr	r2, [r3, #0]
   d70fc:	07d1      	lsls	r1, r2, #31
   d70fe:	bf5c      	itt	pl
   d7100:	2201      	movpl	r2, #1
   d7102:	601a      	strpl	r2, [r3, #0]
   d7104:	4b10      	ldr	r3, [pc, #64]	; (d7148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7106:	681a      	ldr	r2, [r3, #0]
   d7108:	07d2      	lsls	r2, r2, #31
   d710a:	bf5c      	itt	pl
   d710c:	2201      	movpl	r2, #1
   d710e:	601a      	strpl	r2, [r3, #0]
   d7110:	4b0e      	ldr	r3, [pc, #56]	; (d714c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7112:	681a      	ldr	r2, [r3, #0]
   d7114:	07d0      	lsls	r0, r2, #31
   d7116:	bf5c      	itt	pl
   d7118:	2201      	movpl	r2, #1
   d711a:	601a      	strpl	r2, [r3, #0]
   d711c:	4b0c      	ldr	r3, [pc, #48]	; (d7150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d711e:	681a      	ldr	r2, [r3, #0]
   d7120:	07d1      	lsls	r1, r2, #31
   d7122:	bf5c      	itt	pl
   d7124:	2201      	movpl	r2, #1
   d7126:	601a      	strpl	r2, [r3, #0]
   d7128:	4b0a      	ldr	r3, [pc, #40]	; (d7154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d712a:	681a      	ldr	r2, [r3, #0]
   d712c:	07d2      	lsls	r2, r2, #31
   d712e:	bf5c      	itt	pl
   d7130:	2201      	movpl	r2, #1
   d7132:	601a      	strpl	r2, [r3, #0]
   d7134:	4770      	bx	lr
   d7136:	bf00      	nop
   d7138:	2003e79c 	.word	0x2003e79c
   d713c:	2003e798 	.word	0x2003e798
   d7140:	2003e794 	.word	0x2003e794
   d7144:	2003e790 	.word	0x2003e790
   d7148:	2003e78c 	.word	0x2003e78c
   d714c:	2003e788 	.word	0x2003e788
   d7150:	2003e784 	.word	0x2003e784
   d7154:	2003e780 	.word	0x2003e780

000d7158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7158:	4b18      	ldr	r3, [pc, #96]	; (d71bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d715a:	681a      	ldr	r2, [r3, #0]
   d715c:	07d1      	lsls	r1, r2, #31
   d715e:	bf5c      	itt	pl
   d7160:	2201      	movpl	r2, #1
   d7162:	601a      	strpl	r2, [r3, #0]
   d7164:	4b16      	ldr	r3, [pc, #88]	; (d71c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7166:	681a      	ldr	r2, [r3, #0]
   d7168:	07d2      	lsls	r2, r2, #31
   d716a:	bf5c      	itt	pl
   d716c:	2201      	movpl	r2, #1
   d716e:	601a      	strpl	r2, [r3, #0]
   d7170:	4b14      	ldr	r3, [pc, #80]	; (d71c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7172:	681a      	ldr	r2, [r3, #0]
   d7174:	07d0      	lsls	r0, r2, #31
   d7176:	bf5c      	itt	pl
   d7178:	2201      	movpl	r2, #1
   d717a:	601a      	strpl	r2, [r3, #0]
   d717c:	4b12      	ldr	r3, [pc, #72]	; (d71c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d717e:	681a      	ldr	r2, [r3, #0]
   d7180:	07d1      	lsls	r1, r2, #31
   d7182:	bf5c      	itt	pl
   d7184:	2201      	movpl	r2, #1
   d7186:	601a      	strpl	r2, [r3, #0]
   d7188:	4b10      	ldr	r3, [pc, #64]	; (d71cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d718a:	681a      	ldr	r2, [r3, #0]
   d718c:	07d2      	lsls	r2, r2, #31
   d718e:	bf5c      	itt	pl
   d7190:	2201      	movpl	r2, #1
   d7192:	601a      	strpl	r2, [r3, #0]
   d7194:	4b0e      	ldr	r3, [pc, #56]	; (d71d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7196:	681a      	ldr	r2, [r3, #0]
   d7198:	07d0      	lsls	r0, r2, #31
   d719a:	bf5c      	itt	pl
   d719c:	2201      	movpl	r2, #1
   d719e:	601a      	strpl	r2, [r3, #0]
   d71a0:	4b0c      	ldr	r3, [pc, #48]	; (d71d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d71a2:	681a      	ldr	r2, [r3, #0]
   d71a4:	07d1      	lsls	r1, r2, #31
   d71a6:	bf5c      	itt	pl
   d71a8:	2201      	movpl	r2, #1
   d71aa:	601a      	strpl	r2, [r3, #0]
   d71ac:	4b0a      	ldr	r3, [pc, #40]	; (d71d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d71ae:	681a      	ldr	r2, [r3, #0]
   d71b0:	07d2      	lsls	r2, r2, #31
   d71b2:	bf5c      	itt	pl
   d71b4:	2201      	movpl	r2, #1
   d71b6:	601a      	strpl	r2, [r3, #0]
   d71b8:	4770      	bx	lr
   d71ba:	bf00      	nop
   d71bc:	2003e7bc 	.word	0x2003e7bc
   d71c0:	2003e7b8 	.word	0x2003e7b8
   d71c4:	2003e7b4 	.word	0x2003e7b4
   d71c8:	2003e7b0 	.word	0x2003e7b0
   d71cc:	2003e7ac 	.word	0x2003e7ac
   d71d0:	2003e7a8 	.word	0x2003e7a8
   d71d4:	2003e7a4 	.word	0x2003e7a4
   d71d8:	2003e7a0 	.word	0x2003e7a0

000d71dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d71dc:	4b24      	ldr	r3, [pc, #144]	; (d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d71de:	681a      	ldr	r2, [r3, #0]
   d71e0:	07d0      	lsls	r0, r2, #31
   d71e2:	bf5c      	itt	pl
   d71e4:	2201      	movpl	r2, #1
   d71e6:	601a      	strpl	r2, [r3, #0]
   d71e8:	4b22      	ldr	r3, [pc, #136]	; (d7274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d71ea:	681a      	ldr	r2, [r3, #0]
   d71ec:	07d1      	lsls	r1, r2, #31
   d71ee:	bf5c      	itt	pl
   d71f0:	2201      	movpl	r2, #1
   d71f2:	601a      	strpl	r2, [r3, #0]
   d71f4:	4b20      	ldr	r3, [pc, #128]	; (d7278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d71f6:	681a      	ldr	r2, [r3, #0]
   d71f8:	07d2      	lsls	r2, r2, #31
   d71fa:	bf5c      	itt	pl
   d71fc:	2201      	movpl	r2, #1
   d71fe:	601a      	strpl	r2, [r3, #0]
   d7200:	4b1e      	ldr	r3, [pc, #120]	; (d727c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7202:	681a      	ldr	r2, [r3, #0]
   d7204:	07d0      	lsls	r0, r2, #31
   d7206:	bf5c      	itt	pl
   d7208:	2201      	movpl	r2, #1
   d720a:	601a      	strpl	r2, [r3, #0]
   d720c:	4b1c      	ldr	r3, [pc, #112]	; (d7280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d720e:	681a      	ldr	r2, [r3, #0]
   d7210:	07d1      	lsls	r1, r2, #31
   d7212:	bf5c      	itt	pl
   d7214:	2201      	movpl	r2, #1
   d7216:	601a      	strpl	r2, [r3, #0]
   d7218:	4b1a      	ldr	r3, [pc, #104]	; (d7284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d721a:	681a      	ldr	r2, [r3, #0]
   d721c:	07d2      	lsls	r2, r2, #31
   d721e:	bf5c      	itt	pl
   d7220:	2201      	movpl	r2, #1
   d7222:	601a      	strpl	r2, [r3, #0]
   d7224:	4b18      	ldr	r3, [pc, #96]	; (d7288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7226:	681a      	ldr	r2, [r3, #0]
   d7228:	07d0      	lsls	r0, r2, #31
   d722a:	bf5c      	itt	pl
   d722c:	2201      	movpl	r2, #1
   d722e:	601a      	strpl	r2, [r3, #0]
   d7230:	4b16      	ldr	r3, [pc, #88]	; (d728c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7232:	681a      	ldr	r2, [r3, #0]
   d7234:	07d1      	lsls	r1, r2, #31
   d7236:	bf5c      	itt	pl
   d7238:	2201      	movpl	r2, #1
   d723a:	601a      	strpl	r2, [r3, #0]
   d723c:	4b14      	ldr	r3, [pc, #80]	; (d7290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d723e:	681a      	ldr	r2, [r3, #0]
   d7240:	07d2      	lsls	r2, r2, #31
   d7242:	bf5c      	itt	pl
   d7244:	2201      	movpl	r2, #1
   d7246:	601a      	strpl	r2, [r3, #0]
   d7248:	4b12      	ldr	r3, [pc, #72]	; (d7294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d724a:	681a      	ldr	r2, [r3, #0]
   d724c:	07d0      	lsls	r0, r2, #31
   d724e:	bf5c      	itt	pl
   d7250:	2201      	movpl	r2, #1
   d7252:	601a      	strpl	r2, [r3, #0]
   d7254:	4b10      	ldr	r3, [pc, #64]	; (d7298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7256:	681a      	ldr	r2, [r3, #0]
   d7258:	07d1      	lsls	r1, r2, #31
   d725a:	bf5c      	itt	pl
   d725c:	2201      	movpl	r2, #1
   d725e:	601a      	strpl	r2, [r3, #0]
   d7260:	4b0e      	ldr	r3, [pc, #56]	; (d729c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7262:	681a      	ldr	r2, [r3, #0]
   d7264:	07d2      	lsls	r2, r2, #31
   d7266:	bf5c      	itt	pl
   d7268:	2201      	movpl	r2, #1
   d726a:	601a      	strpl	r2, [r3, #0]
   d726c:	4770      	bx	lr
   d726e:	bf00      	nop
   d7270:	2003e7ec 	.word	0x2003e7ec
   d7274:	2003e7e8 	.word	0x2003e7e8
   d7278:	2003e7e4 	.word	0x2003e7e4
   d727c:	2003e7e0 	.word	0x2003e7e0
   d7280:	2003e7dc 	.word	0x2003e7dc
   d7284:	2003e7d8 	.word	0x2003e7d8
   d7288:	2003e7d4 	.word	0x2003e7d4
   d728c:	2003e7d0 	.word	0x2003e7d0
   d7290:	2003e7cc 	.word	0x2003e7cc
   d7294:	2003e7c8 	.word	0x2003e7c8
   d7298:	2003e7c4 	.word	0x2003e7c4
   d729c:	2003e7c0 	.word	0x2003e7c0

000d72a0 <__aeabi_drsub>:
   d72a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d72a4:	e002      	b.n	d72ac <__adddf3>
   d72a6:	bf00      	nop

000d72a8 <__aeabi_dsub>:
   d72a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d72ac <__adddf3>:
   d72ac:	b530      	push	{r4, r5, lr}
   d72ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d72b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d72b6:	ea94 0f05 	teq	r4, r5
   d72ba:	bf08      	it	eq
   d72bc:	ea90 0f02 	teqeq	r0, r2
   d72c0:	bf1f      	itttt	ne
   d72c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d72c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d72ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d72ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d72d2:	f000 80e2 	beq.w	d749a <__adddf3+0x1ee>
   d72d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d72da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d72de:	bfb8      	it	lt
   d72e0:	426d      	neglt	r5, r5
   d72e2:	dd0c      	ble.n	d72fe <__adddf3+0x52>
   d72e4:	442c      	add	r4, r5
   d72e6:	ea80 0202 	eor.w	r2, r0, r2
   d72ea:	ea81 0303 	eor.w	r3, r1, r3
   d72ee:	ea82 0000 	eor.w	r0, r2, r0
   d72f2:	ea83 0101 	eor.w	r1, r3, r1
   d72f6:	ea80 0202 	eor.w	r2, r0, r2
   d72fa:	ea81 0303 	eor.w	r3, r1, r3
   d72fe:	2d36      	cmp	r5, #54	; 0x36
   d7300:	bf88      	it	hi
   d7302:	bd30      	pophi	{r4, r5, pc}
   d7304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7308:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d730c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7314:	d002      	beq.n	d731c <__adddf3+0x70>
   d7316:	4240      	negs	r0, r0
   d7318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d731c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7320:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7328:	d002      	beq.n	d7330 <__adddf3+0x84>
   d732a:	4252      	negs	r2, r2
   d732c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7330:	ea94 0f05 	teq	r4, r5
   d7334:	f000 80a7 	beq.w	d7486 <__adddf3+0x1da>
   d7338:	f1a4 0401 	sub.w	r4, r4, #1
   d733c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7340:	db0d      	blt.n	d735e <__adddf3+0xb2>
   d7342:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7346:	fa22 f205 	lsr.w	r2, r2, r5
   d734a:	1880      	adds	r0, r0, r2
   d734c:	f141 0100 	adc.w	r1, r1, #0
   d7350:	fa03 f20e 	lsl.w	r2, r3, lr
   d7354:	1880      	adds	r0, r0, r2
   d7356:	fa43 f305 	asr.w	r3, r3, r5
   d735a:	4159      	adcs	r1, r3
   d735c:	e00e      	b.n	d737c <__adddf3+0xd0>
   d735e:	f1a5 0520 	sub.w	r5, r5, #32
   d7362:	f10e 0e20 	add.w	lr, lr, #32
   d7366:	2a01      	cmp	r2, #1
   d7368:	fa03 fc0e 	lsl.w	ip, r3, lr
   d736c:	bf28      	it	cs
   d736e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7372:	fa43 f305 	asr.w	r3, r3, r5
   d7376:	18c0      	adds	r0, r0, r3
   d7378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d737c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7380:	d507      	bpl.n	d7392 <__adddf3+0xe6>
   d7382:	f04f 0e00 	mov.w	lr, #0
   d7386:	f1dc 0c00 	rsbs	ip, ip, #0
   d738a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d738e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7396:	d31b      	bcc.n	d73d0 <__adddf3+0x124>
   d7398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d739c:	d30c      	bcc.n	d73b8 <__adddf3+0x10c>
   d739e:	0849      	lsrs	r1, r1, #1
   d73a0:	ea5f 0030 	movs.w	r0, r0, rrx
   d73a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d73a8:	f104 0401 	add.w	r4, r4, #1
   d73ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d73b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d73b4:	f080 809a 	bcs.w	d74ec <__adddf3+0x240>
   d73b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d73bc:	bf08      	it	eq
   d73be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d73c2:	f150 0000 	adcs.w	r0, r0, #0
   d73c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d73ca:	ea41 0105 	orr.w	r1, r1, r5
   d73ce:	bd30      	pop	{r4, r5, pc}
   d73d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d73d4:	4140      	adcs	r0, r0
   d73d6:	eb41 0101 	adc.w	r1, r1, r1
   d73da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d73de:	f1a4 0401 	sub.w	r4, r4, #1
   d73e2:	d1e9      	bne.n	d73b8 <__adddf3+0x10c>
   d73e4:	f091 0f00 	teq	r1, #0
   d73e8:	bf04      	itt	eq
   d73ea:	4601      	moveq	r1, r0
   d73ec:	2000      	moveq	r0, #0
   d73ee:	fab1 f381 	clz	r3, r1
   d73f2:	bf08      	it	eq
   d73f4:	3320      	addeq	r3, #32
   d73f6:	f1a3 030b 	sub.w	r3, r3, #11
   d73fa:	f1b3 0220 	subs.w	r2, r3, #32
   d73fe:	da0c      	bge.n	d741a <__adddf3+0x16e>
   d7400:	320c      	adds	r2, #12
   d7402:	dd08      	ble.n	d7416 <__adddf3+0x16a>
   d7404:	f102 0c14 	add.w	ip, r2, #20
   d7408:	f1c2 020c 	rsb	r2, r2, #12
   d740c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7410:	fa21 f102 	lsr.w	r1, r1, r2
   d7414:	e00c      	b.n	d7430 <__adddf3+0x184>
   d7416:	f102 0214 	add.w	r2, r2, #20
   d741a:	bfd8      	it	le
   d741c:	f1c2 0c20 	rsble	ip, r2, #32
   d7420:	fa01 f102 	lsl.w	r1, r1, r2
   d7424:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7428:	bfdc      	itt	le
   d742a:	ea41 010c 	orrle.w	r1, r1, ip
   d742e:	4090      	lslle	r0, r2
   d7430:	1ae4      	subs	r4, r4, r3
   d7432:	bfa2      	ittt	ge
   d7434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7438:	4329      	orrge	r1, r5
   d743a:	bd30      	popge	{r4, r5, pc}
   d743c:	ea6f 0404 	mvn.w	r4, r4
   d7440:	3c1f      	subs	r4, #31
   d7442:	da1c      	bge.n	d747e <__adddf3+0x1d2>
   d7444:	340c      	adds	r4, #12
   d7446:	dc0e      	bgt.n	d7466 <__adddf3+0x1ba>
   d7448:	f104 0414 	add.w	r4, r4, #20
   d744c:	f1c4 0220 	rsb	r2, r4, #32
   d7450:	fa20 f004 	lsr.w	r0, r0, r4
   d7454:	fa01 f302 	lsl.w	r3, r1, r2
   d7458:	ea40 0003 	orr.w	r0, r0, r3
   d745c:	fa21 f304 	lsr.w	r3, r1, r4
   d7460:	ea45 0103 	orr.w	r1, r5, r3
   d7464:	bd30      	pop	{r4, r5, pc}
   d7466:	f1c4 040c 	rsb	r4, r4, #12
   d746a:	f1c4 0220 	rsb	r2, r4, #32
   d746e:	fa20 f002 	lsr.w	r0, r0, r2
   d7472:	fa01 f304 	lsl.w	r3, r1, r4
   d7476:	ea40 0003 	orr.w	r0, r0, r3
   d747a:	4629      	mov	r1, r5
   d747c:	bd30      	pop	{r4, r5, pc}
   d747e:	fa21 f004 	lsr.w	r0, r1, r4
   d7482:	4629      	mov	r1, r5
   d7484:	bd30      	pop	{r4, r5, pc}
   d7486:	f094 0f00 	teq	r4, #0
   d748a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d748e:	bf06      	itte	eq
   d7490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7494:	3401      	addeq	r4, #1
   d7496:	3d01      	subne	r5, #1
   d7498:	e74e      	b.n	d7338 <__adddf3+0x8c>
   d749a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d749e:	bf18      	it	ne
   d74a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d74a4:	d029      	beq.n	d74fa <__adddf3+0x24e>
   d74a6:	ea94 0f05 	teq	r4, r5
   d74aa:	bf08      	it	eq
   d74ac:	ea90 0f02 	teqeq	r0, r2
   d74b0:	d005      	beq.n	d74be <__adddf3+0x212>
   d74b2:	ea54 0c00 	orrs.w	ip, r4, r0
   d74b6:	bf04      	itt	eq
   d74b8:	4619      	moveq	r1, r3
   d74ba:	4610      	moveq	r0, r2
   d74bc:	bd30      	pop	{r4, r5, pc}
   d74be:	ea91 0f03 	teq	r1, r3
   d74c2:	bf1e      	ittt	ne
   d74c4:	2100      	movne	r1, #0
   d74c6:	2000      	movne	r0, #0
   d74c8:	bd30      	popne	{r4, r5, pc}
   d74ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d74ce:	d105      	bne.n	d74dc <__adddf3+0x230>
   d74d0:	0040      	lsls	r0, r0, #1
   d74d2:	4149      	adcs	r1, r1
   d74d4:	bf28      	it	cs
   d74d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d74da:	bd30      	pop	{r4, r5, pc}
   d74dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d74e0:	bf3c      	itt	cc
   d74e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d74e6:	bd30      	popcc	{r4, r5, pc}
   d74e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d74ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d74f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d74f4:	f04f 0000 	mov.w	r0, #0
   d74f8:	bd30      	pop	{r4, r5, pc}
   d74fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d74fe:	bf1a      	itte	ne
   d7500:	4619      	movne	r1, r3
   d7502:	4610      	movne	r0, r2
   d7504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7508:	bf1c      	itt	ne
   d750a:	460b      	movne	r3, r1
   d750c:	4602      	movne	r2, r0
   d750e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7512:	bf06      	itte	eq
   d7514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7518:	ea91 0f03 	teqeq	r1, r3
   d751c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7520:	bd30      	pop	{r4, r5, pc}
   d7522:	bf00      	nop

000d7524 <__aeabi_ui2d>:
   d7524:	f090 0f00 	teq	r0, #0
   d7528:	bf04      	itt	eq
   d752a:	2100      	moveq	r1, #0
   d752c:	4770      	bxeq	lr
   d752e:	b530      	push	{r4, r5, lr}
   d7530:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7534:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7538:	f04f 0500 	mov.w	r5, #0
   d753c:	f04f 0100 	mov.w	r1, #0
   d7540:	e750      	b.n	d73e4 <__adddf3+0x138>
   d7542:	bf00      	nop

000d7544 <__aeabi_i2d>:
   d7544:	f090 0f00 	teq	r0, #0
   d7548:	bf04      	itt	eq
   d754a:	2100      	moveq	r1, #0
   d754c:	4770      	bxeq	lr
   d754e:	b530      	push	{r4, r5, lr}
   d7550:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7554:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d755c:	bf48      	it	mi
   d755e:	4240      	negmi	r0, r0
   d7560:	f04f 0100 	mov.w	r1, #0
   d7564:	e73e      	b.n	d73e4 <__adddf3+0x138>
   d7566:	bf00      	nop

000d7568 <__aeabi_f2d>:
   d7568:	0042      	lsls	r2, r0, #1
   d756a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d756e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7572:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7576:	bf1f      	itttt	ne
   d7578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d757c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7584:	4770      	bxne	lr
   d7586:	f092 0f00 	teq	r2, #0
   d758a:	bf14      	ite	ne
   d758c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7590:	4770      	bxeq	lr
   d7592:	b530      	push	{r4, r5, lr}
   d7594:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d759c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d75a0:	e720      	b.n	d73e4 <__adddf3+0x138>
   d75a2:	bf00      	nop

000d75a4 <__aeabi_ul2d>:
   d75a4:	ea50 0201 	orrs.w	r2, r0, r1
   d75a8:	bf08      	it	eq
   d75aa:	4770      	bxeq	lr
   d75ac:	b530      	push	{r4, r5, lr}
   d75ae:	f04f 0500 	mov.w	r5, #0
   d75b2:	e00a      	b.n	d75ca <__aeabi_l2d+0x16>

000d75b4 <__aeabi_l2d>:
   d75b4:	ea50 0201 	orrs.w	r2, r0, r1
   d75b8:	bf08      	it	eq
   d75ba:	4770      	bxeq	lr
   d75bc:	b530      	push	{r4, r5, lr}
   d75be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d75c2:	d502      	bpl.n	d75ca <__aeabi_l2d+0x16>
   d75c4:	4240      	negs	r0, r0
   d75c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d75ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d75ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d75d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d75d6:	f43f aedc 	beq.w	d7392 <__adddf3+0xe6>
   d75da:	f04f 0203 	mov.w	r2, #3
   d75de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d75e2:	bf18      	it	ne
   d75e4:	3203      	addne	r2, #3
   d75e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d75ea:	bf18      	it	ne
   d75ec:	3203      	addne	r2, #3
   d75ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d75f2:	f1c2 0320 	rsb	r3, r2, #32
   d75f6:	fa00 fc03 	lsl.w	ip, r0, r3
   d75fa:	fa20 f002 	lsr.w	r0, r0, r2
   d75fe:	fa01 fe03 	lsl.w	lr, r1, r3
   d7602:	ea40 000e 	orr.w	r0, r0, lr
   d7606:	fa21 f102 	lsr.w	r1, r1, r2
   d760a:	4414      	add	r4, r2
   d760c:	e6c1      	b.n	d7392 <__adddf3+0xe6>
   d760e:	bf00      	nop

000d7610 <__aeabi_dmul>:
   d7610:	b570      	push	{r4, r5, r6, lr}
   d7612:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d761a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d761e:	bf1d      	ittte	ne
   d7620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7624:	ea94 0f0c 	teqne	r4, ip
   d7628:	ea95 0f0c 	teqne	r5, ip
   d762c:	f000 f8de 	bleq	d77ec <__aeabi_dmul+0x1dc>
   d7630:	442c      	add	r4, r5
   d7632:	ea81 0603 	eor.w	r6, r1, r3
   d7636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d763a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d763e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7642:	bf18      	it	ne
   d7644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d764c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7650:	d038      	beq.n	d76c4 <__aeabi_dmul+0xb4>
   d7652:	fba0 ce02 	umull	ip, lr, r0, r2
   d7656:	f04f 0500 	mov.w	r5, #0
   d765a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d765e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7662:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7666:	f04f 0600 	mov.w	r6, #0
   d766a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d766e:	f09c 0f00 	teq	ip, #0
   d7672:	bf18      	it	ne
   d7674:	f04e 0e01 	orrne.w	lr, lr, #1
   d7678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d767c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7684:	d204      	bcs.n	d7690 <__aeabi_dmul+0x80>
   d7686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d768a:	416d      	adcs	r5, r5
   d768c:	eb46 0606 	adc.w	r6, r6, r6
   d7690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d769c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d76a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d76a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d76a8:	bf88      	it	hi
   d76aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d76ae:	d81e      	bhi.n	d76ee <__aeabi_dmul+0xde>
   d76b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d76b4:	bf08      	it	eq
   d76b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d76ba:	f150 0000 	adcs.w	r0, r0, #0
   d76be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d76c2:	bd70      	pop	{r4, r5, r6, pc}
   d76c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d76c8:	ea46 0101 	orr.w	r1, r6, r1
   d76cc:	ea40 0002 	orr.w	r0, r0, r2
   d76d0:	ea81 0103 	eor.w	r1, r1, r3
   d76d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d76d8:	bfc2      	ittt	gt
   d76da:	ebd4 050c 	rsbsgt	r5, r4, ip
   d76de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d76e2:	bd70      	popgt	{r4, r5, r6, pc}
   d76e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d76e8:	f04f 0e00 	mov.w	lr, #0
   d76ec:	3c01      	subs	r4, #1
   d76ee:	f300 80ab 	bgt.w	d7848 <__aeabi_dmul+0x238>
   d76f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d76f6:	bfde      	ittt	le
   d76f8:	2000      	movle	r0, #0
   d76fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d76fe:	bd70      	pople	{r4, r5, r6, pc}
   d7700:	f1c4 0400 	rsb	r4, r4, #0
   d7704:	3c20      	subs	r4, #32
   d7706:	da35      	bge.n	d7774 <__aeabi_dmul+0x164>
   d7708:	340c      	adds	r4, #12
   d770a:	dc1b      	bgt.n	d7744 <__aeabi_dmul+0x134>
   d770c:	f104 0414 	add.w	r4, r4, #20
   d7710:	f1c4 0520 	rsb	r5, r4, #32
   d7714:	fa00 f305 	lsl.w	r3, r0, r5
   d7718:	fa20 f004 	lsr.w	r0, r0, r4
   d771c:	fa01 f205 	lsl.w	r2, r1, r5
   d7720:	ea40 0002 	orr.w	r0, r0, r2
   d7724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d772c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7730:	fa21 f604 	lsr.w	r6, r1, r4
   d7734:	eb42 0106 	adc.w	r1, r2, r6
   d7738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d773c:	bf08      	it	eq
   d773e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7742:	bd70      	pop	{r4, r5, r6, pc}
   d7744:	f1c4 040c 	rsb	r4, r4, #12
   d7748:	f1c4 0520 	rsb	r5, r4, #32
   d774c:	fa00 f304 	lsl.w	r3, r0, r4
   d7750:	fa20 f005 	lsr.w	r0, r0, r5
   d7754:	fa01 f204 	lsl.w	r2, r1, r4
   d7758:	ea40 0002 	orr.w	r0, r0, r2
   d775c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7764:	f141 0100 	adc.w	r1, r1, #0
   d7768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d776c:	bf08      	it	eq
   d776e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7772:	bd70      	pop	{r4, r5, r6, pc}
   d7774:	f1c4 0520 	rsb	r5, r4, #32
   d7778:	fa00 f205 	lsl.w	r2, r0, r5
   d777c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7780:	fa20 f304 	lsr.w	r3, r0, r4
   d7784:	fa01 f205 	lsl.w	r2, r1, r5
   d7788:	ea43 0302 	orr.w	r3, r3, r2
   d778c:	fa21 f004 	lsr.w	r0, r1, r4
   d7790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7794:	fa21 f204 	lsr.w	r2, r1, r4
   d7798:	ea20 0002 	bic.w	r0, r0, r2
   d779c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d77a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d77a4:	bf08      	it	eq
   d77a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d77aa:	bd70      	pop	{r4, r5, r6, pc}
   d77ac:	f094 0f00 	teq	r4, #0
   d77b0:	d10f      	bne.n	d77d2 <__aeabi_dmul+0x1c2>
   d77b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d77b6:	0040      	lsls	r0, r0, #1
   d77b8:	eb41 0101 	adc.w	r1, r1, r1
   d77bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d77c0:	bf08      	it	eq
   d77c2:	3c01      	subeq	r4, #1
   d77c4:	d0f7      	beq.n	d77b6 <__aeabi_dmul+0x1a6>
   d77c6:	ea41 0106 	orr.w	r1, r1, r6
   d77ca:	f095 0f00 	teq	r5, #0
   d77ce:	bf18      	it	ne
   d77d0:	4770      	bxne	lr
   d77d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d77d6:	0052      	lsls	r2, r2, #1
   d77d8:	eb43 0303 	adc.w	r3, r3, r3
   d77dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d77e0:	bf08      	it	eq
   d77e2:	3d01      	subeq	r5, #1
   d77e4:	d0f7      	beq.n	d77d6 <__aeabi_dmul+0x1c6>
   d77e6:	ea43 0306 	orr.w	r3, r3, r6
   d77ea:	4770      	bx	lr
   d77ec:	ea94 0f0c 	teq	r4, ip
   d77f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d77f4:	bf18      	it	ne
   d77f6:	ea95 0f0c 	teqne	r5, ip
   d77fa:	d00c      	beq.n	d7816 <__aeabi_dmul+0x206>
   d77fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7800:	bf18      	it	ne
   d7802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7806:	d1d1      	bne.n	d77ac <__aeabi_dmul+0x19c>
   d7808:	ea81 0103 	eor.w	r1, r1, r3
   d780c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7810:	f04f 0000 	mov.w	r0, #0
   d7814:	bd70      	pop	{r4, r5, r6, pc}
   d7816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d781a:	bf06      	itte	eq
   d781c:	4610      	moveq	r0, r2
   d781e:	4619      	moveq	r1, r3
   d7820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7824:	d019      	beq.n	d785a <__aeabi_dmul+0x24a>
   d7826:	ea94 0f0c 	teq	r4, ip
   d782a:	d102      	bne.n	d7832 <__aeabi_dmul+0x222>
   d782c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7830:	d113      	bne.n	d785a <__aeabi_dmul+0x24a>
   d7832:	ea95 0f0c 	teq	r5, ip
   d7836:	d105      	bne.n	d7844 <__aeabi_dmul+0x234>
   d7838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d783c:	bf1c      	itt	ne
   d783e:	4610      	movne	r0, r2
   d7840:	4619      	movne	r1, r3
   d7842:	d10a      	bne.n	d785a <__aeabi_dmul+0x24a>
   d7844:	ea81 0103 	eor.w	r1, r1, r3
   d7848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d784c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7854:	f04f 0000 	mov.w	r0, #0
   d7858:	bd70      	pop	{r4, r5, r6, pc}
   d785a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d785e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7862:	bd70      	pop	{r4, r5, r6, pc}

000d7864 <__aeabi_ddiv>:
   d7864:	b570      	push	{r4, r5, r6, lr}
   d7866:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d786a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d786e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7872:	bf1d      	ittte	ne
   d7874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7878:	ea94 0f0c 	teqne	r4, ip
   d787c:	ea95 0f0c 	teqne	r5, ip
   d7880:	f000 f8a7 	bleq	d79d2 <__aeabi_ddiv+0x16e>
   d7884:	eba4 0405 	sub.w	r4, r4, r5
   d7888:	ea81 0e03 	eor.w	lr, r1, r3
   d788c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7890:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7894:	f000 8088 	beq.w	d79a8 <__aeabi_ddiv+0x144>
   d7898:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d789c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d78a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d78a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d78a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d78ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d78b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d78b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d78b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d78bc:	429d      	cmp	r5, r3
   d78be:	bf08      	it	eq
   d78c0:	4296      	cmpeq	r6, r2
   d78c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d78c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d78ca:	d202      	bcs.n	d78d2 <__aeabi_ddiv+0x6e>
   d78cc:	085b      	lsrs	r3, r3, #1
   d78ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d78d2:	1ab6      	subs	r6, r6, r2
   d78d4:	eb65 0503 	sbc.w	r5, r5, r3
   d78d8:	085b      	lsrs	r3, r3, #1
   d78da:	ea4f 0232 	mov.w	r2, r2, rrx
   d78de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d78e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d78e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d78ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d78ee:	bf22      	ittt	cs
   d78f0:	1ab6      	subcs	r6, r6, r2
   d78f2:	4675      	movcs	r5, lr
   d78f4:	ea40 000c 	orrcs.w	r0, r0, ip
   d78f8:	085b      	lsrs	r3, r3, #1
   d78fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d78fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d7902:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7906:	bf22      	ittt	cs
   d7908:	1ab6      	subcs	r6, r6, r2
   d790a:	4675      	movcs	r5, lr
   d790c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7910:	085b      	lsrs	r3, r3, #1
   d7912:	ea4f 0232 	mov.w	r2, r2, rrx
   d7916:	ebb6 0e02 	subs.w	lr, r6, r2
   d791a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d791e:	bf22      	ittt	cs
   d7920:	1ab6      	subcs	r6, r6, r2
   d7922:	4675      	movcs	r5, lr
   d7924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7928:	085b      	lsrs	r3, r3, #1
   d792a:	ea4f 0232 	mov.w	r2, r2, rrx
   d792e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7932:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7936:	bf22      	ittt	cs
   d7938:	1ab6      	subcs	r6, r6, r2
   d793a:	4675      	movcs	r5, lr
   d793c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7940:	ea55 0e06 	orrs.w	lr, r5, r6
   d7944:	d018      	beq.n	d7978 <__aeabi_ddiv+0x114>
   d7946:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d794a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d794e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d795a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d795e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7962:	d1c0      	bne.n	d78e6 <__aeabi_ddiv+0x82>
   d7964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7968:	d10b      	bne.n	d7982 <__aeabi_ddiv+0x11e>
   d796a:	ea41 0100 	orr.w	r1, r1, r0
   d796e:	f04f 0000 	mov.w	r0, #0
   d7972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7976:	e7b6      	b.n	d78e6 <__aeabi_ddiv+0x82>
   d7978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d797c:	bf04      	itt	eq
   d797e:	4301      	orreq	r1, r0
   d7980:	2000      	moveq	r0, #0
   d7982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7986:	bf88      	it	hi
   d7988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d798c:	f63f aeaf 	bhi.w	d76ee <__aeabi_dmul+0xde>
   d7990:	ebb5 0c03 	subs.w	ip, r5, r3
   d7994:	bf04      	itt	eq
   d7996:	ebb6 0c02 	subseq.w	ip, r6, r2
   d799a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d799e:	f150 0000 	adcs.w	r0, r0, #0
   d79a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d79a6:	bd70      	pop	{r4, r5, r6, pc}
   d79a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d79ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d79b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d79b4:	bfc2      	ittt	gt
   d79b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d79ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d79be:	bd70      	popgt	{r4, r5, r6, pc}
   d79c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79c4:	f04f 0e00 	mov.w	lr, #0
   d79c8:	3c01      	subs	r4, #1
   d79ca:	e690      	b.n	d76ee <__aeabi_dmul+0xde>
   d79cc:	ea45 0e06 	orr.w	lr, r5, r6
   d79d0:	e68d      	b.n	d76ee <__aeabi_dmul+0xde>
   d79d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d79d6:	ea94 0f0c 	teq	r4, ip
   d79da:	bf08      	it	eq
   d79dc:	ea95 0f0c 	teqeq	r5, ip
   d79e0:	f43f af3b 	beq.w	d785a <__aeabi_dmul+0x24a>
   d79e4:	ea94 0f0c 	teq	r4, ip
   d79e8:	d10a      	bne.n	d7a00 <__aeabi_ddiv+0x19c>
   d79ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d79ee:	f47f af34 	bne.w	d785a <__aeabi_dmul+0x24a>
   d79f2:	ea95 0f0c 	teq	r5, ip
   d79f6:	f47f af25 	bne.w	d7844 <__aeabi_dmul+0x234>
   d79fa:	4610      	mov	r0, r2
   d79fc:	4619      	mov	r1, r3
   d79fe:	e72c      	b.n	d785a <__aeabi_dmul+0x24a>
   d7a00:	ea95 0f0c 	teq	r5, ip
   d7a04:	d106      	bne.n	d7a14 <__aeabi_ddiv+0x1b0>
   d7a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7a0a:	f43f aefd 	beq.w	d7808 <__aeabi_dmul+0x1f8>
   d7a0e:	4610      	mov	r0, r2
   d7a10:	4619      	mov	r1, r3
   d7a12:	e722      	b.n	d785a <__aeabi_dmul+0x24a>
   d7a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7a18:	bf18      	it	ne
   d7a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7a1e:	f47f aec5 	bne.w	d77ac <__aeabi_dmul+0x19c>
   d7a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7a26:	f47f af0d 	bne.w	d7844 <__aeabi_dmul+0x234>
   d7a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7a2e:	f47f aeeb 	bne.w	d7808 <__aeabi_dmul+0x1f8>
   d7a32:	e712      	b.n	d785a <__aeabi_dmul+0x24a>

000d7a34 <__aeabi_d2f>:
   d7a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7a38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7a3c:	bf24      	itt	cs
   d7a3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7a42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7a46:	d90d      	bls.n	d7a64 <__aeabi_d2f+0x30>
   d7a48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7a4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7a50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7a54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7a58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7a5c:	bf08      	it	eq
   d7a5e:	f020 0001 	biceq.w	r0, r0, #1
   d7a62:	4770      	bx	lr
   d7a64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7a68:	d121      	bne.n	d7aae <__aeabi_d2f+0x7a>
   d7a6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7a6e:	bfbc      	itt	lt
   d7a70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7a74:	4770      	bxlt	lr
   d7a76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7a7e:	f1c2 0218 	rsb	r2, r2, #24
   d7a82:	f1c2 0c20 	rsb	ip, r2, #32
   d7a86:	fa10 f30c 	lsls.w	r3, r0, ip
   d7a8a:	fa20 f002 	lsr.w	r0, r0, r2
   d7a8e:	bf18      	it	ne
   d7a90:	f040 0001 	orrne.w	r0, r0, #1
   d7a94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7a98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7a9c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7aa0:	ea40 000c 	orr.w	r0, r0, ip
   d7aa4:	fa23 f302 	lsr.w	r3, r3, r2
   d7aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7aac:	e7cc      	b.n	d7a48 <__aeabi_d2f+0x14>
   d7aae:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7ab2:	d107      	bne.n	d7ac4 <__aeabi_d2f+0x90>
   d7ab4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7ab8:	bf1e      	ittt	ne
   d7aba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7abe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7ac2:	4770      	bxne	lr
   d7ac4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7ac8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7acc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7ad0:	4770      	bx	lr
   d7ad2:	bf00      	nop

000d7ad4 <__aeabi_frsub>:
   d7ad4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d7ad8:	e002      	b.n	d7ae0 <__addsf3>
   d7ada:	bf00      	nop

000d7adc <__aeabi_fsub>:
   d7adc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d7ae0 <__addsf3>:
   d7ae0:	0042      	lsls	r2, r0, #1
   d7ae2:	bf1f      	itttt	ne
   d7ae4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d7ae8:	ea92 0f03 	teqne	r2, r3
   d7aec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d7af0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d7af4:	d06a      	beq.n	d7bcc <__addsf3+0xec>
   d7af6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d7afa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d7afe:	bfc1      	itttt	gt
   d7b00:	18d2      	addgt	r2, r2, r3
   d7b02:	4041      	eorgt	r1, r0
   d7b04:	4048      	eorgt	r0, r1
   d7b06:	4041      	eorgt	r1, r0
   d7b08:	bfb8      	it	lt
   d7b0a:	425b      	neglt	r3, r3
   d7b0c:	2b19      	cmp	r3, #25
   d7b0e:	bf88      	it	hi
   d7b10:	4770      	bxhi	lr
   d7b12:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d7b16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7b1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d7b1e:	bf18      	it	ne
   d7b20:	4240      	negne	r0, r0
   d7b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7b26:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d7b2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d7b2e:	bf18      	it	ne
   d7b30:	4249      	negne	r1, r1
   d7b32:	ea92 0f03 	teq	r2, r3
   d7b36:	d03f      	beq.n	d7bb8 <__addsf3+0xd8>
   d7b38:	f1a2 0201 	sub.w	r2, r2, #1
   d7b3c:	fa41 fc03 	asr.w	ip, r1, r3
   d7b40:	eb10 000c 	adds.w	r0, r0, ip
   d7b44:	f1c3 0320 	rsb	r3, r3, #32
   d7b48:	fa01 f103 	lsl.w	r1, r1, r3
   d7b4c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d7b50:	d502      	bpl.n	d7b58 <__addsf3+0x78>
   d7b52:	4249      	negs	r1, r1
   d7b54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d7b58:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d7b5c:	d313      	bcc.n	d7b86 <__addsf3+0xa6>
   d7b5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d7b62:	d306      	bcc.n	d7b72 <__addsf3+0x92>
   d7b64:	0840      	lsrs	r0, r0, #1
   d7b66:	ea4f 0131 	mov.w	r1, r1, rrx
   d7b6a:	f102 0201 	add.w	r2, r2, #1
   d7b6e:	2afe      	cmp	r2, #254	; 0xfe
   d7b70:	d251      	bcs.n	d7c16 <__addsf3+0x136>
   d7b72:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d7b76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d7b7a:	bf08      	it	eq
   d7b7c:	f020 0001 	biceq.w	r0, r0, #1
   d7b80:	ea40 0003 	orr.w	r0, r0, r3
   d7b84:	4770      	bx	lr
   d7b86:	0049      	lsls	r1, r1, #1
   d7b88:	eb40 0000 	adc.w	r0, r0, r0
   d7b8c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d7b90:	f1a2 0201 	sub.w	r2, r2, #1
   d7b94:	d1ed      	bne.n	d7b72 <__addsf3+0x92>
   d7b96:	fab0 fc80 	clz	ip, r0
   d7b9a:	f1ac 0c08 	sub.w	ip, ip, #8
   d7b9e:	ebb2 020c 	subs.w	r2, r2, ip
   d7ba2:	fa00 f00c 	lsl.w	r0, r0, ip
   d7ba6:	bfaa      	itet	ge
   d7ba8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d7bac:	4252      	neglt	r2, r2
   d7bae:	4318      	orrge	r0, r3
   d7bb0:	bfbc      	itt	lt
   d7bb2:	40d0      	lsrlt	r0, r2
   d7bb4:	4318      	orrlt	r0, r3
   d7bb6:	4770      	bx	lr
   d7bb8:	f092 0f00 	teq	r2, #0
   d7bbc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d7bc0:	bf06      	itte	eq
   d7bc2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d7bc6:	3201      	addeq	r2, #1
   d7bc8:	3b01      	subne	r3, #1
   d7bca:	e7b5      	b.n	d7b38 <__addsf3+0x58>
   d7bcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d7bd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d7bd4:	bf18      	it	ne
   d7bd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d7bda:	d021      	beq.n	d7c20 <__addsf3+0x140>
   d7bdc:	ea92 0f03 	teq	r2, r3
   d7be0:	d004      	beq.n	d7bec <__addsf3+0x10c>
   d7be2:	f092 0f00 	teq	r2, #0
   d7be6:	bf08      	it	eq
   d7be8:	4608      	moveq	r0, r1
   d7bea:	4770      	bx	lr
   d7bec:	ea90 0f01 	teq	r0, r1
   d7bf0:	bf1c      	itt	ne
   d7bf2:	2000      	movne	r0, #0
   d7bf4:	4770      	bxne	lr
   d7bf6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d7bfa:	d104      	bne.n	d7c06 <__addsf3+0x126>
   d7bfc:	0040      	lsls	r0, r0, #1
   d7bfe:	bf28      	it	cs
   d7c00:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d7c04:	4770      	bx	lr
   d7c06:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d7c0a:	bf3c      	itt	cc
   d7c0c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d7c10:	4770      	bxcc	lr
   d7c12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d7c16:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d7c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7c1e:	4770      	bx	lr
   d7c20:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d7c24:	bf16      	itet	ne
   d7c26:	4608      	movne	r0, r1
   d7c28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d7c2c:	4601      	movne	r1, r0
   d7c2e:	0242      	lsls	r2, r0, #9
   d7c30:	bf06      	itte	eq
   d7c32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d7c36:	ea90 0f01 	teqeq	r0, r1
   d7c3a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d7c3e:	4770      	bx	lr

000d7c40 <__aeabi_ui2f>:
   d7c40:	f04f 0300 	mov.w	r3, #0
   d7c44:	e004      	b.n	d7c50 <__aeabi_i2f+0x8>
   d7c46:	bf00      	nop

000d7c48 <__aeabi_i2f>:
   d7c48:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d7c4c:	bf48      	it	mi
   d7c4e:	4240      	negmi	r0, r0
   d7c50:	ea5f 0c00 	movs.w	ip, r0
   d7c54:	bf08      	it	eq
   d7c56:	4770      	bxeq	lr
   d7c58:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d7c5c:	4601      	mov	r1, r0
   d7c5e:	f04f 0000 	mov.w	r0, #0
   d7c62:	e01c      	b.n	d7c9e <__aeabi_l2f+0x2a>

000d7c64 <__aeabi_ul2f>:
   d7c64:	ea50 0201 	orrs.w	r2, r0, r1
   d7c68:	bf08      	it	eq
   d7c6a:	4770      	bxeq	lr
   d7c6c:	f04f 0300 	mov.w	r3, #0
   d7c70:	e00a      	b.n	d7c88 <__aeabi_l2f+0x14>
   d7c72:	bf00      	nop

000d7c74 <__aeabi_l2f>:
   d7c74:	ea50 0201 	orrs.w	r2, r0, r1
   d7c78:	bf08      	it	eq
   d7c7a:	4770      	bxeq	lr
   d7c7c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d7c80:	d502      	bpl.n	d7c88 <__aeabi_l2f+0x14>
   d7c82:	4240      	negs	r0, r0
   d7c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7c88:	ea5f 0c01 	movs.w	ip, r1
   d7c8c:	bf02      	ittt	eq
   d7c8e:	4684      	moveq	ip, r0
   d7c90:	4601      	moveq	r1, r0
   d7c92:	2000      	moveq	r0, #0
   d7c94:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d7c98:	bf08      	it	eq
   d7c9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d7c9e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d7ca2:	fabc f28c 	clz	r2, ip
   d7ca6:	3a08      	subs	r2, #8
   d7ca8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d7cac:	db10      	blt.n	d7cd0 <__aeabi_l2f+0x5c>
   d7cae:	fa01 fc02 	lsl.w	ip, r1, r2
   d7cb2:	4463      	add	r3, ip
   d7cb4:	fa00 fc02 	lsl.w	ip, r0, r2
   d7cb8:	f1c2 0220 	rsb	r2, r2, #32
   d7cbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7cc0:	fa20 f202 	lsr.w	r2, r0, r2
   d7cc4:	eb43 0002 	adc.w	r0, r3, r2
   d7cc8:	bf08      	it	eq
   d7cca:	f020 0001 	biceq.w	r0, r0, #1
   d7cce:	4770      	bx	lr
   d7cd0:	f102 0220 	add.w	r2, r2, #32
   d7cd4:	fa01 fc02 	lsl.w	ip, r1, r2
   d7cd8:	f1c2 0220 	rsb	r2, r2, #32
   d7cdc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d7ce0:	fa21 f202 	lsr.w	r2, r1, r2
   d7ce4:	eb43 0002 	adc.w	r0, r3, r2
   d7ce8:	bf08      	it	eq
   d7cea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d7cee:	4770      	bx	lr

000d7cf0 <__aeabi_ldivmod>:
   d7cf0:	b97b      	cbnz	r3, d7d12 <__aeabi_ldivmod+0x22>
   d7cf2:	b972      	cbnz	r2, d7d12 <__aeabi_ldivmod+0x22>
   d7cf4:	2900      	cmp	r1, #0
   d7cf6:	bfbe      	ittt	lt
   d7cf8:	2000      	movlt	r0, #0
   d7cfa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d7cfe:	e006      	blt.n	d7d0e <__aeabi_ldivmod+0x1e>
   d7d00:	bf08      	it	eq
   d7d02:	2800      	cmpeq	r0, #0
   d7d04:	bf1c      	itt	ne
   d7d06:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d7d0a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d7d0e:	f000 b9b1 	b.w	d8074 <__aeabi_idiv0>
   d7d12:	f1ad 0c08 	sub.w	ip, sp, #8
   d7d16:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d7d1a:	2900      	cmp	r1, #0
   d7d1c:	db09      	blt.n	d7d32 <__aeabi_ldivmod+0x42>
   d7d1e:	2b00      	cmp	r3, #0
   d7d20:	db1a      	blt.n	d7d58 <__aeabi_ldivmod+0x68>
   d7d22:	f000 f835 	bl	d7d90 <__udivmoddi4>
   d7d26:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7d2e:	b004      	add	sp, #16
   d7d30:	4770      	bx	lr
   d7d32:	4240      	negs	r0, r0
   d7d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7d38:	2b00      	cmp	r3, #0
   d7d3a:	db1b      	blt.n	d7d74 <__aeabi_ldivmod+0x84>
   d7d3c:	f000 f828 	bl	d7d90 <__udivmoddi4>
   d7d40:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7d48:	b004      	add	sp, #16
   d7d4a:	4240      	negs	r0, r0
   d7d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7d50:	4252      	negs	r2, r2
   d7d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7d56:	4770      	bx	lr
   d7d58:	4252      	negs	r2, r2
   d7d5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7d5e:	f000 f817 	bl	d7d90 <__udivmoddi4>
   d7d62:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7d66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7d6a:	b004      	add	sp, #16
   d7d6c:	4240      	negs	r0, r0
   d7d6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7d72:	4770      	bx	lr
   d7d74:	4252      	negs	r2, r2
   d7d76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7d7a:	f000 f809 	bl	d7d90 <__udivmoddi4>
   d7d7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7d82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7d86:	b004      	add	sp, #16
   d7d88:	4252      	negs	r2, r2
   d7d8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7d8e:	4770      	bx	lr

000d7d90 <__udivmoddi4>:
   d7d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7d94:	468c      	mov	ip, r1
   d7d96:	460e      	mov	r6, r1
   d7d98:	4604      	mov	r4, r0
   d7d9a:	9d08      	ldr	r5, [sp, #32]
   d7d9c:	2b00      	cmp	r3, #0
   d7d9e:	d150      	bne.n	d7e42 <__udivmoddi4+0xb2>
   d7da0:	428a      	cmp	r2, r1
   d7da2:	4617      	mov	r7, r2
   d7da4:	d96c      	bls.n	d7e80 <__udivmoddi4+0xf0>
   d7da6:	fab2 fe82 	clz	lr, r2
   d7daa:	f1be 0f00 	cmp.w	lr, #0
   d7dae:	d00b      	beq.n	d7dc8 <__udivmoddi4+0x38>
   d7db0:	f1ce 0420 	rsb	r4, lr, #32
   d7db4:	fa20 f404 	lsr.w	r4, r0, r4
   d7db8:	fa01 f60e 	lsl.w	r6, r1, lr
   d7dbc:	ea44 0c06 	orr.w	ip, r4, r6
   d7dc0:	fa02 f70e 	lsl.w	r7, r2, lr
   d7dc4:	fa00 f40e 	lsl.w	r4, r0, lr
   d7dc8:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d7dcc:	0c22      	lsrs	r2, r4, #16
   d7dce:	fbbc f0f9 	udiv	r0, ip, r9
   d7dd2:	fa1f f887 	uxth.w	r8, r7
   d7dd6:	fb09 c610 	mls	r6, r9, r0, ip
   d7dda:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7dde:	fb00 f308 	mul.w	r3, r0, r8
   d7de2:	42b3      	cmp	r3, r6
   d7de4:	d909      	bls.n	d7dfa <__udivmoddi4+0x6a>
   d7de6:	19f6      	adds	r6, r6, r7
   d7de8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7dec:	f080 8122 	bcs.w	d8034 <__udivmoddi4+0x2a4>
   d7df0:	42b3      	cmp	r3, r6
   d7df2:	f240 811f 	bls.w	d8034 <__udivmoddi4+0x2a4>
   d7df6:	3802      	subs	r0, #2
   d7df8:	443e      	add	r6, r7
   d7dfa:	1af6      	subs	r6, r6, r3
   d7dfc:	b2a2      	uxth	r2, r4
   d7dfe:	fbb6 f3f9 	udiv	r3, r6, r9
   d7e02:	fb09 6613 	mls	r6, r9, r3, r6
   d7e06:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7e0a:	fb03 f808 	mul.w	r8, r3, r8
   d7e0e:	45a0      	cmp	r8, r4
   d7e10:	d909      	bls.n	d7e26 <__udivmoddi4+0x96>
   d7e12:	19e4      	adds	r4, r4, r7
   d7e14:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d7e18:	f080 810a 	bcs.w	d8030 <__udivmoddi4+0x2a0>
   d7e1c:	45a0      	cmp	r8, r4
   d7e1e:	f240 8107 	bls.w	d8030 <__udivmoddi4+0x2a0>
   d7e22:	3b02      	subs	r3, #2
   d7e24:	443c      	add	r4, r7
   d7e26:	ebc8 0404 	rsb	r4, r8, r4
   d7e2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7e2e:	2100      	movs	r1, #0
   d7e30:	2d00      	cmp	r5, #0
   d7e32:	d062      	beq.n	d7efa <__udivmoddi4+0x16a>
   d7e34:	fa24 f40e 	lsr.w	r4, r4, lr
   d7e38:	2300      	movs	r3, #0
   d7e3a:	602c      	str	r4, [r5, #0]
   d7e3c:	606b      	str	r3, [r5, #4]
   d7e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7e42:	428b      	cmp	r3, r1
   d7e44:	d907      	bls.n	d7e56 <__udivmoddi4+0xc6>
   d7e46:	2d00      	cmp	r5, #0
   d7e48:	d055      	beq.n	d7ef6 <__udivmoddi4+0x166>
   d7e4a:	2100      	movs	r1, #0
   d7e4c:	e885 0041 	stmia.w	r5, {r0, r6}
   d7e50:	4608      	mov	r0, r1
   d7e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7e56:	fab3 f183 	clz	r1, r3
   d7e5a:	2900      	cmp	r1, #0
   d7e5c:	f040 8090 	bne.w	d7f80 <__udivmoddi4+0x1f0>
   d7e60:	42b3      	cmp	r3, r6
   d7e62:	d302      	bcc.n	d7e6a <__udivmoddi4+0xda>
   d7e64:	4282      	cmp	r2, r0
   d7e66:	f200 80f8 	bhi.w	d805a <__udivmoddi4+0x2ca>
   d7e6a:	1a84      	subs	r4, r0, r2
   d7e6c:	eb66 0603 	sbc.w	r6, r6, r3
   d7e70:	2001      	movs	r0, #1
   d7e72:	46b4      	mov	ip, r6
   d7e74:	2d00      	cmp	r5, #0
   d7e76:	d040      	beq.n	d7efa <__udivmoddi4+0x16a>
   d7e78:	e885 1010 	stmia.w	r5, {r4, ip}
   d7e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7e80:	b912      	cbnz	r2, d7e88 <__udivmoddi4+0xf8>
   d7e82:	2701      	movs	r7, #1
   d7e84:	fbb7 f7f2 	udiv	r7, r7, r2
   d7e88:	fab7 fe87 	clz	lr, r7
   d7e8c:	f1be 0f00 	cmp.w	lr, #0
   d7e90:	d135      	bne.n	d7efe <__udivmoddi4+0x16e>
   d7e92:	1bf3      	subs	r3, r6, r7
   d7e94:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7e98:	fa1f fc87 	uxth.w	ip, r7
   d7e9c:	2101      	movs	r1, #1
   d7e9e:	fbb3 f0f8 	udiv	r0, r3, r8
   d7ea2:	0c22      	lsrs	r2, r4, #16
   d7ea4:	fb08 3610 	mls	r6, r8, r0, r3
   d7ea8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7eac:	fb0c f300 	mul.w	r3, ip, r0
   d7eb0:	42b3      	cmp	r3, r6
   d7eb2:	d907      	bls.n	d7ec4 <__udivmoddi4+0x134>
   d7eb4:	19f6      	adds	r6, r6, r7
   d7eb6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7eba:	d202      	bcs.n	d7ec2 <__udivmoddi4+0x132>
   d7ebc:	42b3      	cmp	r3, r6
   d7ebe:	f200 80ce 	bhi.w	d805e <__udivmoddi4+0x2ce>
   d7ec2:	4610      	mov	r0, r2
   d7ec4:	1af6      	subs	r6, r6, r3
   d7ec6:	b2a2      	uxth	r2, r4
   d7ec8:	fbb6 f3f8 	udiv	r3, r6, r8
   d7ecc:	fb08 6613 	mls	r6, r8, r3, r6
   d7ed0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7ed4:	fb0c fc03 	mul.w	ip, ip, r3
   d7ed8:	45a4      	cmp	ip, r4
   d7eda:	d907      	bls.n	d7eec <__udivmoddi4+0x15c>
   d7edc:	19e4      	adds	r4, r4, r7
   d7ede:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d7ee2:	d202      	bcs.n	d7eea <__udivmoddi4+0x15a>
   d7ee4:	45a4      	cmp	ip, r4
   d7ee6:	f200 80b5 	bhi.w	d8054 <__udivmoddi4+0x2c4>
   d7eea:	4613      	mov	r3, r2
   d7eec:	ebcc 0404 	rsb	r4, ip, r4
   d7ef0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7ef4:	e79c      	b.n	d7e30 <__udivmoddi4+0xa0>
   d7ef6:	4629      	mov	r1, r5
   d7ef8:	4628      	mov	r0, r5
   d7efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7efe:	f1ce 0120 	rsb	r1, lr, #32
   d7f02:	fa06 f30e 	lsl.w	r3, r6, lr
   d7f06:	fa07 f70e 	lsl.w	r7, r7, lr
   d7f0a:	fa20 f901 	lsr.w	r9, r0, r1
   d7f0e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7f12:	40ce      	lsrs	r6, r1
   d7f14:	ea49 0903 	orr.w	r9, r9, r3
   d7f18:	fbb6 faf8 	udiv	sl, r6, r8
   d7f1c:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d7f20:	fb08 661a 	mls	r6, r8, sl, r6
   d7f24:	fa1f fc87 	uxth.w	ip, r7
   d7f28:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d7f2c:	fb0a f20c 	mul.w	r2, sl, ip
   d7f30:	429a      	cmp	r2, r3
   d7f32:	fa00 f40e 	lsl.w	r4, r0, lr
   d7f36:	d90a      	bls.n	d7f4e <__udivmoddi4+0x1be>
   d7f38:	19db      	adds	r3, r3, r7
   d7f3a:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d7f3e:	f080 8087 	bcs.w	d8050 <__udivmoddi4+0x2c0>
   d7f42:	429a      	cmp	r2, r3
   d7f44:	f240 8084 	bls.w	d8050 <__udivmoddi4+0x2c0>
   d7f48:	f1aa 0a02 	sub.w	sl, sl, #2
   d7f4c:	443b      	add	r3, r7
   d7f4e:	1a9b      	subs	r3, r3, r2
   d7f50:	fa1f f989 	uxth.w	r9, r9
   d7f54:	fbb3 f1f8 	udiv	r1, r3, r8
   d7f58:	fb08 3311 	mls	r3, r8, r1, r3
   d7f5c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7f60:	fb01 f60c 	mul.w	r6, r1, ip
   d7f64:	429e      	cmp	r6, r3
   d7f66:	d907      	bls.n	d7f78 <__udivmoddi4+0x1e8>
   d7f68:	19db      	adds	r3, r3, r7
   d7f6a:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d7f6e:	d26b      	bcs.n	d8048 <__udivmoddi4+0x2b8>
   d7f70:	429e      	cmp	r6, r3
   d7f72:	d969      	bls.n	d8048 <__udivmoddi4+0x2b8>
   d7f74:	3902      	subs	r1, #2
   d7f76:	443b      	add	r3, r7
   d7f78:	1b9b      	subs	r3, r3, r6
   d7f7a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d7f7e:	e78e      	b.n	d7e9e <__udivmoddi4+0x10e>
   d7f80:	f1c1 0e20 	rsb	lr, r1, #32
   d7f84:	fa22 f40e 	lsr.w	r4, r2, lr
   d7f88:	408b      	lsls	r3, r1
   d7f8a:	4323      	orrs	r3, r4
   d7f8c:	fa20 f70e 	lsr.w	r7, r0, lr
   d7f90:	fa06 f401 	lsl.w	r4, r6, r1
   d7f94:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d7f98:	fa26 f60e 	lsr.w	r6, r6, lr
   d7f9c:	433c      	orrs	r4, r7
   d7f9e:	fbb6 f9fc 	udiv	r9, r6, ip
   d7fa2:	0c27      	lsrs	r7, r4, #16
   d7fa4:	fb0c 6619 	mls	r6, ip, r9, r6
   d7fa8:	fa1f f883 	uxth.w	r8, r3
   d7fac:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d7fb0:	fb09 f708 	mul.w	r7, r9, r8
   d7fb4:	42b7      	cmp	r7, r6
   d7fb6:	fa02 f201 	lsl.w	r2, r2, r1
   d7fba:	fa00 fa01 	lsl.w	sl, r0, r1
   d7fbe:	d908      	bls.n	d7fd2 <__udivmoddi4+0x242>
   d7fc0:	18f6      	adds	r6, r6, r3
   d7fc2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7fc6:	d241      	bcs.n	d804c <__udivmoddi4+0x2bc>
   d7fc8:	42b7      	cmp	r7, r6
   d7fca:	d93f      	bls.n	d804c <__udivmoddi4+0x2bc>
   d7fcc:	f1a9 0902 	sub.w	r9, r9, #2
   d7fd0:	441e      	add	r6, r3
   d7fd2:	1bf6      	subs	r6, r6, r7
   d7fd4:	b2a0      	uxth	r0, r4
   d7fd6:	fbb6 f4fc 	udiv	r4, r6, ip
   d7fda:	fb0c 6614 	mls	r6, ip, r4, r6
   d7fde:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d7fe2:	fb04 f808 	mul.w	r8, r4, r8
   d7fe6:	45b8      	cmp	r8, r7
   d7fe8:	d907      	bls.n	d7ffa <__udivmoddi4+0x26a>
   d7fea:	18ff      	adds	r7, r7, r3
   d7fec:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d7ff0:	d228      	bcs.n	d8044 <__udivmoddi4+0x2b4>
   d7ff2:	45b8      	cmp	r8, r7
   d7ff4:	d926      	bls.n	d8044 <__udivmoddi4+0x2b4>
   d7ff6:	3c02      	subs	r4, #2
   d7ff8:	441f      	add	r7, r3
   d7ffa:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d7ffe:	ebc8 0707 	rsb	r7, r8, r7
   d8002:	fba0 8902 	umull	r8, r9, r0, r2
   d8006:	454f      	cmp	r7, r9
   d8008:	4644      	mov	r4, r8
   d800a:	464e      	mov	r6, r9
   d800c:	d314      	bcc.n	d8038 <__udivmoddi4+0x2a8>
   d800e:	d029      	beq.n	d8064 <__udivmoddi4+0x2d4>
   d8010:	b365      	cbz	r5, d806c <__udivmoddi4+0x2dc>
   d8012:	ebba 0304 	subs.w	r3, sl, r4
   d8016:	eb67 0706 	sbc.w	r7, r7, r6
   d801a:	fa07 fe0e 	lsl.w	lr, r7, lr
   d801e:	40cb      	lsrs	r3, r1
   d8020:	40cf      	lsrs	r7, r1
   d8022:	ea4e 0303 	orr.w	r3, lr, r3
   d8026:	e885 0088 	stmia.w	r5, {r3, r7}
   d802a:	2100      	movs	r1, #0
   d802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8030:	4613      	mov	r3, r2
   d8032:	e6f8      	b.n	d7e26 <__udivmoddi4+0x96>
   d8034:	4610      	mov	r0, r2
   d8036:	e6e0      	b.n	d7dfa <__udivmoddi4+0x6a>
   d8038:	ebb8 0402 	subs.w	r4, r8, r2
   d803c:	eb69 0603 	sbc.w	r6, r9, r3
   d8040:	3801      	subs	r0, #1
   d8042:	e7e5      	b.n	d8010 <__udivmoddi4+0x280>
   d8044:	4604      	mov	r4, r0
   d8046:	e7d8      	b.n	d7ffa <__udivmoddi4+0x26a>
   d8048:	4611      	mov	r1, r2
   d804a:	e795      	b.n	d7f78 <__udivmoddi4+0x1e8>
   d804c:	4681      	mov	r9, r0
   d804e:	e7c0      	b.n	d7fd2 <__udivmoddi4+0x242>
   d8050:	468a      	mov	sl, r1
   d8052:	e77c      	b.n	d7f4e <__udivmoddi4+0x1be>
   d8054:	3b02      	subs	r3, #2
   d8056:	443c      	add	r4, r7
   d8058:	e748      	b.n	d7eec <__udivmoddi4+0x15c>
   d805a:	4608      	mov	r0, r1
   d805c:	e70a      	b.n	d7e74 <__udivmoddi4+0xe4>
   d805e:	3802      	subs	r0, #2
   d8060:	443e      	add	r6, r7
   d8062:	e72f      	b.n	d7ec4 <__udivmoddi4+0x134>
   d8064:	45c2      	cmp	sl, r8
   d8066:	d3e7      	bcc.n	d8038 <__udivmoddi4+0x2a8>
   d8068:	463e      	mov	r6, r7
   d806a:	e7d1      	b.n	d8010 <__udivmoddi4+0x280>
   d806c:	4629      	mov	r1, r5
   d806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8072:	bf00      	nop

000d8074 <__aeabi_idiv0>:
   d8074:	4770      	bx	lr
   d8076:	bf00      	nop

000d8078 <__cxa_atexit>:
   d8078:	b510      	push	{r4, lr}
   d807a:	4c05      	ldr	r4, [pc, #20]	; (d8090 <__cxa_atexit+0x18>)
   d807c:	4613      	mov	r3, r2
   d807e:	b12c      	cbz	r4, d808c <__cxa_atexit+0x14>
   d8080:	460a      	mov	r2, r1
   d8082:	4601      	mov	r1, r0
   d8084:	2002      	movs	r0, #2
   d8086:	f3af 8000 	nop.w
   d808a:	bd10      	pop	{r4, pc}
   d808c:	4620      	mov	r0, r4
   d808e:	bd10      	pop	{r4, pc}
   d8090:	00000000 	.word	0x00000000

000d8094 <memcpy>:
   d8094:	b510      	push	{r4, lr}
   d8096:	1e43      	subs	r3, r0, #1
   d8098:	440a      	add	r2, r1
   d809a:	4291      	cmp	r1, r2
   d809c:	d004      	beq.n	d80a8 <memcpy+0x14>
   d809e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d80a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d80a6:	e7f8      	b.n	d809a <memcpy+0x6>
   d80a8:	bd10      	pop	{r4, pc}

000d80aa <memset>:
   d80aa:	4402      	add	r2, r0
   d80ac:	4603      	mov	r3, r0
   d80ae:	4293      	cmp	r3, r2
   d80b0:	d002      	beq.n	d80b8 <memset+0xe>
   d80b2:	f803 1b01 	strb.w	r1, [r3], #1
   d80b6:	e7fa      	b.n	d80ae <memset+0x4>
   d80b8:	4770      	bx	lr
	...

000d80bc <srand>:
   d80bc:	b538      	push	{r3, r4, r5, lr}
   d80be:	4b12      	ldr	r3, [pc, #72]	; (d8108 <srand+0x4c>)
   d80c0:	681c      	ldr	r4, [r3, #0]
   d80c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d80c4:	4605      	mov	r5, r0
   d80c6:	b9d3      	cbnz	r3, d80fe <srand+0x42>
   d80c8:	2018      	movs	r0, #24
   d80ca:	f7fd fafb 	bl	d56c4 <malloc>
   d80ce:	f243 330e 	movw	r3, #13070	; 0x330e
   d80d2:	63a0      	str	r0, [r4, #56]	; 0x38
   d80d4:	8003      	strh	r3, [r0, #0]
   d80d6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d80da:	8043      	strh	r3, [r0, #2]
   d80dc:	f241 2334 	movw	r3, #4660	; 0x1234
   d80e0:	8083      	strh	r3, [r0, #4]
   d80e2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d80e6:	80c3      	strh	r3, [r0, #6]
   d80e8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d80ec:	8103      	strh	r3, [r0, #8]
   d80ee:	2305      	movs	r3, #5
   d80f0:	8143      	strh	r3, [r0, #10]
   d80f2:	230b      	movs	r3, #11
   d80f4:	8183      	strh	r3, [r0, #12]
   d80f6:	2201      	movs	r2, #1
   d80f8:	2300      	movs	r3, #0
   d80fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d80fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8100:	2200      	movs	r2, #0
   d8102:	611d      	str	r5, [r3, #16]
   d8104:	615a      	str	r2, [r3, #20]
   d8106:	bd38      	pop	{r3, r4, r5, pc}
   d8108:	2003e1c8 	.word	0x2003e1c8

000d810c <strdup>:
   d810c:	4b02      	ldr	r3, [pc, #8]	; (d8118 <strdup+0xc>)
   d810e:	4601      	mov	r1, r0
   d8110:	6818      	ldr	r0, [r3, #0]
   d8112:	f000 b803 	b.w	d811c <_strdup_r>
   d8116:	bf00      	nop
   d8118:	2003e1c8 	.word	0x2003e1c8

000d811c <_strdup_r>:
   d811c:	b570      	push	{r4, r5, r6, lr}
   d811e:	4606      	mov	r6, r0
   d8120:	4608      	mov	r0, r1
   d8122:	460c      	mov	r4, r1
   d8124:	f000 f80d 	bl	d8142 <strlen>
   d8128:	1c45      	adds	r5, r0, #1
   d812a:	4629      	mov	r1, r5
   d812c:	4630      	mov	r0, r6
   d812e:	f7fd faf1 	bl	d5714 <_malloc_r>
   d8132:	4606      	mov	r6, r0
   d8134:	b118      	cbz	r0, d813e <_strdup_r+0x22>
   d8136:	462a      	mov	r2, r5
   d8138:	4621      	mov	r1, r4
   d813a:	f7ff ffab 	bl	d8094 <memcpy>
   d813e:	4630      	mov	r0, r6
   d8140:	bd70      	pop	{r4, r5, r6, pc}

000d8142 <strlen>:
   d8142:	4603      	mov	r3, r0
   d8144:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8148:	2a00      	cmp	r2, #0
   d814a:	d1fb      	bne.n	d8144 <strlen+0x2>
   d814c:	1a18      	subs	r0, r3, r0
   d814e:	3801      	subs	r0, #1
   d8150:	4770      	bx	lr

000d8152 <link_code_end>:
	...

000d8154 <dynalib_user>:
   d8154:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d8164:	0000 0000 6552 6461 0079 6f74 5200 636f     ....Ready.to.Roc
   d8174:	206b 6e61 2064 6f52 6c6c 4100 7269 5120     k and Roll.Air Q
   d8184:	6175 696c 7974 5320 6e65 6f73 2072 6572     uality Sensor re
   d8194:	6461 2e79 4100 7269 5120 6175 696c 7974     ady..Air Quality
   d81a4:	5320 6e65 6f73 2072 5245 4f52 2152 4200      Sensor ERROR!.B
   d81b4:	454d 3832 2030 6553 736e 726f 7220 6165     ME280 Sensor rea
   d81c4:	7964 002e 4d42 3245 3038 5320 6e65 6f73     dy..BME280 Senso
   d81d4:	2072 5245 4f52 2152 5400 6d65 3a70 0020     r ERROR!.Temp: .
   d81e4:	0043 7548 696d 6964 7974 203a 2500 5000     C.Humidity: .%.P
   d81f4:	6572 7373 203a 2000 5068 0061 7544 7473     ress: . hPa.Dust
   d8204:	203a 2000 6370 2f73 004c 6554 706d 203a     : . pcs/L.Temp: 
   d8214:	6425 5000 6572 7373 7275 3a65 2520 0064     %d.Pressure: %d.
   d8224:	7548 696d 6964 7974 203a 6425 7b00 3122     Humidity: %d.{"1
   d8234:	3a22 2522 322e 2266 202c 3222 3a22 2522     ":"%.2f", "2":"%
   d8244:	312e 2266 202c 3322 3a22 2522 322e 2266     .1f", "3":"%.2f"
   d8254:	202c 3422 3a22 2522 322e 2266 202c 3522     , "4":"%.2f", "5
   d8264:	3a22 2522 332e 2266 202c 3622 3a22 2522     ":"%.3f", "6":"%
   d8274:	322e 2266 202c 3722 3a22 2522 312e 2266     .2f", "7":"%.1f"
   d8284:	202c 3822 3a22 2522 342e 2266 202c 6b22     , "8":"%.4f", "k
   d8294:	3a22 2522 2273 007d 4c45 4845 4b33 4138     ":"%s"}.ELEH3K8A
   d82a4:	3251 4e52 395a 4b41 6500 766e 762d 6c61     Q2RNZ9AK.env-val
   d82b4:	0073 0000                                   s...

000d82b8 <_ZTVN8particle13__SPISettingsE>:
	...
   d82c0:	45fd 000d 6564 6166 6c75 2074 4d00 4253     .E..default .MSB
   d82d0:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d82e0:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d82f0:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d8300:	4d20 444f 2545 3e64 0000                          MODE%d>.

000d8309 <_ZL9BasicFont>:
	...
   d8311:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d8321:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d8331:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d8341:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d8351:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d8361:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d8371:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d8381:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d8391:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d83a1:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d83b1:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d83c1:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d83d1:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d83e1:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d83f1:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d8401:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d8411:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d8421:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d8431:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d8441:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d8451:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d8461:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d8471:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d8481:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d8491:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d84a1:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d84b1:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d84c1:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d84d1:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d84e1:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d84f1:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d8501:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d8511:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d8521:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d8531:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d8541:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d8551:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d8561:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d8571:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d8581:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d8591:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d85a1:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d85b1:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d85c1:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d85d1:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d85e1:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d85f1:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d8601:	0200 0505 0002 0000 0000 0000                    ...........

000d860c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8614:	57b9 000d 57bf 000d 5815 000d 57cd 000d     .W...W...X...W..
   d8624:	57bb 000d                                   .W..

000d8628 <_ZTVN5spark13EthernetClassE>:
	...
   d8630:	5dcf 000d 5dc5 000d 5dbb 000d 5db1 000d     .]...]...]...]..
   d8640:	5da5 000d 5d99 000d 5d8d 000d 5d85 000d     .]...]...]...]..
   d8650:	5d7b 000d 5d71 000d 619d 000d               {]..q]...a..

000d865c <_ZTV7TwoWire>:
	...
   d8664:	5ded 000d 5e37 000d 5e0f 000d 5def 000d     .]..7^...^...]..
   d8674:	5e17 000d 5e1f 000d 5e27 000d 5e2f 000d     .^...^..'^../^..

000d8684 <_ZTV9IPAddress>:
	...
   d868c:	5ec1 000d 5eb1 000d 5eb3 000d 0066 6e6c     .^...^...^..f.ln
   d869c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d86ac:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d86bc:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d86cc:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d86dc:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d86ec:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d86fc:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d870c:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d871c:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d872c:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d873c:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d874c:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d875c:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d876c:	6170 696e 0063 6c61 006c 0000               panic.all...

000d8778 <_ZTVN5spark9MeshClassE>:
	...
   d8780:	602f 000d 6025 000d 601b 000d 6011 000d     /`..%`...`...`..
   d8790:	6005 000d 5ff9 000d 5fed 000d 5fe5 000d     .`..._..._..._..
   d87a0:	5fdb 000d 5fd1 000d 619d 000d               ._..._...a..

000d87ac <_ZTVN5spark12NetworkClassE>:
	...
   d87b4:	6135 000d 613f 000d 6149 000d 6153 000d     5a..?a..Ia..Sa..
   d87c4:	615d 000d 6169 000d 6175 000d 6181 000d     ]a..ia..ua...a..
   d87d4:	6189 000d 6193 000d 619d 000d               .a...a...a..

000d87e0 <_ZTV8SPIClass>:
	...
   d87e8:	63fd 000d 63ff 000d                         .c...c..

000d87f0 <_ZL14clock_divisors>:
   d87f0:	0800 1810 2820 3830                         .... (08

000d87f8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8800:	6605 000d 660b 000d 6af3 000d 6619 000d     .f...f...j...f..
   d8810:	6607 000d                                   .f..

000d8814 <_ZTV9TCPClient>:
	...
   d881c:	40d9 000d 4105 000d 657d 000d 6597 000d     .@...A..}e...e..
   d882c:	6999 000d 67db 000d 67ad 000d 65c1 000d     .i...g...g...e..
   d883c:	6871 000d 661d 000d 680f 000d 696b 000d     qh...f...h..ki..
   d884c:	65c3 000d 65fb 000d 65a9 000d 670d 000d     .e...e...e...g..
   d885c:	678d 000d 6977 6972 676e 7200 6365 2076     .g..wiring.recv 
   d886c:	7265 6f72 2072 203d 6425 5a00 2500 302b     error = %d.Z.%+0
   d887c:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   d888c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d889c:	6d69 0065                                   ime.

000d88a0 <_ZTV11USARTSerial>:
	...
   d88a8:	6b21 000d 6b71 000d 6b7f 000d 627d 000d     !k..qk...k..}b..
   d88b8:	6b35 000d 6b57 000d 6b43 000d 6b6b 000d     5k..Wk..Ck..kk..
   d88c8:	6b23 000d 6b27 000d                         #k..'k..

000d88d0 <_ZTV9USBSerial>:
	...
   d88d8:	6c29 000d 6c79 000d 6c87 000d 627d 000d     )l..yl...l..}b..
   d88e8:	6c65 000d 6c2b 000d 6c41 000d 6c73 000d     el..+l..Al..sl..
   d88f8:	6c57 000d 6c25 000d                         Wl..%l..

000d8900 <_ZTVN5spark9WiFiClassE>:
	...
   d8908:	6d93 000d 6d89 000d 6d7f 000d 6d35 000d     .m...m...m..5m..
   d8918:	6d73 000d 6d67 000d 6d5b 000d 6d53 000d     sm..gm..[m..Sm..
   d8928:	6d49 000d 6d3f 000d 619d 000d               Im..?m...a..

000d8934 <__sf_fake_stdin>:
	...

000d8954 <__sf_fake_stdout>:
	...

000d8974 <__sf_fake_stderr>:
	...

000d8994 <link_const_variable_data_end>:
   d8994:	000d4585 	.word	0x000d4585
   d8998:	000d4ee9 	.word	0x000d4ee9
   d899c:	000d4fb1 	.word	0x000d4fb1
   d89a0:	000d4fb5 	.word	0x000d4fb5
   d89a4:	000d4fb9 	.word	0x000d4fb9
   d89a8:	000d51a1 	.word	0x000d51a1
   d89ac:	000d51a5 	.word	0x000d51a5
   d89b0:	000d51a9 	.word	0x000d51a9
   d89b4:	000d57a9 	.word	0x000d57a9
   d89b8:	000d5dd9 	.word	0x000d5dd9
   d89bc:	000d5fc1 	.word	0x000d5fc1
   d89c0:	000d60e5 	.word	0x000d60e5
   d89c4:	000d6269 	.word	0x000d6269
   d89c8:	000d63e1 	.word	0x000d63e1
   d89cc:	000d6565 	.word	0x000d6565
   d89d0:	000d6b0d 	.word	0x000d6b0d
   d89d4:	000d6d9d 	.word	0x000d6d9d
   d89d8:	000d6fb9 	.word	0x000d6fb9
   d89dc:	000d7011 	.word	0x000d7011
   d89e0:	000d70d5 	.word	0x000d70d5
   d89e4:	000d7159 	.word	0x000d7159
   d89e8:	000d71dd 	.word	0x000d71dd

000d89ec <link_constructors_end>:
   d89ec:	00000000 	.word	0x00000000
